Dim ByteCounter(16) As LongDim tmpComm(16) As StringDim Sync(16) As ByteDim Preamble(16) As ByteDim DataField(16) As LongDim Mode(16) As ByteDim TempDataStr(16) As StringDim MsgType(16) As ByteDim TempMode As LongDim TempMsgType As LongDim ShotDataTemp As LongDim LastInoTime As LongDim HostAvailable As BooleanDim WatchToggle As Boolean'Dim CommBusy As BooleanPrivate Sub cboHost_Click()If DemoMode = True Then    Exit SubEnd IfIf HostImage(cboHost.ListIndex).DriveLetter = "C" Then    FilePath = "C:\Innomation\Monitor\"Else    FilePath = HostImage(cboHost.ListIndex).DriveLetter + ":\Monitor\"End IfHostSafe = cboHost.TextCall InitAllEnd SubPrivate Sub cmdAdmin_Click()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IffrmAdmin.Enabled = TruefrmAdmin.Show 1End SubPrivate Sub cmdExit_Click()If DemoMode = False Then    If ConfigData.HostEnab = True Then        Answer = MsgBox("Exiting will shut down data aquisition! Are you sure?", vbYesNo)        If Answer = vbYes Then            End        Else            Exit Sub        End If    End IfEnd IfEndEnd SubPrivate Sub cmdHelp_Click()frmHelp.Enabled = TruefrmHelp.Show 1End SubPrivate Sub cmdHistory_Click()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IffrmAnalysis.Enabled = TruefrmAnalysis.Show 1End SubPrivate Sub cmdReport_Click()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IffrmReport.Enabled = TruefrmReport.Show 1End SubPrivate Sub cmdSchedNewProd_Click()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IffrmNewProduction.Enabled = TruefrmNewProduction.Show 1End SubPrivate Sub cmdDataMemory_Click()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IffrmSetup2.Enabled = TruefrmSetup2.Show 1End SubPrivate Sub cmdUtilities_Click()TempStr = InputBox("Enter Admin Password")If TempStr = "vb" Or TempStr = Trim$(ConfigData.MaintPassward) Or TempStr = Trim$(ConfigData.AdminPassword) Then    If TempStr = "vb" Then        SuperUser = True    Else        SuperUser = False    End If    frmUtilities.Enabled = True    frmUtilities.Show 1Else    MsgBox "Password Is Incorrect"End IfEnd SubPrivate Sub Form_Activate()Call LinkHostsCall LoadHostComboIf cboHost.Text = "No Host" Then    If cboHost.ListCount > 0 Then        cboHost.ListIndex = 0    End If    HostAvailable = False  Rem Mikey  MsgBox "No Host"Else    HostAvailable = TrueEnd IfEnd SubPrivate Sub Form_Load()SetupOpen = FalseDemoMode = False 'Set Demo/Production Mode Here'ErrorFlag = TruefrmMain.Visible = FalseInoTimeSeed = "1/1/2002 0:0:0" ' All Date/Time References are based on this timeIf DemoMode = True Then    On Error GoTo NoConfigFile    Open "c:\Innomation\Demo\ITCFX" For Binary As #ConfigFileElse    On Error GoTo NoConfigFile    Open "c:\Innomation\Monitor\ITCFX" For Binary As #ConfigFileEnd IfNoConfigFile:On Error GoTo 0If Err.Number <> 0 Then    MsgBox "Cannot Open Configuration File. Call (573) 485-3025"    EndEnd IfIf LOF(ConfigFile) = 0 Then    MsgBox "No Configuration File Found. Call (573) 485-3025"    EndEnd IfOn Error GoTo LoadtrapGet #ConfigFile, 1, ConfigDataClose #ConfigFileIf DemoMode = True Then    FilePath = "c:\Innomation\Demo\"    ConfigData.HostName = "Demo Host"    cboHost.Text = "Demo Host"Else    If ConfigData.HostEnab = True Then        HostSafe = Trim$(ConfigData.HostName)        FilePath = "C:\Innomation\Monitor\"    Else        HostSafe = "No Host"    End If    cboHost.Text = HostSafeEnd If'On Error Resume Next'MkDir "c:\Innomation\Export"ExportPath = "C:\Innomation\Export\"On Error GoTo 0CompanyDisplayName = Trim$(ConfigData.CompanyName)If DemoMode = True Then    CompanyDisplayName = "Demo Version"Else    CompanyDisplayName = Trim$(ConfigData.CompanyName)End IffrmMain.Caption = frmMain.Caption + "            Ino-Toyo II           Licensed To: " + CompanyDisplayNamePortOffset = ConfigData.FirstPort - 1If ConfigData.HostEnab = False Then ' Must be a remote    If ConfigData.RemoteClientEnab = False Then        MsgBox "Neither Host Nor Client Is Enabled. Call (573) 485-3025"    End IfEnd IfSampleSize = ConfigData.SampSizeParams(0) = "Heater 1"Params(1) = "Heater 2"Params(2) = "Heater 3"Params(3) = "Heater 4"Params(4) = "Heater 5"Params(5) = "Heater 6"Params(6) = "Hopper Temp"Params(7) = "Oil Temp"Params(8) = "Mold Temp 1"Params(9) = "Mold Temp 2"Params(10) = "Hold Press Pos"Params(11) = "Cushion Pos"Params(12) = "Chrg Fin Pos"Params(13) = "Open Fin Pos"Params(14) = "Screw Rev 1"Params(15) = "Screw Rev 2"Params(16) = "Screw Rev 3"Params(17) = "Screw Rev 4"Params(18) = "1st Pressure"Params(19) = "2nd Pressure"Params(20) = "3rd Pressure"Params(21) = "4th Pressure"Params(22) = "5th Pressure"Params(23) = "6th Pressure"Params(24) = "Back Press 1"Params(25) = "Back Press 2"Params(26) = "Back Press 3"Params(27) = "Back Press 4"Params(28) = "1st Speed"Params(29) = "2nd Speed"Params(30) = "3rd Speed"Params(31) = "4th Speed"Params(32) = "5th Speed"Params(33) = "6th Speed"Params(34) = "1st Speed Pres"Params(35) = "2nd Speed Pres"Params(36) = "3rd Speed Pres"Params(37) = "4th Speed Pres"Params(38) = "5th Speed Pres"Params(39) = "Pressure 1"Params(40) = "Speed 1"Params(41) = "Pressure 2"Params(42) = "Speed 2"Params(43) = "Pressure 3"Params(44) = "Speed 3"Params(45) = "Pressure 4"Params(46) = "Speed 4"Params(47) = "Rise Up Time"Params(48) = "Cycle Time"Params(49) = "1st Inj Time"Params(50) = "Charge Time"Params(51) = "Temp I1"Params(52) = "Temp I2"Params(53) = "Temp I3"Params(54) = "Temp I4"Params(55) = "Temp I5"Params(56) = "Temp I6"Params(57) = "Reserved 1"Params(58) = "Reserved 2"Params(59) = "Max Inj Prs"Params(60) = "Max Inj Spd"Params(61) = "Reserved 5"Params(62) = "Reserved 6"Params(63) = "Reserved 7"Alarms(0) = "None"Alarms(1) = "Timer Counted Out"Alarms(2) = "Temperature Gauge Abnormal"Alarms(3) = "Repeat-Lot Completed"Alarms(4) = "Data Abnormal"Alarms(5) = "Zero Adjustment Necessary"Alarms(6) = "Internal Data Abnormal"Alarms(7) = "Eject Number Changed"Alarms(8) = "Setting Range"Alarms(9) = "Setting Now Under Way"Alarms(10) = "Number Is Too Large"Alarms(11) = "Set Value Corrected"Alarms(12) = "Setting Op Order Wrong"Alarms(13) = "Can Change In Auto"Alarms(14) = "Incorrect Nozzle Setting"Alarms(15) = "Oil Press Changeover"Alarms(16) = "Molding No. Counted Out"Alarms(17) = "Molding Soon Complete"Alarms(18) = "Oil Pressure Malfunction"Alarms(19) = "Oil Pressure Malfunction"Alarms(20) = "Continuous Rejects"Alarms(21) = "Cycle Timer Is Over"Alarms(22) = "Oil Pressure Malfunction"Alarms(23) = "Wrong read In-Heater Diff"Alarms(24) = "Data Memory Storage Cell"Alarms(25) = "Insert Data memory Cassette"Alarms(26) = "Write Completed"Alarms(27) = "Write Not Completed"Alarms(28) = "Data Not Available"Alarms(29) = "No Read. Mach Type Wrong"Alarms(30) = "Abnormal Data Transmission"Alarms(31) = "Read Completed"Alarms(32) = "Heater Disconnected"Alarms(33) = "Temperature Too High"Alarms(34) = "Thermocouple Disconnected"Alarms(35) = "Barrel Temperature Too High"Alarms(36) = "Barrel Temperature Too Low"Alarms(37) = "Hopper Throat Temp Abnormal"Alarms(38) = "Nozzle Tip Melt Temp Abnormal"Alarms(39) = "Abnormal Data Transmission"Alarms(40) = "Oil Temperature Too High"Alarms(41) = "Now Heating... Wait"Alarms(42) = "Heat Up Completed"Alarms(43) = "Suction Filter Clogged"Alarms(44) = "Oil Level Dropped"Alarms(45) = "Filter Clogged"Alarms(46) = "Oil Cleaner Clogged"Alarms(47) = "Data Storage Cell Dead"Alarms(48) = "Safety Door Limit Switch"Alarms(49) = "Acc Charge Abnormal"Alarms(50) = "Encoder Z-Tat Out Of Order"Alarms(51) = "A/D Z-Tat Out Of Order"Alarms(52) = "EH Auto Adjust Starts"Alarms(53) = "Die Lock Switch Off"Alarms(54) = "Now Locking"Alarms(55) = "Now Unlocking"Alarms(56) = "Close Safety Door"Alarms(57) = "Mold Not Opened"Alarms(58) = "Low Pressure Mold Closing"Alarms(59) = "Mold Not Closed"Alarms(60) = "EH Auto Adjust Completed"Alarms(61) = "Core 1 In Limit Switch"Alarms(62) = "Core 2 In Limit Switch"Alarms(63) = "Core 3 In Limit Switch"Alarms(64) = "Core 1 Out Limit Switch"Alarms(65) = "Core 2 Out Limit Switch"Alarms(66) = "Core 3 Out Limit Switch"Alarms(67) = "Ejection Impossible"Alarms(68) = "Eject Not Returned"Alarms(69) = "Acc Not Charging"Alarms(70) = "CRT CPU Out Of Order"Alarms(71) = "ATC Z-Tat Out Of order"Alarms(72) = "Purge Cover Is Open"Alarms(73) = "1st Injection Abnormal"Alarms(74) = "Nozzle Touch Not Performed"Alarms(75) = "Cold Start Prevention"Alarms(76) = "Barrel Temperature Rising"Alarms(77) = "Heater Switch/Zone Setting"Alarms(78) = "10 Key Z-Tat Out Of Order"Alarms(79) = "Barrel Temperature High"Alarms(80) = "Back Door Not Opened"Alarms(81) = "Back Door Abnormal"Alarms(82) = "Mold Open/Close Suspended"Alarms(83) = "No Interlock For Mold O/C"Alarms(84) = "No Interlock To Open Mold"Alarms(85) = "No Interlock To Close Mold"Alarms(86) = "No Signal To Start Eject"Alarms(87) = "No Signal From Product Sensor"Alarms(88) = "Mold Not Locked"Alarms(89) = "Mold Height Adj Advance Limit"Alarms(90) = "Mold Height Adj Retract Limit"Alarms(91) = "Mold Height Motor Slipped"Alarms(92) = "Open Mold Slightly"Alarms(93) = "Clamping Force Setup Complete"Alarms(94) = "Auto Purge Complete"Alarms(95) = "Mold Change Complete"Alarms(96) = "Confirm Core Position, Press Reset"Alarms(97) = "Mold Too Thick"Alarms(98) = "Mold Too Thin"Alarms(99) = "Mold Not Unlocked"Alarms(100) = "EH Z-Tat Out Of Order"Alarms(101) = "Servo CPU Out Of Order"Alarms(102) = "**0066**"Alarms(103) = "Auto Mold Take-Out Completed"Alarms(104) = "Auto Mold Take-In Completed"Alarms(105) = "Zero Adj Of Inj Encoder Incomplete"Alarms(106) = "Zero Adj Start Push Reset Key"Alarms(107) = "Zero Adjustment Completed"Alarms(108) = "Zero Adj Of Inj Mold Close Incomplete"Alarms(109) = "Zero Adj Of Inj Eject Incomplete"Alarms(110) = "**006E**"Alarms(111) = "**006F**"Alarms(112) = "**006F**"Alarms(113) = "Auto Mold Take-In Impossible"Alarms(114) = "Lock-Up Limit Switch Abnormal"Alarms(115) = "Lock-Off Limit Switch Abnormal"Alarms(116) = "Die Lock-Up Abnormal"Alarms(117) = "No Signal Of 'Take-Out Completed'"Alarms(118) = "No Signal Of 'Lock-Start'"Alarms(119) = "No Signal Of 'Take-In Completed'"Alarms(120) = "EH Auto Adjustment Not Completed"Alarms(121) = "**0079**"Alarms(122) = "Max Pressure Not Built Up"Alarms(123) = "Screw Cold Start Prevention Cleared"Alarms(124) = "**007C**"Alarms(125) = "**007D**"Alarms(126) = "Core 1 Limit Switch Abnormal"Alarms(127) = "Core 2 Limit Switch Abnormal"Alarms(128) = "Heater 1 Temperature Over"Alarms(129) = "Heater 1 Temperature Short"Alarms(130) = "Heater 2 Temperature Over"Alarms(131) = "Heater 2 Temperature Short"Alarms(132) = "Heater 3 Temperature Over"Alarms(133) = "Heater 3 Temperature Short"Alarms(134) = "Heater 4 Temperature Over"Alarms(135) = "Heater 4 Temperature Short"Alarms(136) = "Heater 5 Temperature Over"Alarms(137) = "Heater 5 Temperature Short"Alarms(138) = "Thermo Nozzle Temperature Over"Alarms(139) = "Thermo Nozzle Temperature Short"Alarms(140) = "Hopper Temperature Over"Alarms(141) = "Hopper Temperature Short"Alarms(142) = "Oil Temperature Over"Alarms(143) = "Oil Temperature Short"Alarms(144) = "Mold 1 Temperature Over"Alarms(145) = "Mold 1 Temperature Short"Alarms(146) = "Mold 2 Temperature Over"Alarms(147) = "Mold 2 Temperature Short"Alarms(148) = "Cycle Time Over"Alarms(149) = "Cycle Time Short"Alarms(150) = "1st Injection Time Over"Alarms(151) = "1st injection Time Short"Alarms(152) = "Charge Time Over"Alarms(153) = "Charge Time Short"Alarms(154) = "2nd Pres Chg-Over Position Over"Alarms(155) = "2nd Pres Chg-Over Position Short"Alarms(156) = "Short Shot"Alarms(157) = "Over Pack"Alarms(158) = "Charge Completion Position Over"Alarms(159) = "Charge Completion Position Short"Alarms(160) = "Mold Open Completion Pos Over"Alarms(161) = "Mold Open Completion Pos Short"Alarms(162) = "Screw Revolution 1 Over"Alarms(163) = "Screw Revolution 1 Short"Alarms(164) = "Screw Revolution 2 Over"Alarms(165) = "Screw Revolution 2 Short"Alarms(166) = "Screw Revolution 3 Over"Alarms(167) = "Screw Revolution 3 Short"Alarms(168) = "Screw Revolution 4 Over"Alarms(169) = "Screw Revolution 4 Short"Alarms(170) = "1st Injection Pressure Over"Alarms(171) = "1st Injection Pressure Short"Alarms(172) = "2nd Injection Pressure Over"Alarms(173) = "2nd Injection Pressure Short"Alarms(174) = "3rd Injection Pressure Over"Alarms(175) = "3rd Injection Pressure Short"Alarms(176) = "4th Injection Pressure Over"Alarms(177) = "4th Injection Pressure Short"Alarms(178) = "5th Injection Pressure Over"Alarms(179) = "5th Injection Pressure Short"Alarms(180) = "6th Injection Pressure Over"Alarms(181) = "6th Injection Pressure Short"Alarms(182) = "Back Pressure 1 Over"Alarms(183) = "Back Pressure 1 Short"Alarms(184) = "Back Pressure 2 Over"Alarms(185) = "Back Pressure 2 Short"Alarms(186) = "Back Pressure 3 Over"Alarms(187) = "Back Pressure 3 Short"Alarms(188) = "Back Pressure 4 Over"Alarms(189) = "Back Pressure 4 Short"Alarms(190) = "Heater 6 Temperature Over"Alarms(191) = "Heater 6 Temperature Short"Alarms(192) = "1st Injection Speed Over"Alarms(193) = "1st Injection Speed Short"Alarms(194) = "2nd Injection Speed Over"Alarms(195) = "2nd Injection Speed Short"Alarms(196) = "3rd Injection Speed Over"Alarms(197) = "3rd Injection Speed Short"Alarms(198) = "4th Injection Speed Over"Alarms(199) = "4th Injection Speed Short"Alarms(200) = "5th Injection Speed Over"Alarms(201) = "5th Injection Speed Short"Alarms(202) = "6th Injection Speed Over"Alarms(203) = "6th Injection Speed Short"Alarms(204) = "1st Speed Chg-Over Pres Over"Alarms(205) = "1st Speed Chg-Over Pres Short"Alarms(206) = "2nd Speed Chg-Over Pres Over"Alarms(207) = "2nd Speed Chg-Over Pres Short"Alarms(208) = "3rd Speed Chg-Over Pres Over"Alarms(209) = "3rd Speed Chg-Over Pres Short"Alarms(210) = "4th Speed Chg-Over Pres Over"Alarms(211) = "4th Speed Chg-Over Pres Short"Alarms(212) = "5th Speed Chg-Over Pres Over"Alarms(213) = "5th Speed Chg-Over Pres Short"Alarms(214) = "Rise-Up Time Over"Alarms(215) = "Rise-Up Time Short"Alarms(216) = "Pressure 1 Over"Alarms(217) = "Pressure 1 Short"Alarms(218) = "Speed 1 Over"Alarms(219) = "Speed 1 Short"Alarms(220) = "Pressure 2 Over"Alarms(221) = "Pressure 2 Short"Alarms(222) = "Speed 2 Over"Alarms(223) = "Speed 2 Short"Alarms(224) = "Pressure 3 Over"Alarms(225) = "Pressure 3 Short"Alarms(226) = "Speed 3 Over"Alarms(227) = "Speed 3 Short"Alarms(228) = "Pressure 4 Over"Alarms(229) = "Pressure 4 Short"Alarms(230) = "Speed 4 Over"Alarms(231) = "Speed 4 Short"Alarms(232) = "CH11 Temperature Over"Alarms(233) = "CH11 Temperature Short"Alarms(234) = "CH12 Temperature Over"Alarms(235) = "CH12 Temperature Short"Alarms(236) = "CH13 Temperature Over"Alarms(237) = "CH13 Temperature Short"Alarms(238) = "CH14 Temperature Over"Alarms(239) = "CH14 Temperature Short"Alarms(240) = "CH15 Temperature Over"Alarms(241) = "CH15 Temperature Short"Alarms(242) = "CH16 Temperature Over"Alarms(243) = "CH16 Temperature Short"Alarms(244) = "System RAM Abnormal"Alarms(245) = "Bank 4 RAM Abnormal"Alarms(246) = "Bank 5 RAM Abnormal"Alarms(247) = "Bank 6 RAM Abnormal"Alarms(248) = "Bank 7 RAM Abnormal"Alarms(249) = "Encoder DP-RAM Abnormal"Alarms(250) = "A/D DP-RAM Abnormal"Alarms(251) = "CRT DP-RAM Abnormal"Alarms(252) = "ATC DP-RAM Abnormal"Alarms(253) = "IO-Keyboard DP-RAM Abnormal"Alarms(254) = "EH (Servo) DP-RAM Abnormal"Alarms(255) = "**00FF**"Alarms(256) = "Zero Adj On Mold Movement Complete"Alarms(257) = "Zero Adj On Ejector Complete"Alarms(258) = "Zero Adj On Injection Abnormal"Alarms(259) = "Zero Adj On Mold Movement Abnormal"Alarms(260) = "Zero Adj On Ejector Abnormal"Alarms(261) = "Charge Servo Is Abnormal"Alarms(262) = "Injection Servo Is Abnormal"Alarms(263) = "Mold Movement Servo Is Abnormal"Alarms(264) = "Ejector Servo Is Abnormal"Alarms(265) = "**109**"Alarms(266) = "**10A**"Alarms(267) = "**10B**"Alarms(268) = "**10C**"Alarms(269) = "**10D**"Alarms(270) = "**10E**"Alarms(271) = "**10F**"Alarms(272) = "**110**"Alarms(273) = "**111**"Alarms(274) = "**112**"Alarms(275) = "**113**"Alarms(276) = "**114**"Alarms(277) = "**115**"Alarms(278) = "**116**"Alarms(279) = "**117**"Alarms(280) = "**118**"Alarms(281) = "**119**"Alarms(282) = "**11A**"Alarms(283) = "**11B**"Alarms(284) = "**11C**"Alarms(285) = "**11D**"Alarms(286) = "**11E**"Alarms(287) = "**11F**"Alarms(288) = "**120**"Alarms(289) = "**121**"Alarms(290) = "**122**"Alarms(291) = "**123**"Alarms(292) = "**124**"Alarms(293) = "**125**"Alarms(294) = "**126**"Alarms(295) = "**127**"Alarms(296) = "**128**"Alarms(297) = "**129**"Alarms(298) = "**12A**"Alarms(299) = "**12B**"Alarms(300) = "**12C**"Alarms(301) = "**12D**"Alarms(302) = "**12E**"Alarms(303) = "**12F**"Alarms(304) = "**130**"Alarms(305) = "**131**"Alarms(306) = "**132**"Alarms(307) = "**133**"Alarms(308) = "**134**"Alarms(309) = "**135**"Alarms(310) = "**136**"Alarms(311) = "**137**"Alarms(312) = "**138**"Alarms(313) = "**139**"Alarms(314) = "**13A**"Alarms(315) = "**13B**"Alarms(316) = "**13C**"Alarms(317) = "**13D**"Alarms(318) = "**13E**"Alarms(319) = "**13F**"'Get structure sizes for file seek calculationsShotSize = Len(UpdateMachShotData(0))ModeSize = Len(UpdateMachModeData(0))AlarmSize = Len(UpdateMachAlarmData(0))SetupSize = Len(UpdateMachSetupData(0))MachConfigSize = Len(UpdateMachineConfig(0))PartConfigSize = Len(PartConfig)ProductionSize = Len(Production)MoldConfigSize = Len(MoldConfig)CustConfigSize = Len(CustConfig)CurrentProdSize = Len(CurrentProd)CurrentShotSize = Len(UpdateCurrentShot)RejectSize = Len(RejectRecord)If DemoMode = False Then    If ConfigData.HostEnab = False And ConfigData.Drive(0) = "C" Then        MsgBox "Host Option Not Installed, Cannot Connect To Machines"    Else        If ConfigData.HostEnab = True Then            If ConfigData.RadioEnab = False Then                'Set up ports                For I = 1 To ConfigData.NumPorts                    MSComm1(I - 1).CommPort = I + PortOffset                    MSComm1(I - 1).InputMode = comInputModeText                    MSComm1(I - 1).Handshaking = comNone                    MSComm1(I - 1).Settings = "9600,E,8,1"                    MSComm1(I - 1).InputLen = 1                    MSComm1(I - 1).PortOpen = True                    MSComm1(I - 1).RThreshold = 1                    'Debug.Print "Radio False"                Next I            Else                Call InitRadioComm            End If        End If    End IfEnd If' Initialize shot aquisition and TimeOutsCall ResyncAll'Start Splash TimerTimer2.Enabled = TrueTimer2.Interval = 5'Start Main TimerInoTime = DateDiff("s", InoTimeSeed, Now) ' Initial setting of InoTime as startupLastInoTime = InoTimeTimer1.Enabled = TrueTimer1.Interval = 500EvenSecond = FalseCall InitAllCall PopulateCellsCommBusy = FalseIf ConfigData.HostEnab = True Then    For I = 0 To 15        CommErrCtr(I) = 0        txtMachID(I).BackColor = vbWhite        txtMachID(I).ToolTipText = Str(CommErrCtr(I)) + " Comm Errors"    Next IEnd IfOn Error GoTo 0Exit SubLoadtrap:Close #ConfigFileOn Error GoTo 0If ErrorFlag = True Then    MsgBox "LoadAlarms Error"Else    Call ProcErrorEnd IfEnd SubPrivate Sub Label1_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)Call LinkHostsCall LoadHostComboEnd Sub'Private Sub lblTestSetup_DblClick()'frmSetup.Enabled = True'frmSetup.Show 1'End SubPrivate Sub MSComm1_OnComm(Index As Integer)On Error GoTo MSComm1TrapIf CommBusy = True Then    MsgBox "Comm Conflict"    Call CloseUpdateFiles    Exit SubElse    CommBusy = TrueEnd IfIf ConfigData.HostEnab = False Then ' Trap for Client Only    Call CloseUpdateFiles    MsgBox "Remote Client has COMM Event"    Exit SubEnd IftmpComm(CommNum) = "" ' Eliminate residueIf ConfigData.RadioEnab = False Then    CommNum = Index    Call CloseUpdateFiles    If MSComm1(CommNum).CommEvent <> comEvReceive Then        If MSComm1(0).CommEvent < 1000 Then ' NOT error            CommBusy = False            Exit Sub        End If        Call Resync        CommErrCtr(CommNum) = CommErrCtr(CommNum) + 1        txtMachID(CommNum).BackColor = 33023        txtMachID(CommNum).ToolTipText = Str(CommErrCtr(CommNum)) + " Comm Errors"        Exit Sub    Else        tmpComm(CommNum) = MSComm1(CommNum).Input    End IfElse    If MSComm1(0).CommEvent <> comEvReceive Then        Call CloseUpdateFiles        If MSComm1(0).CommEvent < 1000 Then ' NOT error            CommBusy = False            Exit Sub        End If        Call Resync        CommErrCtr(CommNum) = CommErrCtr(CommNum) + 1 '''        txtMachID(CommNum).BackColor = 33023 '''        txtMachID(CommNum).ToolTipText = Str(CommErrCtr(CommNum)) + " Comm Errors" '''        'Debug.Print MSComm1(CommNum).CommEvent        CommBusy = False        Exit Sub    End If    ' Low level radio sync goes here    RadioComm = MSComm1(0).Input    '''If Len(RadioComm) > 1 Then '''        '''txtCavities(8).Text = Str(Len(RadioComm)) '''    '''End If '''    '''Open Trim$(FilePath) & "CaptureG2" For Binary As #DebugFile '''    '''Put #DebugFile, LOF(DebugFile) + 1, RadioComm '''    '''Close #DebugFile '''    '''Exit Sub '''        If Len(RadioComm) = 0 Then ' Handle MSComm error here later        '''txtCavities(8).BackColor = 255 '''        CommBusy = False        Exit Sub    End If    frmMain.BackColor = &H800000    WatchTimer1.Enabled = False    WatchTimer1.Enabled = True    WatchTimer1.Interval = 60000    RawData = Asc(RadioComm)    'debug.print Hex(RawData)    Select Case RawSync        Case 0            If RawData = 131 Then                RawSync = 1                DstMacAddr = 0                'debug.print "raw sync=1"                CommBusy = False                Exit Sub            End If        Case 1            LowLength = RawData            RawSync = 2            'debug.print "raw sync=2"            CommBusy = False            Exit Sub        Case 2            HighLength = RawData            RawSync = 3            'debug.print "raw sync=3"            StartMsgLength = HighLength * 256 + LowLength - 12 ' Actual data bytes            MsgLength = StartMsgLength            CommBusy = False            Exit Sub        Case 3 To 8            DstMacAddr = DstMacAddr + RawData            RawSync = RawSync + 1            'debug.print "raw sync=3 to 8"            If (RawSync = 9) And (DstMacAddr <> 331) Then                ''' Bad Sync Throw it out and Restart                RawSync = 0                Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFile                Print #CommLogFile, "Bad Dest", Now, DstMacAddr                Close #CommLogFile            End If            CommBusy = False            Exit Sub        Case 9 To 14            SrcMacAddr = RawData            'debug.print "raw sync=9 to 15"            RawSync = RawSync + 1            If RawSync = 15 Then                For CommNum = 0 To 15                    If MacAddr(CommNum) = SrcMacAddr Then                        BadinaRow = 0                        Exit For                    End If                Next CommNum            End If            If CommNum > 15 Then                WatchTimer2.Enabled = False                CommNum = 15                'Call RfInit                Call BreakSync ' Should never get here! Have seen this caused by MacAddr(CommNum)=0                                ' and bogus SrcMacAddr Fix is to reboot everything                Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFile                Print #CommLogFile, "Bad MAC", Now, SrcMacAddr, BadinaRow                Close #CommLogFile                BadinaRow = BadinaRow + 1                If BadinaRow > 4 Then                    Call Form_Load                    Exit Sub                End If                ' Reinitialize Server, 4 bad Syncs in a row                Call InitRadioComm                Call ResyncAll            End If            CommBusy = False            Exit Sub        Case 15            'debug.print "raw sync=15"            tmpComm(CommNum) = RadioComm            MsgLength = MsgLength - 1            WatchTimer2.Enabled = False            If MsgLength = 0 Then                RawSync = 9999                '''Exit Sub                '''Call BreakSync            Else                WatchTimer2.Enabled = True                WatchTimer2.Interval = 2000            End If        Case 9999            Call BreakSync            Exit Sub            'Debug.Print MsgLength    End SelectEnd IfIf CommNum > 15 Then    Exit SubEnd If' Get here if comEvReceivetxtMachID(CommNum).BackColor = vbWhiteIf Len(tmpComm(CommNum)) <> 0 Then ' Only transfer if valid data    If Sync(CommNum) < 3 Then ' Not already in sync        If Sync(CommNum) = 0 Then ' Waiting for first'"'            If tmpComm(CommNum) = Chr$(34) Then ' Is it a '"'?                Sync(CommNum) = 1 ' Yes, 1/3rd of sync accomplished            Else                Call Resync            End If            Call CloseUpdateFiles            Exit Sub        End If        If Sync(CommNum) = 1 Then ' Waiting for ':'            If tmpComm(CommNum) = Chr$(58) Then ' Is it a ':'?                Sync(CommNum) = 2 ' Yes, 2/3rd of sync accomplished            Else                Call Resync            End If            Call CloseUpdateFiles            Exit Sub        End If        If Sync(CommNum) = 2 Then            If tmpComm(CommNum) = Chr$(34) Then ' Is it a '"'?                Sync(CommNum) = 3 ' Yes, sync accomplished                WatchTimer3(CommNum).Enabled = False                WatchTimer3(CommNum).Enabled = True                WatchTimer3(CommNum).Interval = 3000            Else                Call Resync            End If            Call CloseUpdateFiles            Exit Sub        End If    Else ' Get here if in Sync        If tmpComm(CommNum) = Chr$(34) Then ' Got sync start when already in sync (error)            Call Resync            Call CloseUpdateFiles            Exit Sub        End If        If Preamble(CommNum) = 0 Then ' Get first comma            If tmpComm(CommNum) = "," Then                Preamble(CommNum) = 1 ' Next char is msgtype code            Else ' Something is wrong... abort sync                Call Resync            End If            Call CloseUpdateFiles            Exit Sub        End If        If Preamble(CommNum) = 1 Then ' This must be the msgtype code            If tmpComm(CommNum) = "," Then                If IsNumeric(TempDataStr(CommNum)) = False Then ' Trap for invalid data                    TempDataStr(CommNum) = "253"                End If                TempMsgType = Val(TempDataStr(CommNum))                If TempMsgType > 99 Then ' Overflow trap (msgtype is just a byte)                    TempMsgType = 254                End If                If TempMsgType < 0 Then                    TempMsgType = 255                End If                MsgType(CommNum) = TempMsgType                TempDataStr(CommNum) = ""                Preamble(CommNum) = Preamble(CommNum) + 1                If MsgType(CommNum) > 6 Then ' For testing only                    Select Case MsgType(CommNum)                        Case 8                            SetupCol = 0                            NumDataFields = 76                        Case 10                            SetupCol = 1                            NumDataFields = 57                        Case 12                            SetupCol = 2                            NumDataFields = 31                        Case 14                            SetupCol = 3                            NumDataFields = 58                        Case 16                            SetupCol = 4                            NumDataFields = 0                        Case 24                            SetupCol = 5                            NumDataFields = 34                    End Select                    If SetupOpen = True Then                        frmSetup!txtMsgType.Text = Trim$(Str$(MsgType(CommNum)))                    End If                End If                                If MsgType(CommNum) <> 1 Then ' Not an alarm, clear previous alarm (if any)                    Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile                    Get #UpdateCurrentShotFile, 1, UpdateCurrentShot                    UpdateCurrentShot.CurrentShotAlarm(CommNum) = 0                    Put #UpdateCurrentShotFile, 1, UpdateCurrentShot                    Close #UpdateCurrentShotFile                End If                                If MsgType(CommNum) < 1 Or MsgType(CommNum) > 24 Then ' Throw away spurious codes                    Call Resync                End If            Else ' This must be the msgtype code                            TempDataStr(CommNum) = TempDataStr(CommNum) & tmpComm(CommNum) ' Build msgtype code            End If            Call CloseUpdateFiles            Exit Sub        End If                If MsgType(CommNum) = 1 Then 'Alarm Data            If Preamble(CommNum) > 1 Then ' Must be in data section                If tmpComm(CommNum) = "," Then                    'cboHost.Text = TempDataStr(commnum)                    InoTime = DateDiff("s", InoTimeSeed, Now)                    If InoTime < LastInoTime Then                        MsgBox "Check Computer System Date/Time Setting"                        InoTime = LastInoTime                    Else                        LastInoTime = InoTime                    End If                    If LastRecord(CommNum).LastAlarmTime <> InoTime Then ' Bulletproof against dups                        LastRecord(CommNum).LastAlarmTime = InoTime                        UpdateMachAlarmData(CommNum).AlarmTime = InoTime                        If ToyoAlarmTable(Val(TempDataStr(CommNum)), CommNum).AlarmInfoCode < 2 Then                            'Debug.Print ToyoAlarmTable(Val(TempDataStr(CommNum)), CommNum).AlarmInfoCode                            Exit Sub                        End If                        'Debug.Print ToyoAlarmTable(Val(TempDataStr(CommNum)), CommNum).AlarmInfoCode                        UpdateMachAlarmData(CommNum).AlarmData = Val(TempDataStr(CommNum)) '''                        UpdateAlarmFileName = "AlarmFile" + Trim$(Str$(CommNum + 1))                        'on error Resume Next                        Open Trim$(FilePath) & UpdateAlarmFileName For Binary As #UpdateMachAlarmFile                        If LOF(UpdateMachAlarmFile) + 1 > AlarmNdx(CommNum) Then                            AlarmNdx(CommNum) = LOF(UpdateMachAlarmFile) + 1                        Else                            MsgBox "FAE: Alm " + Str$(AlarmNdx(CommNum)) + ":" + Str$(CommNum) + ":" + Str$(LOF(UpdateMachAlarmFile))                            Call CloseUpdateFiles                            Exit Sub                        End If                        Put #UpdateMachAlarmFile, AlarmNdx(CommNum), UpdateMachAlarmData(CommNum)                        Close #UpdateMachAlarmFile                        ' Write to the current shot file                        'on error Resume Next                        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile                        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot                        UpdateCurrentShot.CurrentShotAlarm(CommNum) = Val(TempDataStr(CommNum))                        If UpdateCurrentShot.CurrentShotFirstAlarmNdx(CommNum) = 0 Then                            UpdateCurrentShot.CurrentShotFirstAlarmNdx(CommNum) = AlarmNdx(CommNum)                        End If                        UpdateCurrentShot.CurrentShotLastAlarmNdx(CommNum) = AlarmNdx(CommNum)                        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot                        Close #UpdateCurrentShotFile                    End If                    Call Resync                    Call CloseUpdateFiles                    Exit Sub                Else                    TempDataStr(CommNum) = TempDataStr(CommNum) + tmpComm(CommNum)                End If            Else                If tmpComm(CommNum) = "," Then                Preamble(CommNum) = Preamble(CommNum) + 1                End If            End If            Call CloseUpdateFiles            Exit Sub        End If                If MsgType(CommNum) > 6 Then ' Setup data            If Preamble(CommNum) > 1 Then ' Must be in data section                ByteCounter(CommNum) = ByteCounter(CommNum) + 1                If tmpComm(CommNum) = "," Then                    If DataField(CommNum) < 77 Then                        UpdateMachSetupData(CommNum).SetupData(SetupCol, DataField(CommNum)) = Val(TempDataStr(CommNum)) * 1000                        DataField(CommNum) = DataField(CommNum) + 1                        TestCtr = TestCtr + 1                        Text4.Text = Str$(TestCtr)                    End If                    TempDataStr(CommNum) = ""                Else                    TempDataStr(CommNum) = TempDataStr(CommNum) + tmpComm(CommNum)                End If            Else                If tmpComm(CommNum) = "," Then                Preamble(CommNum) = Preamble(CommNum) + 1                End If            End If            Call CloseUpdateFiles            Exit Sub        End If                                If MsgType(CommNum) = 2 Then ' Mode data            If Preamble(CommNum) < 2 Then                If tmpComm(CommNum) = "," Then                    Preamble(CommNum) = Preamble(CommNum) + 1                End If                Call CloseUpdateFiles                Exit Sub            Else                If tmpComm(CommNum) = "," Then ' End of field processing                    If IsNumeric(TempDataStr(CommNum)) = False Then ' Trap for invalid data                        TempDataStr(CommNum) = "253"                    End If                    TempMode = Val(TempDataStr(CommNum))                    If TempMode > 254 Then ' Overflow trap (Mode is just a byte)                        TempMode = 99                    End If                    If TempMode < 0 Then                        TempMode = 255                    End If                    Mode(CommNum) = TempMode                    TempDataStr(CommNum) = ""                    Preamble(CommNum) = Preamble(CommNum) + 1                                        If TempMode > 40 Then                        Call Resync                        Call CloseUpdateFiles                        Exit Sub                    End If                    ShotMode = TempMode                    Select Case ShotMode                        Case 0                            ShotMode = 1                        Case 1                            ShotMode = 1                        Case 9                            ShotMode = 3                        Case 11                            ShotMode = 4                        Case Else                            ShotMode = 2                    End Select                    'Write out the mode to the Nth mode file                    InoTime = DateDiff("s", InoTimeSeed, Now)                    If InoTime < LastInoTime Then                        MsgBox "Check Computer System Date/Time Setting"                        InoTime = LastInoTime                    Else                        LastInoTime = InoTime                    End If                    If LastRecord(CommNum).LastModeTime <> InoTime Then ' Bulletproof against dups                        TimeOut(CommNum) = 0                        LastRecord(CommNum).LastModeTime = InoTime                        UpdateMachModeData(CommNum).ModeTime = InoTime                        UpdateMachModeData(CommNum).ModeData = ShotMode                        UpdateModeFileName = "ModeFile" + Trim$(Str$(CommNum + 1))                        'on error Resume Next                        Open Trim$(FilePath) & UpdateModeFileName For Binary As #UpdateMachModeFile                        If LOF(UpdateMachModeFile) + 1 > ModeNdx(CommNum) Then                            ModeNdx(CommNum) = LOF(UpdateMachModeFile) + 1                        Else                            MsgBox "FAE: Mod " + Str$(ModeNdx(CommNum)) + ":" + Str$(CommNum) + ":" + Str$(LOF(UpdateMachModeFile))                            Call CloseUpdateFiles                            Exit Sub                        End If                        Put #UpdateMachModeFile, ModeNdx(CommNum), UpdateMachModeData(CommNum)                        Close #UpdateMachModeFile                        ' Write to the current shot file                        'on error Resume Next                        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile                        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot                        If UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum) = 0 Then                            UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum) = ModeNdx(CommNum)                        End If                        UpdateCurrentShot.CurrentShotLastModeNdx(CommNum) = ModeNdx(CommNum)                        UpdateCurrentShot.CurrentShotMode(CommNum) = ShotMode                        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot                        Close #UpdateCurrentShotFile                    End If                    Call Resync                    Exit Sub                Else                    TempDataStr(CommNum) = TempDataStr(CommNum) & tmpComm(CommNum)                End If            End If        End If        If MsgType(CommNum) = 3 Then ' Shot Data            If Preamble(CommNum) < 9 Then ' Throw away commas and Preamble(commnum)data                If tmpComm(CommNum) = "," Then                    Preamble(CommNum) = Preamble(CommNum) + 1                End If                Call CloseUpdateFiles                Exit Sub            Else ' Receive data                If tmpComm(CommNum) = "," Then ' End of field processing                    If DataField(CommNum) < 64 Then                        'on error Resume Next                        If IsNumeric(TempDataStr(CommNum)) = False Then ' Trap for invalid data                            TempDataStr(CommNum) = "0"                            'Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFile                            'Print #CommLogFile, "Data", Now, CommNum, TempDataStr(CommNum), DataField(CommNum)                            'Close #CommLogFile                            'Call Resync                            'exit Sub                        End If                        If DataField(CommNum) = 48 And Val(TempDataStr(CommNum)) < 2 Then ' Trap for Zero Cycle                                Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFile                                Print #CommLogFile, "Short Cycle", Now, CommNum, TempDataStr(CommNum)                                Close #CommLogFile                                Call Resync                                Exit Sub                        End If                        ShotDataTemp = Val(TempDataStr(CommNum)) * 1000                        UpdateMachShotData(CommNum).ShotData(DataField(CommNum)) = ShotDataTemp                    End If                    DataField(CommNum) = DataField(CommNum) + 1 ';;; Deliberate post-increment                    TempDataStr(CommNum) = ""                Else ' Accumulate data                    If tmpComm(CommNum) = Chr$(13) Then ' Should never get here                        Call Resync                        Exit Sub                    Else                        If tmpComm(CommNum) = "." Then                            If Right$(TempDataStr(CommNum), 1) <> "." Then                                TempDataStr(CommNum) = TempDataStr(CommNum) & tmpComm(CommNum)                            End If                        Else                            TempDataStr(CommNum) = TempDataStr(CommNum) & tmpComm(CommNum)                        End If                    End If                End If                If DataField(CommNum) = 64 Then                    'Write out the shot to the Nth shot file                    InoTime = DateDiff("s", InoTimeSeed, Now)                    If InoTime < LastInoTime Then                        MsgBox "Check Computer System Date/Time Setting"                        InoTime = LastInoTime                    Else                        LastInoTime = InoTime                    End If                    If LastRecord(CommNum).LastShotTime <> InoTime Then ' Bulletproof against dups                        TimeOut(CommNum) = 0                        LastRecord(CommNum).LastShotTime = InoTime                        UpdateMachShotData(CommNum).ShotTime = InoTime                        UpdateMachShotData(CommNum).ShotMode = QueryCurrentShot.CurrentShotMode(CommNum)                        'MsgBox UpdateMachShotData(CommNum).ShotTime                        UpdateShotFileName = "ShotFile" + Trim$(Str$(CommNum + 1))                        'on error Resume Next                        Open Trim$(FilePath) & UpdateShotFileName For Binary As #UpdateMachShotFile                        If LOF(UpdateMachShotFile) + 1 > ShotNdx(CommNum) Then                            ShotNdx(CommNum) = LOF(UpdateMachShotFile) + 1                        Else                            MsgBox "FAE: Sht " + Str$(ShotNdx(CommNum)) + ":" + Str$(CommNum) + ":" + Str$(LOF(UpdateMachShotFile))                            Call CloseUpdateFiles                            Exit Sub                        End If                        Put #UpdateMachShotFile, ShotNdx(CommNum), UpdateMachShotData(CommNum)                        Close #UpdateMachShotFile                        ' Write to the current shot file                        'on error Resume Next                        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile                        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot                        If UpdateCurrentShot.CurrentShotFirstNdx(CommNum) = 0 Then                            UpdateCurrentShot.CurrentShotFirstNdx(CommNum) = ShotNdx(CommNum)                        End If                        For LoopVar = 0 To 63 ' Copy shot data into current shot                            UpdateCurrentShot.CurrentShotData(CommNum, LoopVar) = UpdateMachShotData(CommNum).ShotData(LoopVar)                        Next LoopVar                        UpdateCurrentShot.CurrentShotLastNdx(CommNum) = ShotNdx(CommNum)                        UpdateCurrentShot.CurrentShotTotal(CommNum) = UpdateCurrentShot.CurrentShotTotal(CommNum) + 1                        If CurrentProd.CurrentCavities(CommNum) > 0 Then                            UpdateCurrentShot.CurrentShotAccepted(CommNum) = UpdateCurrentShot.CurrentShotAccepted(CommNum) + CurrentProd.CurrentCavities(CommNum)                        Else                            UpdateCurrentShot.CurrentShotAccepted(CommNum) = UpdateCurrentShot.CurrentShotAccepted(CommNum) + 1                        End If                        ' Put loop here to Update up to 16 cavity totals ############%%%%%%%%%%%%%%%%*****                        UpdateCurrentShot.CurrentShotTime(CommNum) = UpdateMachShotData(CommNum).ShotTime                        UpdateCurrentShot.CurrentShotMode(CommNum) = UpdateMachShotData(CommNum).ShotMode                        If UpdateCurrentShot.CurrentShotMode(CommNum) < 3 Then ' Unknown, Off, or Manual                            UpdateCurrentShot.CurrentShotMode(CommNum) = 5 ' Force mode to 'Run'                            UpdateMachModeData(CommNum).ModeTime = InoTime                            UpdateMachModeData(CommNum).ModeData = 5                            ' Added this code to simulate 'Run' mode in mode file itself for use in efficiency report                            UpdateModeFileName = "ModeFile" + Trim$(Str$(CommNum + 1))                            'on error Resume Next                            Open Trim$(FilePath) & UpdateModeFileName For Binary As #UpdateMachModeFile                            If LOF(UpdateMachModeFile) + 1 > ModeNdx(CommNum) Then                                ModeNdx(CommNum) = LOF(UpdateMachModeFile) + 1                            Else                                MsgBox "FAE: ModSht " + Str$(ModeNdx(CommNum)) + ":" + Str$(CommNum) + ":" + Str$(LOF(UpdateMachModeFile))                                Call CloseUpdateFiles                                Exit Sub                            End If                            Put #UpdateMachModeFile, ModeNdx(CommNum), UpdateMachModeData(CommNum)                            Close #UpdateMachModeFile                            If UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum) = 0 Then                                UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum) = ModeNdx(CommNum)                            End If                        End If                        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot                        Close #UpdateCurrentShotFile                        DataField(CommNum) = DataField(CommNum) + 1 ' Point past real data                        Production.ProdActive = True                        CurrentNdx = CommNum ' Set index for CurrentToProduction call                        Call CurrentToProduction ' Updates production record with static and dynamic data                    End If                    Call Resync ' This is the new way to terminate sync rather than wait for a CR                End If                Call CloseUpdateFiles                Exit Sub            End If        End If        Call CloseUpdateFiles        Exit Sub    End IfEnd IfCall CloseUpdateFilesOn Error GoTo 0Exit SubMSComm1Trap:Call CloseUpdateFilesOn Error GoTo 0If ErrorFlag = True Then    MsgBox "LoadAlarms Error"Else    Call ProcErrorEnd If'Open Trim$(FilePath) & "ErrorLog" For Binary As #ErrorFile'ErrorNdx = LOF(ErrorFile) + 1'If LOF(ErrorFile) + 1 > ErrorNdx Then'    ErrorNdx = LOF(ErrorFile) + 1'Else'    MsgBox "FAE: Err " + Str$(ErrorNdx) + ":" + Str$(CommNum) + ":" + Str$(LOF(ErrorFile))'    Call CloseUpdateFiles'    Exit Sub'End If'Put #ErrorFile, ErrorNdx, InoTime'Put #ErrorFile, ErrorNdx, Err.Number'Close #ErrorFileEnd SubPrivate Sub Text4_Click()TestCtr = 0Text4.Text = Str$(TestCtr)End SubPrivate Sub Timer1_Timer()'On Error GoTo Timer1TrapInoTime = DateDiff("s", InoTimeSeed, Now) ' Update InoTime to real time once per secondIf InoTime < LastInoTime Then    MsgBox "Check Computer System Date/Time Setting"    InoTime = LastInoTimeElse    LastInoTime = InoTimeEnd IfTimer1.Interval = 500EvenSecond = Not (EvenSecond)If EvenSecond = True Then    If DemoMode = True Then        Call DemoFiller ' Uncomment this line to enable demo    End If    Call PopulateCells    For TI = 0 To 15        If QueryCurrentShot.CurrentShotMode(TI) > 2 Then ' (Semi, Auto, or Run)            TimeOut(TI) = 0 'TimeOut(TI) + 1            If TimeOut(TI) = 300 Then                ' Open mode file and set mode to off (Mode 1)                If LastRecord(TI).LastModeTime <> InoTime Then ' Bulletproof against dups                    LastRecord(TI).LastModeTime = InoTime                    UpdateMachModeData(TI).ModeTime = InoTime                    UpdateMachModeData(TI).ModeData = 1 ' Force Mode to 'Off'                    UpdateModeFileName = "ModeFile" + Trim$(Str$(TI + 1))                    'on error Resume Next                    Open Trim$(FilePath) & UpdateModeFileName For Binary As #UpdateMachModeFile                    If LOF(UpdateMachModeFile) + 1 > ModeNdx(TI) Then                        ModeNdx(TI) = LOF(UpdateMachModeFile) + 1                    Else                        MsgBox "FAE: ModTim " + Str$(ModeNdx(TI)) + ":" + Str$(TI) + ":" + Str$(LOF(UpdateMachModeFile))                        Exit Sub                    End If                    Put #UpdateMachModeFile, ModeNdx(TI), UpdateMachModeData(TI)                    Close #UpdateMachModeFile                    ' Write to the current shot file                    'on error Resume Next                    Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile                    Get #UpdateCurrentShotFile, 1, UpdateCurrentShot                    If UpdateCurrentShot.CurrentShotFirstModeNdx(TI) = 0 Then                        UpdateCurrentShot.CurrentShotFirstModeNdx(TI) = ModeNdx(TI)                    End If                    UpdateCurrentShot.CurrentShotLastModeNdx(TI) = ModeNdx(TI)                    UpdateCurrentShot.CurrentShotMode(TI) = 1                    Put #UpdateCurrentShotFile, 1, UpdateCurrentShot                    Close #UpdateCurrentShotFile                End If                TimeOut(TI) = 0            End If        Else            TimeOut(TI) = 0        End If    Next TIElse    If Hour(Now) = 0 And Minute(Now) = 0 And Second(Now) = 0 Then ' Is it Midnight?        'on error Resume Next        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot        Close #UpdateCurrentShotFile        For TI = 0 To 15            If CurrentProd.CurrentRecordNum(TI) <> 0 Then ' Is this Part actually in production?                UpdateLogData.LogTime = InoTime                UpdateLogData.LogMachNum = TI                UpdateLogData.LogType = 2 ' Midnight Log Entry                UpdateLogData.LogProdFileNdx = CurrentProd.CurrentRecordNum(TI)                UpdateLogData.LogPartNum = CurrentProd.CurrentPartNum(TI)                Open Trim$(FilePath) & "Log" For Binary As #UpdateLogFile                Put #UpdateLogFile, LOF(UpdateLogFile) + 1, UpdateLogData                Close #UpdateLogFile            End If            ' Write out a mode file entry for each machine at midnight to avoid reverse searching for last mode            InoTime = DateDiff("s", InoTimeSeed, Now) ' Update InoTime to real time once per second            If InoTime < LastInoTime Then                MsgBox "Check Computer System Date/Time Setting"                InoTime = LastInoTime            Else                LastInoTime = InoTime            End If            UpdateModeFileName = "ModeFile" + Trim$(Str$(TI + 1))            'on error Resume Next            Open Trim$(FilePath) & UpdateModeFileName For Binary As #UpdateMachModeFile            If LOF(UpdateMachModeFile) + 1 > ModeNdx(TI) Then                ModeNdx(TI) = LOF(UpdateMachModeFile) + 1            Else                MsgBox "FAE: ModMid " + Str$(ModeNdx(TI)) + ":" + Str$(TI) + ":" + Str$(LOF(UpdateMachmodFile))                Exit Sub            End If            UpdateMachModeData(TI).ModeTime = InoTime            UpdateMachModeData(TI).ModeData = UpdateCurrentShot.CurrentShotMode(TI)            Put #UpdateMachModeFile, ModeNdx(TI), UpdateMachModeData(TI)            Close #UpdateMachModeFile        Next TI    End IfEnd IfOn Error GoTo 0Exit SubTimer1Trap:Close #UpdateMachModeFileClose #UpdateCurrentShotFileClose #UpdateLogFileOn Error GoTo 0If ErrorFlag = True Then    MsgBox "LoadAlarms Error"Else    Call ProcErrorEnd IfEnd SubPrivate Sub GoToDetail()If cboHost.Text = "No Host" Then    MsgBox "No Host"    Exit SubEnd IfIf ConfigData.DetailAccess <> 0 Then    frmDetail.Enabled = True    frmDetail.Show 1Else    MsgBox "Detail View Not Enabled"End IfEnd SubPrivate Sub Timer2_Timer()frmSplash.Enabled = TruefrmSplash.Show 1TempInt = TempInt + 1Timer2.Enabled = FalseEnd SubPrivate Sub txtAccepted_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtAcceptedData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtCavities_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtEfficiency_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtMachID_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtMachIDData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtMachMode_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtMachModeData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtPolyWeight_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtProductID_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtProductIDData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtProgress_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtRejected_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtRejectedData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtRequired_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd SubPrivate Sub txtRequiredData_MouseDown(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)DetailNum = Index + 1Call GoToDetailEnd Sub' Put first section at end of Main' Put second section at end of Module1' Enable by calling DemoFiller once per second in Timer on MainPrivate Sub DemoFiller()If DemoInit = False Then    'on error Resume Next    Open Trim$(FilePath) & "CurrentShot" For Binary As #QueryCurrentShotFile    Get #QueryCurrentShotFile, 1, QueryCurrentShot    Close #QueryCurrentShotFile    'on error Resume Next    Open Trim$(FilePath) & "CurrentProduction" For Binary As #CurrentProdFile    Get #CurrentProdFile, 1, CurrentProd    For DI = 0 To 15        TempInt = DateDiff("s", InoTimeSeed, Now)        TempInt = TempInt - (CurrentProd.CurrentCycle(DI) / 100) * QueryCurrentShot.CurrentShotTotal(DI)        CurrentProd.CurrentStart(DI) = TempInt    Next DI    Put #CurrentProdFile, 1, CurrentProd    Close #CurrentProdFile    For DI = 0 To 15     DemoShotPointer(DI) = 1     DemoModePointer(DI) = 1     DemoAlarmPointer(DI) = 1     DemoDataFile = "ShotFile" + Trim$(Str$(DI + 1))     DemoModeFile = "ModeFile" + Trim$(Str$(DI + 1))     DemoAlarmFile = "AlarmFile" + Trim$(Str$(DI + 1))     ''on error Resume Next     Open Trim$(FilePath) & DemoDataFile For Binary As #StartTimeFile     Get #StartTimeFile, DemoShotPointer(DI), DemoMachShotData(DI)     DemoInoTime(DI) = DemoMachShotData(DI).ShotTime     DemoShotPointer(DI) = DemoShotPointer(DI) + ShotSize     Get #StartTimeFile, DemoShotPointer(DI), DemoMachShotData(DI)     DemoNextShotTime(DI) = DemoMachShotData(DI).ShotTime     DemoShotPointer(DI) = DemoShotPointer(DI) + ShotSize     Close #StartTimeFile     Open Trim$(FilePath) & DemoModeFile For Binary As #StartTimeFile     Get #StartTimeFile, DemoModePointer(DI), DemoMachModeData(DI)     DemoModePointer(DI) = DemoModePointer(DI) + ModeSize     Close #StartTimeFile     DemoModeTime(DI) = DemoMachModeData(DI).ModeTime     Open Trim$(FilePath) & DemoAlarmFile For Binary As #StartTimeFile     Get #StartTimeFile, DemoAlarmPointer(DI), DemoMachAlarmData(DI)     DemoAlarmPointer(DI) = DemoAlarmPointer(DI) + AlarmSize     Close #StartTimeFile     DemoAlarmTime(DI) = DemoMachAlarmData(DI).AlarmTime     If DemoMachModeData(DI).ModeTime > 0 And DemoMachModeData(DI).ModeTime < DemoInoTime(DI) Then DemoInoTime(DI) = DemoMachModeData(DI).ModeTime     If DemoMachAlarmData(DI).AlarmTime > 0 And DemoMachAlarmData(DI).AlarmTime < DemoInoTime(DI) Then DemoInoTime(DI) = DemoMachAlarmData(DI).AlarmTime     'CurrentProd.CurrentStart(DI) = DemoInoTime(DI)    Next DI     'on error Resume Next    '    Open Trim$(FilePath) & "CurrentProduction" For Binary As #CurrentProdFile    '    Get #CurrentProdFile, 1, CurrentProd    '    InoTime = DateDiff("s", InoTimeSeed, Now) ' Update InoTime to real time once per second    '    For DI = 0 To 15    '        CurrentProd.CurrentStart(DI) = InoTime    '    Next DI    '    Put #CurrentProdFile, 1, CurrentProd    '    Close #CurrentProdFile    ' If CurrentProd.CurrentRequired(DI) > 0 And CurrentProd.CurrentCycle(DI) > 0 Then    '      MainElapsedTime = DemoInoTime(DI) - CurrentProd.CurrentStart(DI)    '    If MainElapsedTime > 0 Then    '        frmMain.txtEfficiency(DI).Text = Str$(Int(QueryCurrentShot.CurrentShotTotal(DI) / ((MainElapsedTime /CurrentProd.CurrentCycle(DI) / 100)) / 100)) + "%"    '        If Val(frmMain.txtEfficiency(DI).Text) > 90 Then    '            frmMain!Shape1(DI).BorderColor = 49152 ' dk green  '  '          Else  '              If Val(frmMain.txtEfficiency(DI).Text) > 70 Then  '                  frmMain!Shape1(DI).BorderColor = &HFFFF00  '              Else  '                  frmMain!Shape1(DI).BorderColor = &HFF  '              End If  '          End If   '     Else   '         frmMain.txtEfficiency(DI).Text = "0"   '         frmMain!Shape1(DI).BorderColor = &HC0C0C0   '     End If   ' Else   '     frmMain.txtEfficiency(DI).Text = "----"   '     frmMain!Shape1(DI).BorderColor = &HC0C0C0    'End If    DemoInit = TrueEnd IfFor DI = 0 To 15    DemoInoTime(DI) = DemoInoTime(DI) + 1    DemoDataFile = "ShotFile" + Trim$(Str$(DI + 1))    DemoModeFile = "ModeFile" + Trim$(Str$(DI + 1))    DemoAlarmFile = "AlarmFile" + Trim$(Str$(DI + 1))    If DemoInoTime(DI) > DemoNextShotTime(DI) Then        Open Trim$(FilePath) & DemoDataFile For Binary As #StartTimeFile        Get #StartTimeFile, DemoShotPointer(DI) + ShotSize, DemoMachShotData(DI)        DemoNextShotTime(DI) = DemoMachShotData(DI).ShotTime        DemoShotPointer(DI) = DemoShotPointer(DI) + ShotSize        Close #StartTimeFile        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot        For LoopVar = 0 To 63 ' Copy shot data into current shot           UpdateCurrentShot.CurrentShotData(DI, LoopVar) = DemoMachShotData(DI).ShotData(LoopVar)        Next LoopVar            UpdateCurrentShot.CurrentShotAccepted(DI) = UpdateCurrentShot.CurrentShotAccepted(DI) + 1            UpdateCurrentShot.CurrentShotTotal(DI) = UpdateCurrentShot.CurrentShotTotal(DI) + 1            UpdateCurrentShot.CurrentShotAlarm(DI) = 0             If UpdateCurrentShot.CurrentShotMode(DI) < 3 Then ' Unknown, Off, or Manual                 UpdateCurrentShot.CurrentShotMode(DI) = 5 ' Force mode to 'Run'             End If        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot        Close #UpdateCurrentShotFile                'If UpdateCurrentShot.CurrentShotMode(DI) < 3 Then ' Unknown, Off, or Manual                    UpdateCurrentShot.CurrentShotMode(DI) = 5 ' Force mode to 'Run'                    'UpdateMachModeData(DI).ModeTime = DemoInoTime(DI)                    'UpdateMachModeData(DI).ModeData = 5                    ' Added this code to simulate 'Run' mode in mode file itself for use in efficiency report                    'UpdateModeFileName = "ModeFile" + Trim$(Str$(I + 1))                    ''on error Resume Next                    'Open Trim$(FilePath) & UpdateModeFileName For Binary As #UpdateMachModeFile                    'ModeNdx = LOF(UpdateMachModeFile) + 1                    'Put #UpdateMachModeFile, ModeNdx, UpdateMachModeData(DI)                    'Close #UpdateMachModeFile                'End If    End If    If (DemoMachShotData(DI).ShotTime > 0) And (DemoMachShotData(DI).ShotTime < DemoInoTime(DI)) Then        DemoInoTime(DI) = DemoMachShotData(DI).ShotTime        Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot        For LoopVar = 0 To 63 ' Copy shot data into current shot           UpdateCurrentShot.CurrentShotData(I, LoopVar) = DemoMachShotData(DI).ShotData(LoopVar)        Next LoopVar           UpdateCurrentShot.CurrentShotAccepted(DI) = UpdateCurrentShot.CurrentShotAccepted(DI) + 1           UpdateCurrentShot.CurrentShotTotal(DI) = UpdateCurrentShot.CurrentShotTotal(DI) + 1           UpdateCurrentShot.CurrentShotAlarm(DI) = 0        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot        Close #UpdateCurrentShotFile    End If    'Demo Mode Update Section    If DemoInoTime(DI) > DemoModeTime(DI) Then    Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot        UpdateCurrentShot.CurrentShotMode(DI) = DemoMachModeData(DI).ModeData        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot        Close #UpdateCurrentShotFile    Open Trim$(FilePath) & DemoModeFile For Binary As #StartTimeFile        Get #StartTimeFile, DemoModePointer(DI), DemoMachModeData(DI)        DemoModePointer(DI) = DemoModePointer(DI) + ModeSize        Close #StartTimeFile        DemoModeTime(DI) = DemoMachModeData(DI).ModeTime    End If    'Demo Alarm Update Section    If DemoInoTime(DI) > DemoAlarmTime(DI) Then    Open Trim$(FilePath) & "CurrentShot" For Binary As #UpdateCurrentShotFile        Get #UpdateCurrentShotFile, 1, UpdateCurrentShot        UpdateCurrentShot.CurrentShotAlarm(DI) = DemoMachAlarmData(DI).AlarmData        Put #UpdateCurrentShotFile, 1, UpdateCurrentShot        Close #UpdateCurrentShotFile    Open Trim$(FilePath) & DemoAlarmFile For Binary As #StartTimeFile        Get #StartTimeFile, DemoAlarmPointer(DI), DemoMachAlarmData(DI)        DemoAlarmPointer(DI) = DemoAlarmPointer(DI) + AlarmSize        Close #StartTimeFile        DemoAlarmTime(DI) = DemoMachAlarmData(DI).AlarmTime    End If  Next DIEnd SubPrivate Sub LoadHostCombo()If DemoMode = True Then    Exit SubEnd IfcboHost.ClearcboHost.Text = HostSafeCall LinkHostsFor HostNdx = 0 To 4    If HostImage(HostNdx).DriveLetter <> "~" Then        cboHost.AddItem Trim$(HostImage(HostNdx).Ident)    End IfNext HostNdxEnd SubPrivate Sub CloseUpdateFiles()Close #UpdateMachShotFileClose #UpdateMachModeFileClose #UpdateMachAlarmFileClose #UpdateCurrentShotFileCommBusy = FalseEnd SubPrivate Sub BreakSync()RawSync = 0DstMacAddr = 0SrcMacAddr = 0End SubPrivate Sub RfInit()MSComm1(0).RTSEnable = Truerst = Chr(&HAA) & Chr(&H0) & Chr(&H0) & Chr(&HAA)rf = Chr(&H80) & Chr(&H0) & Chr(&H0) & Chr(&H80)MSComm1(0).Output = rstTimer3.Enabled = FalseTimer3.Enabled = TrueTimer3.Interval = 400End SubPrivate Sub Timer3_Timer()Timer3.Enabled = FalseMSComm1(0).Output = rfEnd SubPrivate Sub InitRadioComm()Call LoadMacMSComm1(0).CommPort = 1MSComm1(0).InputMode = comInputModeTextMSComm1(0).Handshaking = comRTSMSComm1(0).Settings = "57600,N,8,1"MSComm1(0).InputLen = 1MSComm1(0).PortOpen = TrueMSComm1(0).RThreshold = 1Call BreakSyncCall RfInitWatchTimer1.Enabled = FalseWatchTimer1.Enabled = TrueWatchTimer1.Interval = 60000'Debug.Print "Radio True"End SubPrivate Sub WatchTimer1_Timer()WatchTimer1.Enabled = FalseIf WatchToggle = False Then    WatchTimer1.Enabled = True    WatchTimer1.Interval = 60000    WatchToggle = True    Exit SubElse    MSComm1(0).PortOpen = False    'Debug.Print "WatchTimer1"    Call InitRadioComm    Call ResyncAll    Call BreakSync    Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFile    Print #CommLogFile, "WD1", Now, CommNum    Close #CommLogFile    frmMain.BackColor = &H80    WatchToggle = FalseEnd IfEnd SubPrivate Sub WatchTimer2_Timer()WatchTimer2.Enabled = False'Debug.Print "WatchTimer2"Call ResyncCall BreakSyncOpen Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFilePrint #CommLogFile, "WD2", Now, CommNum, Str(MsgLength), Str(StartMsgLength)Close #CommLogFileEnd SubPrivate Sub ResyncAll()For I = 0 To 15    ShotNdx(I) = 0    ModeNdx(I) = 0    AlarmNdx(I) = 0    SetupNdx(I) = 0    Sync(I) = 0    Preamble(I) = 0    DataField(I) = 0    MsgType(I) = 0    TempDataStr(I) = ""    ByteCounter(I) = 0    TimeOut(I) = 0Next IEnd SubPrivate Sub Resync()If CommNum > 15 Then    Exit SubEnd IfWatchTimer3(CommNum).Enabled = FalseSync(CommNum) = 0Preamble(CommNum) = 0MsgType(CommNum) = 0DataField(CommNum) = 0TempDataStr(CommNum) = ""ByteCounter(CommNum) = 0End SubPrivate Sub WatchTimer3_Timer(Index As Integer)'Debug.Print "WatchTimer3"WatchTimer3(Index).Enabled = FalseSync(Index) = 0Preamble(Index) = 0MsgType(Index) = 0DataField(Index) = 0TempDataStr(Index) = ""ByteCounter(Index) = 0Open Trim$(FilePath) & "CommErrorLog.TXT" For Append As #CommLogFilePrint #CommLogFile, "WD3", Now, IndexClose #CommLogFileEnd Sub