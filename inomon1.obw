; Dimension VariablesCONST CommaCode=$2cCONST ActivityTimeout=120000Type CurrentProdType; Used to represent current data as blocks in CurrentProdFile	CurrentRecordNum(17) AS LONG; Index to production record holding this production run	CurrentType(17) AS BYTE; 1=Part 2=Family	CurrentPartNum(17) AS INTEGER	CurrentPartDescription(17) AS STRING*30; Part Description	CurrentCustomer(17) AS STRING*30; Customer Code from PartProfile dropdown of Customer database	CurrentCustOrderNum(17) AS STRING*30	CurrentRunID(17) AS STRING*30; Text describing run from NewProduction screen	CurrentStart(17) AS LONG; Date/time production run started	CurrentRequired(17) AS LONG; Number of parts to be run from NewProduction screen	CurrentManualRejected(17) AS LONG; Number of parts rejected (entered on Main screen boxes)	CurrentMoldID(17) AS STRING*30; Description of mold from partConfig	CurrentMaxCavities(17) AS BYTE; Maximum cavities the mold for this part can have	CurrentCavities(17) AS BYTE; Actual Cavities selected on NewProduction.. modified on Detail screen	CurrentTolerance(17) AS INTEGER; Show mold run tolerance as Run%	CurrentCycle(17) AS LONG	CurrentWeight(17) AS LONG; Weight of each part in grams	CurrentLabor(17) AS INTEGER; Operator(s) required (integer tenths)	CurrentPrice(17) AS LONG; Price at time of run	CurrentCavityNames(17,17) AS STRING*30	CurrentCavityBlocked(17,17) AS INTEGER; (BOOLEAN)	CurrentCavityWeight(17,17) AS LONG; Weight of each part in grams	CurrentCavityLabor(17,17) AS INTEGER; Operator(s) required (integer tenths)	CurrentCavityPrice(17,17) AS LONG; Price at time of run	CurrentMaterial(17) AS STRING*30	CurrentDye(17) AS STRING*30	CurrentAdditive(17) AS STRING*30	CurrentComment(17) AS STRING*30; Comment from PartConfigEND TYPEDIM CurrentProd AS CurrentProdType; Instance of CurrentProdTypeTYPE ProductionType; Used to represent production data AS blocks in ProductionFile	ProdActive AS INTEGER; (BOOLEAN) True indicates WIP	ProdMachID AS BYTE; Numeric code for machine from MachConfig	ProdType AS BYTE; 1=Part 2=Family	ProdFirstShotNdx AS LONG; (used for Run Framing)	ProdLAStShotNdx AS LONG; LASt shot number (used for Run Framing and mold	ProdFirstModeNdx AS LONG	ProdLAStModeNdx AS LONG	ProdFirstAlarmNdx AS LONG	ProdLAStAlarmNdx AS LONG	ProdFirstSetupNdx AS LONG	ProdLAStSetupNdx AS LONG	ProdPartDescription AS STRING*30; Numeric code for part from PartConfig	ProdCustomer  AS STRING*30; Customer Code from PartProfile dropdown of Customer databASe	ProdRunID AS STRING*30; Text describing run from NewProduction screen	ProdStart AS LONG; Date/time production run started	ProdEnd AS LONG;  Date/time production run ended	ProdAccepted AS LONG; Number of good parts (shots*Cavities-ProdRejected)	ProdRejected AS LONG; Number of parts rejected (entered on Main screen boxes)	ProdMoldID AS STRING*30; Description of mold from partConfig	ProdCavities AS BYTE; Actual Cavities selected on NewProduction.. modified on Main screen	ProdTolerance AS Integer; Show mold run tolerance AS Run%	ProdCycle AS LONG	ProdWeight AS LONG; Weight of each part in grams	ProdLabor AS INTEGER; Operator(s) required (integer tenths)	ProdPrice AS LONG; Price at time of run	ProdCavityNames(16) AS STRING*30; Members active on family molds by member number	ProdCavityWeight(16) AS LONG; Weight of each part in grams	ProdCavityLabor(16) AS Integer; Operator(s) required (integer tenths)	ProdCavityPrice(16) AS LONG; Price at time of run	ProdCavityAccepted(16) AS LONG	ProdCavityRejected(16) AS LONG	ProdMaterial AS STRING*30	ProdDye AS STRING*30	ProdAdditive AS STRING*30	ProdCustOrderNum AS STRING*30	ProdComment AS STRING*30 ' Comment from PartConfigEND TYPEDIM Production AS ProductionTypeTYPE ConfigType	CompanyName AS STRING*30	ServerName AS STRING*30	Password AS STRING*30	RadioEnab AS BOOLEAN	FirstPort As BYTE	NumPorts As BYTE	MacAddress(16) AS LONGEND TYPEDIM ConfigData AS ConfigTypeTYPE CurrentShotType ; Used to represent current shot (dynamic) data	CurrentShotMode(17) AS BYTE	CurrentShotTime(17) AS LONG	CurrentShotData(65,17) AS LONG	CurrentShotTotal(17) AS LONG	CurrentShotFirstNdx(17) AS LONG	CurrentShotLastNdx(17) AS LONG	CurrentShotFirstModeNdx(17) AS LONG	CurrentShotLastModeNdx(17) AS LONG	CurrentShotFirstAlarmNdx(17) AS LONG	CurrentShotLastAlarmNdx(17) AS LONG	CurrentShotFirstSetupNdx(17) AS LONG	CurrentShotLastSetupNdx(17) AS LONG	CurrentShotAutoRejected(17) AS LONG	CurrentShotAccepted(17) AS LONG	CurrentShotCavityAccepted(17,17) AS LONG	CurrentShotCavityRejects(17,17) AS LONG	CurrentShotAlarm(17) AS INTEGEREND TYPEDIM CurrentShot As CurrentShotTypeTYPE ToyoShotData; Used to represent shot data in MachShotFile	ShotTime AS LONG; Date/time of shot	ShotMode AS BYTE; Either last mode change or reported mode per shot from new ROM set	ShotData(65) AS LONG; Machine parameters for this shotEND TYPEDIM MachShotData(16) As ToyoShotDataTYPE ToyoModeData; Used to represent mode data in MachModeFile	ModeTime AS LONG; Date/time of mode change	ModeData AS BYTE; Mode codeEND TYPEDIM MachModeData(16) As ToyoModeDataTYPE ToyoAlarmData; Used to represent alarm data in MachAlarmFile	AlarmTime AS LONG; Date/time of alarm	AlarmData AS INTEGER; Alarm codeEND TYPEDIM MachAlarmData(16) As ToyoAlarmData;Radio Comm decsDIM MacAddr(16) AS LONGDIM SrcMacAddr AS LONGDIM RadioComm AS STRINGDIM RawSync AS LONGDIM RawData AS LONGDIM LowLength AS LONGDIM HighLength As LONGDIM MsgLength AS LONGDIM StartMsgLength AS LONGDIM InitStr1(4) AS BYTEDIM InitStr2(4) AS BYTEDIM ShotNdx(16) AS LONGDIM ModeNdx(16) AS LONGDIM AlarmNdx(16) AS LONGDIM CompanyNameBox AS TEXTBOXDIM CompanyNameLabel AS STATICTEXTDIM ServerNameBox AS TEXTBOXDIM ServerNameLabel AS STATICTEXTDIM PasswordBox AS TEXTBOXDIM PasswordLabel AS STATICTEXTDIM WirelessCheckBox AS CHECKBOXDIM FirstPortCombo AS COMBOBOXDIM FirstPortLabel AS STATICTEXTDIM NumPortsCombo AS COMBOBOXDIM NumPortsLabel AS STATICTEXTDIM MacLabel AS STATICTEXTDIM MacGrid AS RAGRIDDIM SaveConfigButton AS BUTTONDIM lf As LOGFONTDIM ConfigBackground AS RECTANGLEDIM GridFont AS FONTDIM BannerFont AS FONTDIM LogGrid AS RAGRIDDIM DataGrid AS RAGRIDDIM DataGridRow AS LONGDIM DataGridCol AS LONGDIM StatsGrid AS RAGRIDDIM StatsGridRow AS LONGDIM StatsGridCol AS LONGDIM AlarmTimeBox(16) AS TEXTBOXDIM ModeTimeBox(16) AS TEXTBOXDIM ShotTimeBox(16) AS TEXTBOXDIM ModeLamp(16) AS STATICTEXTDIM ModeLabel(16) AS STATICTEXTDIM CommErrorLamp(16) AS STATICTEXTDIM CommMsgLamp(16) AS STATICTEXTDIM LockButton AS BUTTONDIM ConfigButton AS BUTTONDIM LogButton AS BUTTONDIM StatsButton AS BUTTONDIM DataButton AS BUTTONDIM ExitButton AS BUTTONDIM TempAlarm AS BYTEDIM TempMode AS BYTEDIM Mode(16) AS BYTEDIM MsgType(16) AS BYTEDIM DataField(16) AS LONGDIM TempDataStr(16) AS STRING*10DIM I AS LONGDIM J AS LONGDIM K AS LONGDIM LoopVar AS LONGDIM TempStr AS STRINGDIM TempMacAddr AS STRING*10DIM TempInt AS LONGDIM TempInt2 AS LONGDIM TempData AS STRING*10DIM TempValue AS LONGDIM Scanner AS LONGDIM DecimalPlaces AS LONGDIM DecimalFlag AS BOOLEANDIM TempChar AS STRING*1DIM Banner AS STATICTEXTDIM MsgBanner AS STATICTEXTDIM OBComm1(16) AS OBCOMMDIM CommBuf(4096) AS BYTEDIM RawCharCtr AS LONGDIM CommNum AS LONGDIM Sync(16) AS LONGDIM Preamble(16) AS LONGDIM FirstCommPort AS LONGDIM LastCommPort AS LONGDIM CommChar AS STRING*1 VECTORDIM CommByte AS BYTEDIM Wireless AS BOOLEANDIM Locked AS BOOLEANDIM PasswordWindow AS TOOLWINDOWDIM PasswordWindowConstructed AS BOOLEANDIM PasswordText AS TEXTBOXDIM PasswordButton AS BUTTONDIM MainImage AS IMAGEDIM UserBMP AS BITMAPDIM DefaultBMP AS BITMAPDIM LampIndex AS LONGDIM CommWatchTimer1 AS TIMERDIM CommWatchTimer2 AS TIMERDIM CommErrorLampTimer AS TIMERDIM CommMsgLampTimer AS TIMERDIM RFInitTimer AS TIMERDIM ActivityTimer(16) AS TIMERDIM Shots(16) AS LONGDIM Modes(16) AS LONGDIM Alarms(16) AS LONGDIM Events(16) AS LONGDIM Bytes(16) AS LONGDIM Errors(16) AS LONGDIM NeedConfig AS BOOLEANDIM ConfigFlag AS BOOLEANDIM LogFlag AS BOOLEANDIM StatsFlag AS BOOLEANDIM DataFlag AS BOOLEANDIM InoTimeSeed AS DATETIMEDIM Now AS DATETIMEDIM DateTimeTemp AS DATETIMEDIM InoTime AS LONGDIM FormattedDate AS STRING*32DIM FormattedTime AS STRING*32DIM ConfigFile AS FILEDIM CommLogFile AS FILEDIM LogFile AS FILEDIM MachAlarmFile AS FILEDIM MachModeFile AS FILEDIM MachShotFile AS FILEDIM CurrentShotFile AS FILEDIM CurrentProdFile AS FILEOBMain.CREATESETPOSITION OBMain,100,100,685,420CALL SUB ResyncAllCALL SUB BreakSyncSETVEC CommChar=ADDR(CommByte)	lf.lfHeight=-9lf.lfFaceName="Verdana"CREATE GridFont,lfInoTimeSeed.wYear=2002InoTimeSeed.wMonth=1InoTimeSeed.wDayOfWeek=0InoTimeSeed.wDay=1InoTimeSeed.wHour=0InoTimeSeed.wMinute=0InoTimeSeed.wSecond=0InoTimeSeed.wMilliseconds=0OPEN "CurrentShot" FOR UPDATE AS CurrentShotFile;;;GET CurrentShotFile,CurrentShot;;;CLOSE CurrentShotFile;;;OPEN "_InoHost" FOR INPUT AS ConfigFileGET ConfigFile,ConfigDataIF LOF(ConfigFile)=0 THEN	ConfigData.CompanyName="CompanyName"	ConfigData.ServerName="Server Name"	ConfigData.Password="Password"	ConfigData.RadioEnab=FALSE	ConfigData.FirstPort=1	ConfigData.NumPorts=1	FOR I=1 TO 16		ConfigData.MacAddress(I)=0		MacAddr(16)=0	NEXT IELSE	Wireless=ConfigData.RadioEnab	FOR I=1 TO 16		MacAddr(I)=ConfigData.MacAddress(I)	NEXT IEND IFCLOSE ConfigFileCREATE ConfigBackground,12,40,653,148ConfigBackground.VISIBLE=FALSEConfigBackground.BACKCOLOR=$800000CREATE CompanyNameBox,20,45,200,20CompanyNameBox.BACKCOLOR=$ffff80CompanyNameBox.FORECOLOR=$800000CompanyNameBox.VISIBLE=FALSECREATE CompanyNameLabel,20,67,200,20CompanyNameLabel.BACKCOLOR=$800000CompanyNameLabel.FORECOLOR=$ffff80CompanyNameLabel.TEXT="Company Name"CompanyNameLabel.VISIBLE=FALSECREATE ServerNameBox,20,95,200,20ServerNameBox.BACKCOLOR=$ffff80ServerNameBox.FORECOLOR=$800000ServerNameBox.VISIBLE=FALSECREATE ServerNameLabel,20,117,200,20ServerNameLabel.BACKCOLOR=$800000ServerNameLabel.FORECOLOR=$ffff80ServerNameLabel.TEXT="Server Name"ServerNameLabel.VISIBLE=FALSECREATE PasswordBox,20,145,200,20PasswordBox.BACKCOLOR=$ffff80PasswordBox.FORECOLOR=$800000PasswordBox.VISIBLE=FALSECREATE PasswordLabel,20,167,200,20PasswordLabel.BACKCOLOR=$800000PasswordLabel.FORECOLOR=$ffff80PasswordLabel.TEXT="Password"PasswordLabel.VISIBLE=FALSECREATE WirelessCheckBox,260,45,100,20WirelessCheckBox.BACKCOLOR=$800000WirelessCheckBox.FORECOLOR=$ffff80WirelessCheckBox.TEXT="Wireless"WirelessCheckBox.VISIBLE=FALSECREATE FirstPortCombo,260,95,100,100FirstPortCombo.BACKCOLOR=$ffff80FirstPortCombo.FORECOLOR=$800000FirstPortCombo.VISIBLE=FALSEFOR I=1 TO 16	TempStr="COM"+STR(I)	FirstPortCombo.ADDITEM TempStrNEXT ICREATE FirstPortLabel,260,117,100,20FirstPortLabel.BACKCOLOR=$800000FirstPortLabel.FORECOLOR=$ffff80FirstPortLabel.TEXT="FirstPort"FirstPortLabel.VISIBLE=FALSECREATE NumPortsCombo,260,145,100,100NumPortsCombo.BACKCOLOR=$ffff80NumPortsCombo.FORECOLOR=$800000NumPortsCombo.VISIBLE=FALSEFOR I=1 TO 16	NumPortsCombo.ADDITEM STR(I)NEXT ICREATE NumPortsLabel,260,167,100,20NumPortsLabel.BACKCOLOR=$800000NumPortsLabel.FORECOLOR=$ffff80NumPortsLabel.TEXT="# Of Ports"NumPortsLabel.VISIBLE=FALSECREATE MacLabel,395,45,261,15MacLabel.BACKCOLOR=$800000MacLabel.FORECOLOR=$ffff80MacLabel.TEXT="MAC Address"MacLabel.VISIBLE=FALSECREATE MacGrid,395,65,261,77MacGrid.VISIBLE=FALSEMacGrid.FONT=GridFontMacGrid.BACKCOLOR=$ffff80MacGrid.FORECOLOR=$800000MacGrid.HEADERHEIGHT=0MacGrid.ROWHEIGHT=18FOR I=1 TO 4	MacGrid.ADDCOL TEXT,64,"",CENTER,CENTER,31NEXT IFOR I=1 TO 4	MacGrid.ADDROWNEXT ICREATE SaveConfigButton,395,155,261,20SaveConfigButton.TEXT="Save Configuration"SaveConfigButton.VISIBLE=FALSECREATE LogGrid,4,58,669,130LogGrid.VISIBLE=FALSELogGrid.FONT=GridFontLogGrid.BACKCOLOR=$800000LogGrid.FORECOLOR=$ffffffLogGrid.HEADERHEIGHT=18LogGrid.ROWHEIGHT=18LogGrid.ADDCOL TEXT,204,"Log Item",CENTER,LEFT,31LogGrid.ADDCOL TEXT,60,"Mach #",CENTER,LEFT,31LogGrid.ADDCOL TEXT,200,"Date/Time",CENTER,LEFT,31LogGrid.ADDCOL TEXT,100,"Opt 1",CENTER,LEFT,31LogGrid.ADDCOL TEXT,100,"Opt 2",CENTER,LEFT,31CREATE DataGrid,12,50,653,148DataGrid.VISIBLE=FALSEDataGrid.FONT=GridFontDataGrid.BACKCOLOR=$800000DataGrid.FORECOLOR=$ffffffDataGrid.HEADERHEIGHT=0DataGrid.ROWHEIGHT=18FOR I=1 TO 8	DataGrid.ADDCOL TEXT,81,"",CENTER,CENTER,31NEXT IFOR I=1 TO 8	DataGrid.ADDROWNEXT ICREATE StatsGrid,4,58,669,130StatsGrid.VISIBLE=FALSEStatsGrid.FONT=GridFontStatsGrid.BACKCOLOR=$800000StatsGrid.FORECOLOR=$ffffffStatsGrid.HEADERHEIGHT=18StatsGrid.ROWHEIGHT=18StatsGrid.ADDCOL TEXT,40,"Stat",CENTER,CENTER,31FOR I=1 TO 16	TempStr="M"+STR(I)	StatsGrid.ADDCOL LONG,39,TempStr,CENTER,CENTER,31NEXT IFOR I=1 TO 6	StatsGrid.ADDROWNEXT IStatsGrid.TEXT(1,1)="Shot"StatsGrid.TEXT(2,1)="Mode"StatsGrid.TEXT(3,1)="Alarm"StatsGrid.TEXT(4,1)="Event"StatsGrid.TEXT(5,1)="Bytes"StatsGrid.TEXT(6,1)="Comm"CALL SUB ClearStatsGridFOR I=1 TO 16	CREATE AlarmTimeBox(I),(I-1)*41+10,255,40,15	AlarmTimeBox(I).FONT=GridFont	AlarmTimeBox(I).TEXT="00.00"	TempStr="Machine "+STR(I)+" Last Alarm Time"	AlarmTimeBox(I).TOOLTIP=TempStr		CREATE ModeTimeBox(I),(I-1)*41+10,270,40,15	ModeTimeBox(I).FONT=GridFont	ModeTimeBox(I).TEXT="00.00"	TempStr="Machine "+STR(I)+" Last Mode Time"	ModeTimeBox(I).TOOLTIP=TempStr		CREATE ShotTimeBox(I),(I-1)*41+10,285,40,15	ShotTimeBox(I).FONT=GridFont	ShotTimeBox(I).TEXT="00.00"	TempStr="Machine "+STR(I)+" Last Shot Time"	ShotTimeBox(I).TOOLTIP=TempStr		CREATE ModeLamp(I),(I-1)*41+10,300,40,15	Mode(I)=0	ModeLamp(I).FONT=GridFont	ModeLamp(I).BACKCOLOR=$b0a080	ModeLamp(I).TEXT="IDLE"	TempStr="Machine "+STR(I)+" Mode"	ModeLamp(I).TOOLTIP=TempStr		CREATE ModeLabel(I),(I-1)*41+10,315,40,15	ModeLabel(I).TEXT=STR(I)	ModeLabel(I).BACKCOLOR=$b0a080	TempStr="Machine "+STR(I)+" Mode"	ModeLabel(I).TOOLTIP=TempStr	Mode(I)=0		CREATE CommErrorLamp(I),(I-1)*41+10,330,40,10	CommErrorLamp(I).BACKCOLOR=$60	TempStr="Machine "+STR(I)+" Comm Error"	CommErrorLamp(I).TOOLTIP=TempStr		CREATE CommMsgLamp(I),(I-1)*41+10,340,40,10	CommMsgLamp(I).BACKCOLOR=$6000	TempStr="Machine "+STR(I)+" Comm Msg"	CommMsgLamp(I).TOOLTIP=TempStr	NEXT ICREATE LockButton,11,360,100,25LockButton.TEXT="Lock";"Unlock"LockButton.TOOLTIP="Lock System"CREATE ConfigButton,122,360,100,25ConfigButton.TEXT="Configuration"ConfigButton.TOOLTIP="Configure System"ConfigButton.ENABLED=true;FALSECREATE LogButton,233,360,100,25LogButton.TEXT="View Log"LogButton.TOOLTIP="View System Log"LogButton.ENABLED=true;FALSECREATE StatsButton,344,360,100,25StatsButton.TEXT="View Stats"StatsButton.TOOLTIP="View System Stats"StatsButton.ENABLED=true;FALSECREATE DataButton,455,360,100,25DataButton.TEXT="View Data"DataButton.TOOLTIP="View Last Data"DataButton.ENABLED=true;FALSECREATE ExitButton,566,360,100,25ExitButton.TEXT="Exit"ExitButton.TOOLTIP="Exit System"ExitButton.ENABLED=true;FALSEOBMain.BACKCOLOR=$80;$8000Locked=false;TRUECREATE MsgBanner,0,210,685,30MsgBanner.BACKCOLOR=$80;$8000MsgBanner.FORECOLOR=$c0d0MsgBanner.TEXT="No Message"MsgBanner.VISIBLE=FALSECREATE MainImage,10,40,655,200CREATE DefaultBMP,InnoLogo.jpgLOADIMAGE UserBMP,"c:\nb\TM-300H.JPG"IF STATUS<>0 THEN		MainImage.BITMAP=UserBMPELSE	MainImage.BITMAP=DefaultBMPEND IFlf.lfHeight=-25lf.lfFaceName="Verdana"CREATE BannerFont,lfMsgBanner.FONT=BannerFontCREATE Banner,0,0,685,30Banner.FONT=BannerFontBanner.BACKCOLOR=$80;$8000Banner.FORECOLOR=$c0d0Banner.TEXT=ConfigData.CompanyNameTempStr="Ino-Toyo Server        <"+ConfigData.ServerName+">"OBMain.TEXT=TempStrCALL SUB ResyncIF Wireless=FALSE THEN	CALL InitWiredELSE	CALL InitWirelessEND IFIF NeedConfig=TRUE THEN	WARNINGBOX "Server Config","Program Must Be Restarted",MB_OKEND IF	FOR I=1 TO 16	ActivityTimer(I).TIME=ActivityTimeoutNEXT ICREATETASK CommTaskSETTASKPRIORITY CommTask,0END EVENTBEGIN TASK CommTaskBEGIN LOOPIF Wireless=False THEN	BEGIN LOOP		FOR CommNum=FirstCommPort TO LastCommPort			TempInt=OBComm1(CommNum).STATUS			IF CommError<>0 THEN				CALL SUB ProcessError			END IF			STATUS=OBComm1(CommNum).BINARYINPUT CommBuf,TempInt			Bytes(CommNum)=Bytes(CommNum)+XferCount			IF XferCount>0 THEN				FOR RawCharCtr=1 TO XferCount					CommByte=CommBuf(RawCharCtr)					CALL SUB ProcessData				NEXT RawCharCtr			END IF		NEXT CommNum		SLEEP 1	END LOOPELSE	BEGIN LOOP		TempInt=OBComm1(FirstCommPort).STATUS		IF CommError<>0 THEN			CALL SUB ProcessError			Call SUB BreakSync			XferCount=0		END IF		STATUS=OBComm1(FirstCommPort).BINARYINPUT CommBuf,TempInt		IF XferCount>0 THEN			FOR RawCharCtr=1 TO XferCount				CommByte=CommBuf(RawCharCtr)								CommWatchTimer1.STOP				CommWatchTimer1.TIME=60000				SELECT CASE RawSync					CASE 0						IF CommByte=131 THEN							RawSync = 1						END IF					CASE 1						LowLength=CommByte						RawSync=2					CASE 2						HighLength=CommByte						RawSync=3 						StartMsgLength=SHL(HighLength,8)+LowLength-12; Actual data bytes						MsgLength=StartMsgLength					CASE 3 To 8						INCR RawSync					CASE 9 To 10						INCR RawSync					CASE 11 To 14						SrcMacAddr=SHL(SrcMacAddr,8)						SrcMacAddr=SrcMacAddr+CommByte										INCR RawSync						IF RawSync=15 THEN							FOR CommNum=1 TO 16								EXIT IF MacAddr(CommNum)=SrcMacAddr							NEXT CommNum							Bytes(CommNum)=Bytes(CommNum)+MsgLength						END IF					CASE 15						DECR MsgLength						CommWatchTimer2.STOP						IF MsgLength=0 THEN							RawSync=9999						ELSE							CALL SUB ProcessData						END IF						CommWatchTimer2.TIME=2000					CASE 9999						CALL SUB BreakSync				END SELECT			NEXT RawCharCtr		END IF	END LOOPEND IFEND LOOPEND TASKOBMain.SYSTEMIF STATUS=$f020 THEN	PASSEVENTELSE	IF STATUS<>$f060 AND OBMain.MINIMIZED=TRUE THEN		PASSEVENT	END IFEND IFEND EVENTCommErrorLamp.COMMANDLampIndex=ArrayIndexCALL SUB CommErrorBlinkEND EVENTBEGIN SUB CommErrorBlinkCommErrorLamp(LampIndex).BACKCOLOR=$ffCommErrorLampTimer.TIME=300END SUBCommErrorLampTimer.TIMEOUTCommErrorLampTimer.STOPCommErrorLamp(LampIndex).BACKCOLOR=$60END EVENTCommMsgLamp.COMMANDLampIndex=ArrayIndexCALL SUB CommMsgBlinkEND EVENTBEGIN SUB CommMsgBlinkCommMsgLamp(LampIndex).BACKCOLOR=$ff00CommMsgLampTimer.TIME=300END SUBCommMsgLampTimer.TIMEOUTCommMsgLampTimer.STOPCommMsgLamp(LampIndex).BACKCOLOR=$6000END EVENTPasswordButton.COMMANDIF PasswordText.TEXT="vb" THEN	IF Locked=TRUE THEN		LockButton.TEXT="Lock"		LockButton.TOOLTIP="Lock System"		OBMain.BACKCOLOR=$80		Banner.BACKCOLOR=$80		MsgBanner.BACKCOLOR=$80		ConfigButton.ENABLED=TRUE		LogButton.ENABLED=TRUE		StatsButton.ENABLED=TRUE		DataButton.ENABLED=TRUE		ExitButton.ENABLED=TRUE	ELSE		LockButton.TEXT="Unlock"		LockButton.TOOLTIP="Unlock System"		OBMain.BACKCOLOR=$8000		Banner.BACKCOLOR=$8000		MsgBanner.BACKCOLOR=$8000		ConfigButton.ENABLED=FALSE		LogButton.ENABLED=FALSE		StatsButton.ENABLED=FALSE		DataButton.ENABLED=FALSE		ExitButton.ENABLED=FALSE	END IF	Locked=NOT(Locked)END IFPasswordText.TEXT=""PasswordWindow.VISIBLE=FALSEEND EVENTLockButton.COMMANDIF PasswordWindowConstructed=FALSE THEN	CREATE PasswordWindow,200,300,110,90 APPWINDOW CHILD	PasswordWindow.TEXT="Password"	PasswordWindowConstructed=TRUE	CREATE PasswordText,10,10,80,20 IN PasswordWindow	CREATE PasswordButton,10,40,80,20 IN PasswordWindow	PasswordButton.TEXT="Submit"ELSE	PasswordWindow.VISIBLE=TRUEEND IFPasswordText.SETFOCUSEND EVENTConfigButton.COMMANDIF ConfigFlag=FALSE THEN	DataFlag=FALSE	StatsFlag=FALSE	LogFlag=FALSE	LockButton.ENABLED=FALSE	LogButton.ENABLED=FALSE	StatsButton.ENABLED=FALSE	ExitButton.ENABLED=FALSE	DataButton.ENABLED=FALSE	MainImage.VISIBLE=FALSE	StatsGrid.VISIBLE=FALSE	DataGrid.VISIBLE=FALSE	LogGrid.VISIBLE=FALSE	ConfigBackground.VISIBLE=TRUE	MsgBanner.VISIBLE=TRUE	MsgBanner.TEXT="Configure System"	CompanyNameBox.VISIBLE=TRUE	CompanyNameLabel.VISIBLE=TRUE	ServerNameBox.VISIBLE=TRUE	ServerNameLabel.VISIBLE=TRUE	PasswordBox.VISIBLE=TRUE	PasswordLabel.VISIBLE=TRUE	WirelessCheckBox.VISIBLE=TRUE	FirstPortCombo.VISIBLE=TRUE	FirstPortLabel.VISIBLE=TRUE	NumPortsCombo.VISIBLE=TRUE	NumPortsLabel.VISIBLE=TRUE	MacLabel.VISIBLE=TRUE	MacGrid.VISIBLE=TRUE	SaveConfigButton.VISIBLE=TRUE	CompanyNameBox.TEXT=ConfigData.CompanyName	ServerNameBox.TEXT=ConfigData.ServerName	PasswordBox.TEXT=ConfigData.Password	IF ConfigData.RadioEnab=FALSE THEN		WirelessCheckBox.CHECKED=FALSE	ELSE		WirelessCheckBox.CHECKED=TRUE	END IF	TempStr="COM"+STR(ConfigData.FirstPort)	FirstPortCombo.TEXT=TempStr	Wireless=ConfigData.RadioEnab	NumPortsCombo.TEXT=STR(ConfigData.NumPorts)	J=1	K=1	For I=1 TO 16		TempMacAddr=HEX(ConfigData.MacAddress(I))		CALL SUB PadMacAddress		TempStr=TempStr+TempMacAddr		MacGrid.TEXT(J,K)=TempStr		INCR J		IF J>4 THEN			J=1			INCR K		END IF	NEXT I		IF WirelessCheckBox.CHECKED=FALSE THEN		NumPortsCombo.VISIBLE=TRUE		NumPortsLabel.VISIBLE=TRUE		MacGrid.VISIBLE=FALSE		MacLabel.VISIBLE=FALSE	ELSE		NumPortsCombo.VISIBLE=FALSE		NumPortsLabel.VISIBLE=FALSE		MacGrid.VISIBLE=TRUE		MacLabel.VISIBLE=TRUE	END IF	ELSE	LockButton.ENABLED=TRUE	LogButton.ENABLED=TRUE	StatsButton.ENABLED=TRUE	ExitButton.ENABLED=TRUE	DataButton.ENABLED=TRUE	ConfigBackground.VISIBLE=FALSE	MsgBanner.VISIBLE=FALSE	MainImage.VISIBLE=TRUE	CompanyNameBox.VISIBLE=FALSE	CompanyNameLabel.VISIBLE=FALSE	ServerNameBox.VISIBLE=FALSE	ServerNameLabel.VISIBLE=FALSE	PasswordBox.VISIBLE=FALSE	PasswordLabel.VISIBLE=FALSE	WirelessCheckBox.VISIBLE=FALSE	FirstPortCombo.VISIBLE=FALSE	FirstPortLabel.VISIBLE=FALSE	NumPortsCombo.VISIBLE=FALSE	NumPortsLabel.VISIBLE=FALSE	MacLabel.VISIBLE=FALSE	MacGrid.VISIBLE=FALSE	SaveConfigButton.VISIBLE=FALSEEND IFConfigFlag=NOT(ConfigFlag)END EVENTSaveConfigButton.COMMANDConfigData.CompanyName=CompanyNameBox.TEXTConfigData.ServerName=ServerNameBox.TEXTConfigData.Password=PasswordBox.TEXTIF WirelessCheckBox.CHECKED=FALSE THEN	ConfigData.RadioEnab=FALSEELSE	ConfigData.RadioEnab=TRUEEND IFTempStr=FirstPortCombo.TEXTTempStr=RIGHT(TempStr,LEN(TempStr)-3)ConfigData.FirstPort=VAL(TempStr)TempStr=NumPortsCombo.TEXTConfigData.NumPorts=VAL(TempStr)J=1K=1For I=1 TO 16	TempMacAddr=MacGrid.TEXT(J,K)	TempStr="$"+TempMacAddr	TempInt=VAL(TempStr)	ConfigData.MacAddress(I)=TempInt	MacAddr(I)=TempInt	INCR J	IF J>4 THEN		J=1		INCR K	END IFNEXT IOPEN "_InoHost" FOR UPDATE AS ConfigFilePUT ConfigFile,ConfigDataCLOSE ConfigFileEND EVENTWirelessCheckBox.COMMANDIF WirelessCheckBox.CHECKED=FALSE THEN	NumPortsCombo.VISIBLE=TRUE	NumPortsLabel.VISIBLE=TRUE	MacGrid.VISIBLE=FALSE	MacLabel.VISIBLE=FALSEELSE	NumPortsCombo.VISIBLE=FALSE	NumPortsLabel.VISIBLE=FALSE	MacGrid.VISIBLE=TRUE	MacLabel.VISIBLE=TRUEEND IFEND EVENTLogButton.COMMANDIF LogFlag=FALSE THEN	DataFlag=FALSE	StatsFlag=FALSE	MainImage.VISIBLE=FALSE	StatsGrid.VISIBLE=FALSE	DataGrid.VISIBLE=FALSE	LogGrid.VISIBLE=TRUE	MsgBanner.VISIBLE=TRUE	MsgBanner.TEXT="View Log"ELSE	MainImage.VISIBLE=TRUE	LogGrid.VISIBLE=FALSE	MsgBanner.VISIBLE=FALSEEND IFLogFlag=NOT(LogFlag)END EVENTStatsButton.COMMANDIF StatsFlag=FALSE THEN	DataFlag=FALSE	LogFlag=FALSE	MainImage.VISIBLE=FALSE	DataGrid.VISIBLE=FALSE	LogGrid.VISIBLE=FALSE	StatsGrid.VISIBLE=TRUE	MsgBanner.VISIBLE=TRUE	MsgBanner.TEXT="View Stats"	CALL SUB SetStatsGridELSE	MainImage.VISIBLE=TRUE	StatsGrid.VISIBLE=FALSE	MsgBanner.VISIBLE=FALSEEND IFStatsFlag=NOT(StatsFlag)END EVENTDataButton.COMMANDIF DataFlag=FALSE THEN	StatsFlag=FALSE	LogFlag=FALSE	MainImage.VISIBLE=FALSE	StatsGrid.VISIBLE=FALSE	LogGrid.VISIBLE=FALSE	DataGrid.VISIBLE=TRUE	MsgBanner.VISIBLE=TRUE	MsgBanner.TEXT="View Data"	CALL SUB ClearDataGridELSE	MainImage.VISIBLE=TRUE	DataGrid.VISIBLE=FALSE	MsgBanner.VISIBLE=FALSEEND IFDataFlag=NOT(DataFlag)END EVENTExitButton.COMMANDENDEND EVENTPasswordWindow.SYSTEMPasswordWindow.VISIBLE=FALSEEND EVENTModeLamp.COMMANDCALL SUB ChangeModeEND EVENTModeLabel.COMMANDCALL SUB ChangeModeEND EVENTBEGIN SUB ChangeModeIF Locked=TRUE THEN	EXIT SUBEND IFLampIndex=ArrayIndexINCR Mode(LampIndex)TempMode=Mode(LampIndex)IF TempMode>5 THEN	TempMode=0	Mode(LampIndex)=0END IFCALL SUB SetModeLampActivityTimer(LampIndex).STOPActivityTimer(LampIndex).TIME=ActivityTimeoutEND SUBBEGIN SUB SetModeLampMode(LampIndex)=TempModeSELECT CASE TempMode	CASE 0		ModeLamp(LampIndex).BACKCOLOR=$b0a080		ModeLamp(LampIndex).FORECOLOR=$0		ModeLabel(LampIndex).BACKCOLOR=$b0a080		ModeLabel(LampIndex).FORECOLOR=$0		ModeLamp(LampIndex).TEXT="IDLE"	CASE 1		ModeLamp(LampIndex).BACKCOLOR=$ffffff		ModeLamp(LampIndex).FORECOLOR=$0		ModeLabel(LampIndex).BACKCOLOR=$ffffff		ModeLabel(LampIndex).FORECOLOR=$0		ModeLamp(LampIndex).TEXT="OFF"	CASE 2		ModeLamp(LampIndex).BACKCOLOR=$ff		ModeLamp(LampIndex).FORECOLOR=$ffff		ModeLabel(LampIndex).BACKCOLOR=$ff		ModeLabel(LampIndex).FORECOLOR=$ffff		ModeLamp(LampIndex).TEXT="MAN"	CASE 3		ModeLamp(LampIndex).BACKCOLOR=$ffff		ModeLamp(LampIndex).FORECOLOR=$0		ModeLabel(LampIndex).BACKCOLOR=$ffff		ModeLabel(LampIndex).FORECOLOR=$0		ModeLamp(LampIndex).TEXT="SEMI"	CASE 4		ModeLamp(LampIndex).BACKCOLOR=$ff00		ModeLamp(LampIndex).FORECOLOR=$0		ModeLabel(LampIndex).BACKCOLOR=$ff00		ModeLabel(LampIndex).FORECOLOR=$0		ModeLamp(LampIndex).TEXT="AUTO"	CASE 5		ModeLamp(LampIndex).BACKCOLOR=$8000		ModeLamp(LampIndex).FORECOLOR=$ffff		ModeLabel(LampIndex).BACKCOLOR=$8000		ModeLabel(LampIndex).FORECOLOR=$ffff		ModeLamp(LampIndex).TEXT="RUN"END SELECTEND SUBBEGIN SUB ProcessErrorIF CommNum<1 OR CommNum>16 THEN	MSGBOX "Error","No Communication",MB_OK	ENDEND IFActivityTimer(CommNum).STOPActivityTimer(CommNum).TIME=ActivityTimeoutLampIndex=CommNumCALL SUB CommErrorBlinkINCR Errors(CommNum)IF DataFlag=TRUE THEN	CALL SUB ClearDataGridEND IFIF StatsFlag=TRUE THEN	CALL SUB SetStatsGridEND IFCALL SUB ResyncEND SUBBEGIN SUB ProcessDataIf CommNum>16 Then    Exit SubEnd IfActivityTimer(CommNum).STOPActivityTimer(CommNum).TIME=ActivityTimeoutIF Sync(CommNum)<3 THEN; Not already in sync	IF Sync(CommNum)=0 THEN; Waiting for first '"'		IF CommByte=$22 THEN; Is it a '"'?			Sync(CommNum)=1; Yes, 1/3rd of sync accomplished		ELSE			CALL SUB Resync		END IF		EXIT SUB	END IF 	IF Sync(CommNum)=1 THEN; Waiting for ':'		IF CommByte=$3a THEN; Is it a ':'?			Sync(CommNum)=2; Yes, 2/3rd of sync accomplished		ELSE			CALL SUB Resync			INCR Events(CommNum)			IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF		END IF		EXIT SUB	END IF	IF Sync(CommNum)=2 THEN; Waiting for last '"'		IF CommByte=$22 THEN; Is it a '"'?			Sync(CommNum)=3; Yes, sync accomplished		ELSE			CALL SUB Resync			INCR Events(CommNum)			IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF		END IF		EXIT SUB	END IFELSE; Get here if in Sync	IF CommByte=$22 THEN; Got sync start when already in sync (error)		CALL SUB Resync		EXIT SUB	END IF	IF Preamble(CommNum)=0 THEN; Get first comma		IF CommByte=CommaCode THEN			Preamble(CommNum)=1		ELSE; Something is wrong... abort sync			CALL SUB Resync			INCR Events(CommNum)			IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF		END IF		EXIT SUB	END IF	IF Preamble(CommNum)=1 THEN; This must be the msgtype code		IF CommByte=CommaCode THEN			IF MsgType(CommNum)<1 OR MsgType(CommNum)>3 THEN				CALL SUB Resync; Invalid Msg				EXIT SUB			END IF			INCR Preamble(CommNum)			EXIT SUB             		END IF		MsgType(CommNum)=VAL(CommChar)		IF MsgType(CommNum)<1 OR MsgType(CommNum)>3 THEN			CALL SUB Resync; Invalid Msg		END IF		EXIT SUB	END IF	END IFIF MsgType(CommNum)=1 THEN; Alarm Data	IF Preamble(CommNum)>1 THEN; Must be in data section		IF CommByte=CommaCode THEN			LampIndex=CommNum			CALL SUB CommMsgBlink			TempAlarm=Val(TempDataStr(CommNum))			MachAlarmData(CommNum).AlarmData=TempAlarm			IF DataFlag=TRUE THEN				CALL SUB ClearDataGrid				DataGrid.TEXT(1,1)=STR(TempAlarm)				TempStr="Machine "+STR(CommNum)+" Alarm"				MsgBanner.TEXT=TempStr			END IF			AlarmTimeBox(CommNum).BACKCOLOR=$ff			INCR Alarms(CommNum)			CALL SUB WriteAlarm			IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF			OPEN "CurrentShot" FOR UPDATE AS CurrentShotFile			GET CurrentShotFile,CurrentShot			CurrentShot.CurrentShotAlarm(CommNum)=TempAlarm			IF CurrentShot.CurrentShotFirstAlarmNdx(CommNum)=0 Then				CurrentShot.CurrentShotFirstAlarmNdx(CommNum)=AlarmNdx(CommNum)			END IF			CurrentShot.CurrentShotLastAlarmNdx(CommNum)=AlarmNdx(CommNum)			PUT CurrentShotFile,CurrentShot			CLOSE CurrentShotFile			CALL SUB Resync			EXIT SUB		ELSE			TempDataStr(CommNum)=TempDataStr(CommNum)+CommChar		END IF	ELSE		IF CommByte=CommaCode THEN			INCR Preamble(CommNum)		END IF	END IF	EXIT SUBEND IFIF MsgType(CommNum)=2 THEN; Mode data	IF CommByte=CommaCode THEN; End of field processing		;IF IsNumeric(TempDataStr(CommNum))=False THEN; Trap for invalid data		;	TempDataStr(CommNum)="253"		;END IF		AlarmTimeBox(CommNum).BACKCOLOR=$ffffff		TempMode=Val(TempDataStr(CommNum))		IF TempMode>40 THEN			CALL SUB Resync			INCR Events(CommNum)			IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF			EXIT SUB		END IF		SELECT CASE TempMode			CASE 0				TempMode=1			CASE 1				TempMode=1			CASE 9				TempMode=3			CASE 11				TempMode=4			CASE ELSE				TempMode=2		END SELECT		LampIndex=CommNum		CALL SUB SetModeLamp		LampIndex=CommNum		CALL SUB CommMsgBlink		INCR Modes(CommNum)		IF StatsFlag=TRUE THEN			CALL SUB SetStatsGrid		END IF		IF DataFlag=TRUE THEN			CALL SUB ClearDataGrid			DataGrid.TEXT(1,1)=STR(TempMode)			TempStr="Machine "+STR(CommNum)+" Mode"			MsgBanner.TEXT=TempStr		END IF		CALL SUB WriteMode		;Write out the mode to the Nth mode file		;InoTime=DateDIFf("s", InoTimeSeed, Now)		;IF InoTime<LastInoTime THEN		;	MsgBox "Check Computer System Date/Time Setting"		;	InoTime=LastInoTime		;ELSE		;	LastInoTime=InoTime		;END IF		;TimeOut(CommNum)=0		;LastRecord(CommNum).LastModeTimeBox=InoTime		;UpdateMachModeData(CommNum).ModeTime=InoTime		;UpdateMachModeData(CommNum).ModeData=ShotMode		;UpdateModeFileName="ModeFile"+TRIM$(Str$(CommNum+1))		;on error Resume Next		;OPEN TRIM$(FilePath) & UpdateModeFileName For Binary As UpdateMachModeFile		;IF LOF(UpdateMachModeFile)+1>ModeNdx(CommNum) THEN		;		ModeNdx(CommNum)=LOF(UpdateMachModeFile)+1		;ELSE		;	CLOSE UpdateMachModeFile		;	EXIT SUB		;END IF		;PUT UpdateMachModeFile, ModeNdx(CommNum), UpdateMachModeData(CommNum)		;CLOSE UpdateMachModeFile		; Write to the current shot file		;on error Resume Next		;OPEN TRIM$(FilePath) & "CurrentShot" For Binary As UpdateCurrentShotFile		;Get UpdateCurrentShotFile, 1, UpdateCurrentShot		;IF UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum)=0 THEN		;	UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum)=ModeNdx(CommNum)		;END IF		;UpdateCurrentShot.CurrentShotLastModeNdx(CommNum)=ModeNdx(CommNum)		;UpdateCurrentShot.CurrentShotMode(CommNum)=ShotMode		;PUT UpdateCurrentShotFile, 1, UpdateCurrentShot		;CLOSE UpdateCurrentShotFile		CALL SUB Resync		EXIT SUB	ELSE		TempDataStr(CommNum)=TempDataStr(CommNum)+CommChar	END IFEND IF	IF MsgType(CommNum)=3 THEN; Shot Data	IF Preamble(CommNum)<9 THEN; Throw away commas and Preamble(commnum)data		IF Preamble(CommNum)=2 THEN			AlarmTimeBox(CommNum).BACKCOLOR=$ffffff			IF DataFlag=TRUE THEN				CALL SUB ClearDataGrid			END IF		END IF		IF CommByte=CommaCode THEN			INCR Preamble(CommNum)		END IF		EXIT SUB	ELSE; Receive data		IF CommByte=CommaCode THEN; End of field processing			IF DataField(CommNum)<64 THEN				DecimalPlaces=0				DecimalFlag=FALSE				TempData=""				TempStr=(TempDataStr(CommNum))				For Scanner=1 TO LEN(TempStr)					TempChar=MID(TempStr,Scanner,1)					IF TempChar="." THEN						DecimalFlag=TRUE					ELSE						TempData=TempData+TempChar						IF DecimalFlag=TRUE THEN							INCR DecimalPlaces						END IF					END IF				NEXT Scanner				TempValue=VAL(TempData)				FOR Scanner=1 TO 3-DecimalPlaces					TempValue=TempValue*10				NEXT Scanner				IF DataFlag=TRUE THEN					TempStr="Machine "+STR(CommNum)+" Shot"					MsgBanner.TEXT=TempStr					DataGridRow=DataField(CommNum)/8+1					DataGridCol=MOD(DataField(CommNum),8)+1					IF DataGridCol=0 THEN						DataGridCol=8					END IF					;;;TempDataStr(CommNum)=STR(TempValue);;;					DataGrid.TEXT(DataGridRow,DataGridCol)=(TempDataStr(CommNum))				END IF				;IF IsNumeric(TempDataStr(CommNum))=False THEN; Trap for invalid data				;	OPEN TRIM$(FilePath) & "CommErrorLog.TXT" For Append As CommLogFile				;	Print CommLogFile, "Data", Now, CommNum, TempDataStr(CommNum)				;	CLOSE CommLogFile				;	CALL SUB Resync				;	EXIT SUB				;END IF				;IF DataField(CommNum)=48 And Val(TempDataStr(CommNum))<5 THEN; Trap for Short Cycle				;	OPEN TRIM$(FilePath) & "CommErrorLog.TXT" For Append As CommLogFile				;	Print CommLogFile, "Short Cycle", Now, CommNum, TempDataStr(CommNum)				;	CLOSE CommLogFile				;	CALL SUB Resync				;	EXIT SUB				;END IF				MachShotData(CommNum).ShotData(DataField(CommNum)+1)=TempValue				TempDataStr(CommNum)=""				INCR DataField(CommNum); Deliberate post-increment			END IF		ELSE; Accumulate data			IF CommByte=$0d THEN; Should never get here				CALL SUB Resync				INCR Events(CommNum)				IF StatsFlag=TRUE THEN					CALL SUB SetStatsGrid				END IF				EXIT SUB			ELSE				TempDataStr(CommNum)=TempDataStr(CommNum)+CommChar			END IF		END IF		IF DataField(CommNum)=64 THEN			LampIndex=CommNum						IF Mode(CommNum)<>3 AND Mode(CommNum)<>4 THEN				Mode(CommNum)=5				TempMode=5				CALL SUB WriteMode				CALL SUB SetModeLamp			END IF						CALL SUB CommMsgBlink			INCR Shots(CommNum)						IF StatsFlag=TRUE THEN				CALL SUB SetStatsGrid			END IF						CALL SUB WriteShot						OPEN "CurrentShot" FOR UPDATE AS CurrentShotFile			GET CurrentShotFile,CurrentShot			CurrentShot.CurrentShotMode(CommNum)=MachShotData(CommNum).ShotMode			CurrentShot.CurrentShotTime(CommNum)=MachShotData(CommNum).ShotTime			FOR LoopVar=1 TO 64				CurrentShot.CurrentShotData(LoopVar,CommNum)=MachShotData(CommNum).ShotData(LoopVar)			NEXT LoopVar						INCR CurrentShot.CurrentShotTotal(CommNum)			IF CurrentShot.CurrentShotFirstNdx(CommNum)=0 THEN				CurrentShot.CurrentShotFirstNdx(CommNum)=ShotNdx(CommNum)			END IF			CurrentShot.CurrentShotLastNdx(CommNum)=ModeNdx(CommNum)			IF CurrentShot.CurrentShotFirstModeNdx(CommNum)=0 THEN				CurrentShot.CurrentShotFirstModeNdx(CommNum)=ModeNdx(CommNum)			END IF			CurrentShot.CurrentShotLastModeNdx(CommNum)=ModeNdx(CommNum)			CurrentShot.CurrentShotFirstSetupNdx(CommNum)=0			CurrentShot.CurrentShotLastSetupNdx(CommNum)=0						IF CurrentProd.CurrentCavities(CommNum)>0 THEN				CurrentShot.CurrentShotAccepted(CommNum)=CurrentShot.CurrentShotAccepted(CommNum)+CurrentProd.CurrentCavities(CommNum)			ELSE				INCR CurrentShot.CurrentShotAccepted(CommNum)			END IF						''''			PUT CurrentShotFile,CurrentShot			CLOSE CurrentShotFile						CALL SUB CurrentToProduction; Updates production record with static and dynamic data			;Write out the shot to the Nth shot file			;InoTime=DateDiff("s", InoTimeSeed, Now)			;TimeOut(CommNum)=0			;LastRecord(CommNum).LastShotTime=InoTime			;UpdateMachShotData(CommNum).ShotTime=InoTime			;UpdateMachShotData(CommNum).ShotMode=QueryCurrentShot.CurrentShotMode(CommNum)			;MsgBox UpdateMachShotData(CommNum).ShotTime			;UpdateShotFileName="ShotFile"+TRIM$(Str$(CommNum+1))			;OPEN TRIM$(FilePath) & UpdateShotFileName For Binary As UpdateMachShotFile			;IF LOF(UpdateMachShotFile)+1>ShotNdx(CommNum) THEN			;	ShotNdx(CommNum)=LOF(UpdateMachShotFile)+1			;ELSE			;	CLOSE UpdateMachShotFile			;	EXIT SUB			;END IF			;PUT UpdateMachShotFile, ShotNdx(CommNum), MachShotData(CommNum)			;CLOSE UpdateMachShotFile			; Write to the current shot file			;on error Resume Next			;OPEN TRIM$(FilePath) & "CurrentShot" For Binary As UpdateCurrentShotFile			;Get UpdateCurrentShotFile, 1, UpdateCurrentShot			;IF UpdateCurrentShot.CurrentShotFirstNdx(CommNum)=0 THEN			;	UpdateCurrentShot.CurrentShotFirstNdx(CommNum)=ShotNdx(CommNum)			;END IF			;FOR LoopVar=1 TO 64; Copy shot data into current shot			;	UpdateCurrentShot.CurrentShotData(CommNum, LoopVar)=UpdateMachShotData(CommNum).ShotData(LoopVar)			;NEXT LoopVar			;UpdateCurrentShot.CurrentShotLastNdx(CommNum)=ShotNdx(CommNum)			;UpdateCurrentShot.CurrentShotTotal(CommNum)=UpdateCurrentShot.CurrentShotTotal(CommNum)+1			;IF CurrentProd.CurrentCavities(CommNum)>0 THEN			;	UpdateCurrentShot.CurrentShotAccepted(CommNum)=UpdateCurrentShot.CurrentShotAccepted(CommNum)+CurrentProd.CurrentCavities(CommNum)			;ELSE			;	UpdateCurrentShot.CurrentShotAccepted(CommNum)=UpdateCurrentShot.CurrentShotAccepted(CommNum)+1			;END IF			; Put loop here to Update up to 16 cavity totals %%%%%%%%%%%%%%%%*****			;UpdateCurrentShot.CurrentShotTime(CommNum)=UpdateMachShotData(CommNum).ShotTime			;UpdateCurrentShot.CurrentShotMode(CommNum)=UpdateMachShotData(CommNum).ShotMode			;IF UpdateCurrentShot.CurrentShotMode(CommNum)<3 THEN; Unknown, Off, or Manual			;	UpdateCurrentShot.CurrentShotMode(CommNum)=5; Force mode to 'Run'			;	UpdateMachModeData(CommNum).ModeTime=InoTime			;	UpdateMachModeData(CommNum).ModeData=5			;	Added this code to simulate;Run mode in mode file itself for use in efficiency report			;	UpdateModeFileName="ModeFile"+TRIM$(Str$(CommNum+1))			;	;on error Resume Next			;	OPEN TRIM$(FilePath) & UpdateModeFileName For Binary As UpdateMachModeFile			;	IF LOF(UpdateMachModeFile)+1>ModeNdx(CommNum) THEN			;		ModeNdx(CommNum)=LOF(UpdateMachModeFile)+1			;	ELSE			;		CLOSE UpdateMachModeFile			;		EXIT SUB			;	END IF			;	PUT UpdateMachModeFile, ModeNdx(CommNum), UpdateMachModeData(CommNum)			;	CLOSE UpdateMachModeFile			;	IF UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum)=0 THEN			;		UpdateCurrentShot.CurrentShotFirstModeNdx(CommNum)=ModeNdx(CommNum)			;	END IF			;END IF			;PUT UpdateCurrentShotFile, 1, UpdateCurrentShot			;CLOSE UpdateCurrentShotFile 			;INCR DataField(CommNum); Point past real data			;Production.ProdActive=TRUE			;CurrentNdx=CommNum; Set index for CurrentToProduction call			;CALL SUB CurrentToProduction; Updates production record with static and dynamic data			CALL SUB Resync; This is the new way to terminate sync rather than wait for a CR		END IF	END IFEND IFEXIT SUB;MSComm1Trap:;ON ERROR GOTO 0;IF ErrorFlag=True THEN;	MsgBox "LoadAlarms Error";ELSE;	CALL SUB FileError;END IFEND SUBBEGIN SUB CurrentToProductionexit sub;;;;Production.ProdMachID=CurrentNdx;Production.ProdType=CurrentProd.CurrentType(CurrentNdx);Production.ProdFirstShotNdx=QueryCurrentShot.CurrentShotFirstNdx(CurrentNdx);Production.ProdLastShotNdx=QueryCurrentShot.CurrentShotLastNdx(CurrentNdx);Production.ProdFirstModeNdx=QueryCurrentShot.CurrentShotFirstModeNdx(CurrentNdx);Production.ProdLastModeNdx=QueryCurrentShot.CurrentShotLastModeNdx(CurrentNdx);Production.ProdFirstAlarmNdx=QueryCurrentShot.CurrentShotFirstAlarmNdx(CurrentNdx);Production.ProdLastAlarmNdx=QueryCurrentShot.CurrentShotLastAlarmNdx(CurrentNdx);Production.ProdFirstSetupNdx=QueryCurrentShot.CurrentShotFirstSetupNdx(CurrentNdx);Production.ProdLastSetupNdx=QueryCurrentShot.CurrentShotLastSetupNdx(CurrentNdx);Production.ProdPartDescription=CurrentProd.CurrentPartDescription(CurrentNdx);Production.ProdCustomer=CurrentProd.CurrentCustomer(CurrentNdx);Production.ProdRunID=CurrentProd.CurrentRunID(CurrentNdx);Production.ProdStart=CurrentProd.CurrentStart(CurrentNdx);Production.ProdEnd=InoTime 'Now;Production.ProdAccepted=QueryCurrentShot.CurrentShotAccepted(CurrentNdx);Production.ProdRejected=QueryCurrentShot.CurrentShotAutoRejected(CurrentNdx) + CurrentProd.CurrentManualRejected(CurrentNdx);Production.ProdMoldID=CurrentProd.CurrentMoldID(CurrentNdx);Production.ProdCavities=CurrentProd.CurrentCavities(CurrentNdx);Production.ProdTolerance=CurrentProd.CurrentTolerance(CurrentNdx);Production.ProdCycle=CurrentProd.CurrentCycle(CurrentNdx);Production.ProdWeight=CurrentProd.CurrentWeight(CurrentNdx);Production.ProdLabor=CurrentProd.CurrentLabor(CurrentNdx);Production.ProdPrice=CurrentProd.CurrentPrice(CurrentNdx);FOR I=1 TO 16    ;Production.ProdCavityNames(I)=CurrentProd.CurrentCavityNames(I, (CurrentNdx))    ;Production.ProdCavityWeight(I)=CurrentProd.CurrentCavityWeight(I, (CurrentNdx))    ;Production.ProdCavityLabor(I)=CurrentProd.CurrentCavityLabor(I, (CurrentNdx))    ;Production.ProdCavityPrice(I)=CurrentProd.CurrentCavityPrice(I, (CurrentNdx));NEXT I;Production.ProdCustOrderNum=CurrentProd.CurrentCustOrderNum(CurrentNdx);Production.ProdMaterial=CurrentProd.CurrentMaterial(CurrentNdx);Production.ProdDye=CurrentProd.CurrentDye(CurrentNdx);Production.ProdAdditive=CurrentProd.CurrentAdditive(CurrentNdx);Production.ProdComment=CurrentProd.CurrentComment(CurrentNdx);IF TRIM$(CurrentProd.CurrentPartDescription(CurrentNdx))="" THEN ; Spurious;	EXIT SUB;END IF;ON ERROR GOTO CurrentToProductionTrap;OPEN TRIM$(FilePath) + "Prod_" + TRIM$(CurrentProd.CurrentPartDescription(CurrentNdx)) For Binary As ProductionFile;IF CurrentProd.CurrentRecordNum(CurrentNdx)=0 Then ' Mark the record that will be the permanent home for this production block;    CurrentProd.CurrentRecordNum(CurrentNdx)=LOF(ProductionFile) + 1;    OPEN TRIM$(FilePath) & "CurrentProduction" For Binary As TempFile;    PUT TempFile, , CurrentProd ' Put index to production file in file;    CLOSE TempFile;    UpdateLogData.LogTime=InoTime;    UpdateLogData.LogMachNum=CurrentNdx;    UpdateLogData.LogType=1 ' Normal Log Entry;    UpdateLogData.LogProdFileNdx=CurrentProd.CurrentRecordNum(CurrentNdx);    UpdateLogData.LogPartNum=CurrentProd.CurrentPartNum(CurrentNdx);    OPEN TRIM$(FilePath) & "Log" For Binary As UpdateLogFile;    PUT UpdateLogFile, LOF(UpdateLogFile) + 1, UpdateLogData;    CLOSE UpdateLogFile;END IF;PUT ProductionFile, CurrentProd.CurrentRecordNum(CurrentNdx), Production ' Write the production record;CLOSE ProductionFile;ON ERROR GOTO 0;EXIT SUB;CurrentToProductionTrap:;CLOSE UpdateLogFile;CLOSE ProductionFile;ON ERROR GOTO 0;IF ErrorFlag=True Then;    MsgBox "CurrentToproduction Error";ELSE;    CALL FileError;END IFEND SUBBEGIN SUB FileErrorWARNINGBOX "File Error","A File Error Has Occurred",MB_OKEND SUBBEGIN SUB ClearDataGrid;DataGrid.gridclearFOR I=1 TO 8	FOR J=1 TO 8		DataGrid.TEXT(I,J)=""	NEXT JNEXT IEND SUBBEGIN SUB ClearStatsGrid;StatsGrid.gridclearFOR I=1 TO 6	FOR J=2 TO 17		StatsGrid.VALUE(I,J)=0	NEXT JNEXT IEND SUBBEGIN SUB SetStatsGridFOR J=2 TO 17	StatsGrid.VALUE(1,J)=Shots(J-1)	StatsGrid.VALUE(2,J)=Modes(J-1)	StatsGrid.VALUE(3,J)=Alarms(J-1)	StatsGrid.VALUE(4,J)=Events(J-1)	StatsGrid.VALUE(5,J)=Bytes(J-1)	StatsGrid.VALUE(6,J)=Errors(J-1)NEXT JEND SUBActivityTimer.TIMEOUTLampIndex=ArrayIndexActivityTimer(LampIndex).STOPIF Mode(LampIndex)<>0 AND Mode(LampIndex)<>1 AND Mode(LampIndex)<>2 THEN	Mode(LampIndex)=0	TempMode=0	CALL SUB WriteMode	CALL SUB SetModeLamp	; Write record to Modefile	; Write record to CommLogFile	INCR Events(LampIndex)	IF StatsFlag=TRUE THEN		CALL SUB SetStatsGrid	END IFEND IFEND EVENTBEGIN SUB ResyncSync(CommNum)=0Preamble(CommNum)=0MsgType(CommNum)=0DataField(CommNum)=0TempDataStr(CommNum)=""END SUB ResyncBEGIN SUB ResyncAllFOR I = 1 TO 16    ShotNdx(I)=0    ModeNdx(I)=0    AlarmNdx(I)=0    Sync(I)=0    Preamble(I)=0    DataField(I)=0    MsgType(I)=0    TempDataStr(I)=""    ;TimeOut(I)=0NEXT IEND SUBBEGIN SUB BreakSyncRawSync=0SrcMacAddr=0END SUBBEGIN SUB InitWiredFirstCommPort=ConfigData.FirstPortLastCommPort=FirstCommPort+ConfigData.NumPorts-1FOR I=FirstCommPort TO LastCommPort	TempStr="COM"+STR(FirstCommPort)	OBMain.text=TempStr	OBComm1(I).PORTNAME=TempStr	OBComm1(I).BAUDRATE=9600	OBComm1(I).PARITY=EVENPARITY	OBComm1(I).DATABITS=8	OBComm1(I).STOPBITS=ONESTOPBIT	OBComm1(I).RTS=0	OBComm1(I).CTSCHECK=FALSE	OBComm1(I).DSRCHECK=FALSE	OBComm1(I).PARITYCHECK=FALSE	OBComm1(I).DTR=0	ON ERROR GOTO CommOpenError1	OBComm1(I).OPEN	ON ERRORNEXT INeedConfig=FALSEEXIT SUBCommOpenError1:WARNINGBOX "Server Error","System Comm Not Configured",MB_OKNeedConfig=TRUEEND SUBBEGIN Sub InitWirelessFirstCommPort=ConfigData.FirstPortTempStr="COM"+STR(FirstCommPort)OBComm1(FirstCommPort).PORTNAME=TempStrOBComm1(FirstCommPort).BAUDRATE=57600OBComm1(FirstCommPort).PARITY=NOPARITYOBComm1(FirstCommPort).DATABITS=8OBComm1(FirstCommPort).STOPBITS=ONESTOPBITOBComm1(FirstCommPort).RTS=2OBComm1(FirstCommPort).CTSCHECK=FALSEOBComm1(FirstCommPort).DSRCHECK=FALSEOBComm1(FirstCommPort).PARITYCHECK=FALSEOBComm1(FirstCommPort).DTR=0ON ERROR GOTO CommOpenError2OBComm1(FirstCommPort).OPENON ERRORCALL SUB BreakSyncCALL SUB RfInit;CommWatchTimer1.Enabled = False;CommWatchTimer1.Enabled = True;CommWatchTimer1.TIME = 60000NeedConfig=FALSEEXIT SUBCommOpenError2:WARNINGBOX "Server Error","System Comm Not Configured",MB_OKNeedConfig=TRUEEND SUBBEGIN SUB RfInitInitStr1(1)=$aaInitStr1(2)=$00InitStr1(3)=$00InitStr1(4)=$aaInitStr2(1)=$80InitStr2(2)=$00InitStr2(3)=$00InitStr2(4)=$80OBComm1(FirstCommPort).BINARYOUTPUT InitStr1,4RFInitTimer.TIME=400END SUBRFInitTimer.TIMEOUTRFInitTimer.STOPOBComm1(FirstCommPort).BINARYOUTPUT InitStr2,4END EVENTBEGIN SUB WriteAlarmGOSUB GetInoTimeMachAlarmData(CommNum).AlarmTime=InoTimeOPEN "AlarmFile"+STR(CommNum) FOR APPEND AS MachAlarmFileAlarmNdx(CommNum)=LOF(MachAlarmFile)+1PUT MachAlarmFile,MachAlarmData(CommNum)CLOSE MachAlarmFileEND SUBBEGIN SUB WriteModeGOSUB GetInoTimeMachModeData(CommNum).ModeTime=InoTimeMachModeData(CommNum).ModeData=TempModeOPEN "ModeFile"+STR(CommNum) FOR APPEND AS MachModeFileModeNdx(CommNum)=LOF(MachModeFile)+1PUT MachModeFile,MachModeData(CommNum)CLOSE MachModeFileEND SUBBEGIN SUB WriteShotGOSUB GetInoTimeMachShotData(CommNum).ShotTime=InoTimeMachShotData(CommNum).ShotMode=Mode(CommNum)OPEN "ShotFile"+STR(CommNum) FOR APPEND AS MachShotFileShotNdx(CommNum)=LOF(MachShotFile)+1PUT MachShotFile,MachShotData(CommNum)CLOSE MachShotFileEND SUBBEGIN SUB PadMacAddress		SELECT CASE LEN(TempMacAddr)			CASE 1				TempStr="0000000"			CASE 2				TempStr="000000"			CASE 3				TempStr="00000"			CASE 4				TempStr="0000"			CASE 5				TempStr="000"			CASE 6				TempStr="00"			CASE 7				TempStr="0"			CASE 8				TempStr=""		END SELECTEND SUBGetInoTime:GOSUB GetNowInoTime=TIMEDIFF(Now,InoTimeSeed)RETURNGetNow:GETDATETIME NowRETURNGetTimeFromInoTime:DateTimeTemp=InoTimeSeedTIMEADD DateTimeTemp,InoTimeRETURN