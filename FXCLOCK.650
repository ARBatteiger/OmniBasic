( REAL TIME CLOCK                              06:13 01/08/90 ) HEX : FXCLOCK ;                                                 6010 CONSTANT DTAREQI/O  6011 CONSTANT DTAREGI/O                00 CONSTANT RTCsec  02 CONSTANT RTCmin   04 CONSTANT RTChrs     07 CONSTANT RTCday  08 CONSTANT RTCmonth 09 CONSTANT RTCyr      0A CONSTANT UIPreg  80 CONSTANT UIPbit ( UPDATING reg&bit defs) 0B CONSTANT CLKset  80 CONSTANT SETbit    ( CLOCK UPDATE INHIB) 0A CONSTANT REGA    0B CONSTANT REGB     0C CONSTANT REGC       0D CONSTANT REGD    23 CONSTANT Ainit    0C CONSTANT Binit      0E CONSTANT DAY0    80 CONSTANT VTRbit                          0F CONSTANT MSBSMPL# 10 CONSTANT LSBSMPL#                       3D CONSTANT RUNDLY#  3F CONSTANT TSTBYTE#                       DECIMAL                                                         0 VARIABLE TMPhrs  0 VARIABLE CLKERRcnt 0 VARIABLE fPM          : ?CLKerr 1 CLKERRcnt +! CLKERRcnt @ 1000 >                       IF CR ." CLOCK DATA RDY ERROR" QUIT THEN ;                    ( REAL TIME CLOCK                              06:13 01/08/90 ) CODE UIPwait BEGIN, UIPreg # .A LD, DTAREQI/O .A ST,                        DTAREGI/O .A LD, UIPbit # .A AND, 0= UNTIL, RTS,    CODE !CLKDTA ( n,reg# --) ' UIPwait JSR, ( Ensure clk rdy)           PULA, PULA, DTAREQI/O .A ST,                                    PULB, PULB, DTAREGI/O .B ST, NEXT,                         CODE @CLKDTA ( reg#--dta) ' UIPwait JSR,                             PULLD, DTAREQI/O .B ST, DTAREGI/O .B LD,                        .A CLR, PUSHD, NEXT,                                       : @TSTBYTE ( --n) TSTBYTE# @CLKDTA ; ' @TSTBYTE CFA '@TSTBYTE ! : !TSTBYTE ( n--) TSTBYTE# !CLKDTA ;                            : @RUNDLY ( --n) RUNDLY# @CLKDTA 256 * RUNDLY# 1+ @CLKDTA OR ;  : !RUNDLY ( n--) DUP 256 / RUNDLY# !CLKDTA RUNDLY# 1+ !CLKDTA ;                                                                                                                                                                                                 ( STOP/START CLOCK FOR RESET                   07:35 01/13/90 ) CODE STOPCLK ' UIPwait JSR,                                       REGB # .A LD, DTAREQI/O .A ST,   ( Set access to clock reg B)   DTAREGI/O .B LD, SETbit # .B OR,  ( Rd reg B & set `SET' bit)   DTAREQI/O .A ST,                ( Re request access to reg B)   DTAREGI/O .B ST, NEXT,        ( Set reg B with new `SET' bit) CODE STRTCLK ' UIPwait JSR,                                       REGB # .A LD, DTAREQI/O .A ST,   ( Set access to clock reg B)   DTAREGI/O .B LD, 127 # .B AND,    ( Rd reg B & clr `SET' bit)   DTAREQI/O .A ST,                ( Re request access to reg B)   DTAREGI/O .B ST, NEXT,        ( Set reg B with new `SET' bit)                                                                 : @SMPL# ( -- n) MSBSMPL# @CLKDTA 256 * LSBSMPL# @CLKDTA OR ;   : !SMPL# ( n--) 256 /MOD MSBSMPL# !CLKDTA LSBSMPL# !CLKDTA ;    : +!SMPL# ( n --) @SMPL# + !SMPL# ;                                                                                             ( REAL TIME CLOCK PRINTER SUPPORT              06:13 01/08/90 ) : CNVRTdate ( --adr,cnt) RTCmonth @CLKDTA 0 100 D*                RTCday @CLKDTA 0 D+ 100 D* RTCyr  @CLKDTA 0 D+                  <# # # 47 HOLD # # 47 HOLD #S #> ;                            : CNVRTtime ( --adr,cnt) RTChrs @CLKDTA DUP 127 > fPM !           127 AND 0 100 D* RTCmin @CLKDTA 0 D+ 100 D*                     RTCsec @CLKDTA 0 D+ <# # # 58 HOLD # # 58 HOLD #S #> ;        : !CLKBUFx ( c,x-- char saved in CLKBUF at x) CLKBUF + 1- C! ;  : GET-SMPL# RTCday @CLKDTA DAY0 @CLKDTA OVER DAY0 !CLKDTA <>       IF 1 !SMPL# ELSE 1 +!SMPL# THEN @SMPL# ;                     : CLKTST STRTCLK                                                 BEGIN CR ." [" CNVRTdate TYPE ."  " CNVRTtime TYPE ." ] "       14 10 DO 32 EMIT I @CLKDTA 0 HEX <# # # #> DECIMAL TYPE ." H"         LOOP ?TERMINAL DUP IF DROP KEY 27 = THEN UNTIL ;                                                                                                                                         ( NUMBER ENTRY                                 09:45 02/03/90 ) : CLR-NUMBER  CLR-CHRBUF2 CHRBUF2 1+ BUF2pntr !                   x2 @ 1+ MINx @ DO 32 I DISPLAY2 wx-emit LOOP    ( Clr digits)   MINx @ x2 ! ;                        ( Reset dsply clmn pntr) : get[num] ( --  CHRBUF2 contains char string)                    BEGIN x2 @ MAXx @ >        ( Display clmn pntr > last clmn ?)     IF 0 BUF2pntr ! 0 fDP ! THEN      ( clear char buffer pntr)     BEGIN ?KEYPAD UNTIL PCkey                                       47 OVER < OVER 58 < AND ( 0->9 DIGITS only entered)             IF BUF2pntr @ 0= IF CLR-NUMBER THEN                                DUP x2 @ DISPLAY2 wx-emit 1 x2 +!   ( Display character)        95 ( _) x2 @ DISPLAY2 wx-emit  ( Display nxt chr prompt)        DUP BUF2pntr @ C! 1 BUF2pntr +!    ( Enter digit in buf)     THEN x2 @ MAXx @ >       ( Display clmn pntr > last clmn ?)     IF 32 ( sp) x2 @ DISPLAY2 wx-emit THEN ( If so, clr prompt)   ENT = UNTIL ;                                                 ( DATE/TIME SET NUMBER ENTRY                   11:28 01/09/90 ) ( NUMBER ENTRY                                 09:45 02/03/90 ) : SET-INITVLU ( n--) 0 INITVLU 2! 0 INITVLU 4 + ! ;             : GET[num] ( --n)                                                  CLR-CHRBUF2                            ( Clear digit buffer)    0 fDP ! 0 f+/-# !  ( Clr dp entered flag & set POS NUM only)    0 F#SGN !                               ( Clr neg data sign)    INITVLU 2@ INITVLU 4 + @ F#CNVRT    ( Get init value string)    2DUP CHRBUF2 1+ SWAP CMOVE ( Put init value strng in buffer)    MINx @ DISPLAY2 wx-TYPE                ( Display init value)    MINx @ 1+ MAXx !                    ( Set for 2 digit input)    MAXx @ 1+ x2 !               ( Set dsply clmn > max allowed)    get[num]              ( Init digit entry & get whole number)    CHRBUF2 NUMBER 2DUP INITVLU 2! DROP >R                          DPL @ 0 MAX MINUS INITVLU 4 + ! R> ;                                                                                         ( REAL TIME CLOCK                              06:13 01/08/90 ) 0 VARIABLE SEC0                                                 : DaTmDSPLY ( --) STOPCLK                                         CNVRTdate  6 8 DISPLAY1 FORMAT-wxTYPE                           CNVRTtime 17 8 DISPLAY1 FORMAT-wxTYPE                           STRTCLK ;                                                     : ?F3KEY DaTmDSPLY                                                       BEGIN RTCsec @CLKDTA SEC0 @ OVER SEC0 !                           <> IF DaTmDSPLY THEN                                            ?KEYPAD DUP                                                     IF DROP PCkey F1 OVER = OVER F3 = OR                               DUP 0= IF SWAP DROP THEN THEN                              UNTIL F3 = ;                                                                                                                                                                                                                                           ( REAL TIME CLOCK                              06:13 01/08/90 ) : ?CHNGtime "DaTm3 DISPLAY2 w-TYPE ?F3KEY ;                     : ?PM "AM/PM DISPLAY2 w-TYPE ?F3KEY ;                           : ?DaTmOK "DaTm1 DISPLAY1 w-TYPE                                          "DaTm2 DISPLAY2 wsec !CLKDTA                               2 BLANKline                                                     "HH Count DUP 2+ DUP MINx ! 2+ MAXx ! 1 DISPLAY2 wx-TYPE        0 BEGIN DROP RTChrs @CLKDTA 127 AND  ( Rd hrs & Clr PM bit)         SET-INITVLU GET[num] DUP 13 < UNTIL TMPhrs !                2 BLANKline                                                     "MIN Count DUP 2+ DUP MINx ! 2+ MAXx ! 1 DISPLAY2 wx-TYPE       0 BEGIN DROP RTCmin @CLKDTA                                         SET-INITVLU GET[num] DUP 60 < UNTIL RTCmin !CLKDTA          ?PM IF 128 ELSE 0 THEN TMPhrs @ + RTChrs !CLKDTA STRTCLK ;                                                                                                                                                                                                                                                                                                                                     ( REAL TIME CLOCK                              06:13 01/08/90 ) : NEWDATE  STOPCLK                                               2 BLANKline                                                     "MM Count DUP 2+ DUP MINx ! 1+ MAXx ! 1 DISPLAY2 wx-TYPE        RTCmonth @CLKDTA                                                SET-INITVLU GET[num] RTCmonth !CLKDTA                           2 BLANKline                                                     "DD Count DUP 2+ DUP MINx ! 1+ MAXx ! 1 DISPLAY2 wx-TYPE        RTCday @CLKDTA                                                  SET-INITVLU GET[num] RTCday !CLKDTA                             2 BLANKline                                                     "YY Count DUP 2+ DUP MINx ! 1+ MAXx ! 1 DISPLAY2 wx-TYPE        RTCyr @CLKDTA                                                   SET-INITVLU GET[num] RTCyr !CLKDTA STRTCLK ;                                                                                                                                                   ( CLOCK INITIALIZE                             15:27 01/08/90 ) : INIT-RTC Binit SETbit OR REGB !CLKDTA ( Stop clk & init Reg B)  Ainit REGA !CLKDTA                                              REGC @CLKDTA DROP                ( Clr any pending interrupt)   1 !SMPL#                      ( Initialize the sample number)   REGD @CLKDTA DROP                              ( Set VTR bit)   STRTCLK ;                                ( Enable RTC update) : ?CLKDTAok REGD @CLKDTA VTRbitflg ! STRTCLK ( Ensure NO RECAL & clk running)  BEGIN REGD @CLKDTA VTRbit AND                ( Check VTR bit)     IF ?DaTmOK IF 0 CALflg ! EXIT THEN   ( Operator change req)        ?CHNGtime IF NEWTIME ELSE NEWDATE THEN                       ELSE INIT-RTC             ( If VRT bad, force operator set)          "CLKRST DISPLAY1 w-TYPE                                         NEWDATE NEWTIME                                            THEN                                                          0 UNTIL ;                                                                                                                     ' DATE/TIME CFA 'DATE/TIME ! ( Addr of DATE/TIME entry routine) ' GET-SMPL# CFA 'GET-SMPL# ! ( Addr of SAMPLE# routine)                                                                                                                                                                                                         