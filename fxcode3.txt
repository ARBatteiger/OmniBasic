^?VIAL-IN
ConstVIALSWI/O
C@
ConstVIALbit
AND
0=
DUP
VarfVIAL
!
Finish

^SET-TESTrtn
R>
VarTESTRTN
@
OBRANCH
$000A
BEGIN
R>
0=
OBRANCH
$FFFA
ENDIF
DUP
VarTESTRTN
!
Const0
>R
>R
Const0
VarfTEST
!
$F742
Finish

^?VIAL-OUT
ConstVIALSWI/O
C@
ConstVIALbit
AND
DUP
0=
VarfVIAL
!
0<>
Finish

^TRIGER-LAMP
VarLMPstat
@
ConstLMPreset
AND
DUP
ConstACQRI/O
C!
VarTRIGDLY
@
LIT
$0032
MAX
DELAY[ms]
ConstSTARTacqr
OR
DUP
VarLMPstat
!
ConstACQRI/O
C!
Finish

^LMPFAIL
LIT
$FFFF
VarfABORT
!
LIT
$FFFF
VarTRIGerr
!
VarfTEST
@
0=
OBRANCH
$0008
''LMPFAIL1
ConstDISPLAY1
w-TYPE
ENDIF
Finish

^FIRE-LAMP
Const0
VarLMPERR
!
LIT
VarflMPERR
!
BEGIN
TRIGER-LAMP
Const0
BEGIN
1+
DUP
LIT
$000A
>
VarA/DStatus
C@
LIT
$00FF
XOR
ConstLMPDtaRdy
AND
OR
?VIAL-OUT
OBRANCH
$0010
LIT
$FFFF
DUP
VarfABORT
!
BRANCH
$0004
ELSE
Const0
ENDIF
OR
OBRANCH
$FFCC
LIT
$000A
>
OBRANCH
$0020
Const1
VarLMPERR
+!
Const1
Var#LMPERR
+!
VarLMPERR
@
Const3
>
OBRANCH
$0004
LMPFAIL
ENDIF
BRANCH
$0008
ELSE
Const0
VarflMPERR
!
ENDIF
VarflMPERR
@
0=
VarfABORT
@
OR
OBRANCH
$FF8A
VarLMPERR
@
>
OBRANCH
$0023
CR
VarLMPERR
@
.
.''
$14
''DATA READY ERROR(s)''
CR
ENDIF
Finish

^SET[Offset]
VarLMPstat
@
DUP
VarSVstat
!
LIT
$009F
AND
LIT
$0020
OR
VarLMPstat
!
Finish

^SET[Normal]
VarSVstat
@
VarLMPstat
!
Finish

^PRIME-LAMP-CONTROL
Var#PRIMES
@
Const0
(DO)
TRIGER-LAMP
(LOOP)
$FFFC
Finish

^SCALE-GAIN
Const0
SWAP
LIT
$FFFC
LIT
1000
Const0
VarDltaGains
@
nF*/
Finish

^DSPLYGc's
CR
.''
$1D
'' Gain factors Gc0,Gc1,Gc2,Gc3 ''
LIT
$0EFC
VarDltaGains
(DO)
)
2@
Const0
ROT
FORMAT-ANSWER
SPACE
TYPE
LIT
$0004
(+LOOP)
$FFEC
Finish

^FORMAT-GAIN
Const0
SWAP
LIT
$FFFE
LIT
$0064
Const0
Vars0
@
nF*/
Const0
ROT
FORMAT-ANSWER
Finish

^TYPEGAINS
.''
$07
''  GAIN ''
DUP
FORMAT-GAIN
TYPE
Finish

^INIT-SIGFILTER
LIT
$0000
LIT
$0000
VarSUM[Rn]
2!
Const0
VarR[Hi]
!
LIT
$7FFF
VarR[Lo]
!
Const0
VarCYCL[n]
!
Finish

^TYPE-%Dlta
<#
#
#
LIT
$002E
HOLD
#S
#>
TYPE
Finish

^GTYPE-ALL
CR
VarSUM[Rn]
2@
VarCYCL[n]
@
LIT
$0008
*
D/
.''
$08
''GAINSIG=''
D.
.''
$07
''%DLTA=''
VarDlta
@
Const0
TYPE-%Dlta
Finish

^@TEST-SIG
Const0
LIT
$0008
Const0
(DO)
FIRE-LAMP
A/DCNVRT
+
(LOOP)
$FFF8
DUP
VarR[Hi]
@
>
OBRANCH
$0008
DUP
VarR[Hi]
!
ENDIF
DUP
VarR[Lo]
@
<
OBRANCH
$0008
DUP
VarR[Lo]
!
ENDIF
Const0
Finish

^CHK-GAINok
Var1/Dlta
2@
OBRANCH
$000A
DROP
Const0
BRANCH
$001E
ELSE
DUP
0<
OBRANCH
$000A
DROP
Const0
BRANCH
$000E
ENDIF
LIT
$2710
SWAP
Const1
MAX
/
ENDIF
VarDlta
!
GTYPE-ALL
VarCYCL[n]
@
Const#GTRIES
>
LIT
$0064
Const#GTRIES
*
Const0
VarSUM[Rn]
2@
D<
AND
OBRANCH
$0030
LIT
$FFFF
VarfNFg>Lim
!
LIT
$0000
LIT
$0000
VarSUM[Rn]
2!
CR
.''
$13
''UNSTABLE GAIN DATA ''
CR
ENDIF
Finish

^GET-TEST-SIG
INIT-SIGFILTER
SPACE
Const#GTRIES
2+
Const0
(DO)
@TEST-SIG
VarSUM[Rn]
2@
D+
VarSUM[Rn]
2!
Const1
VarCYCL[n]
+!
VarCYCL[n]
@
DUP
.
VarMINSMPL#
@
>
OBRANCH
$0044
VarSUM[Rn]
2@
VarR[Hi]
@
VarR[Lo]
@
-
Const1
MAX
D/
2DUP
Var1/Dlta
2!
ConstGLimit
Const0
d>
VarfABORT
@
OR
VarSUM[Rn]
2@
LIT
$0190
LIT
$0000
D<
VarfOffset
@
AND
OR
OBRANCH
$0004
LEAVE
ENDIF
ENDIF
(LOOP)
$FF98
CHK-GAINok
VarSUM[Rn]
2@
VarCYCL[n]
@
LIT
$0008
*
D/
DROP
Finish

^READtest
CR
.''
$04
''Sig ''
Const0
VarfOffset
!
GET-TEST-SIG
Finish

^READoffset
CR
.''
$07
''Offset ''
SET[Offset]
LIT
$0007
Finish

^SETtestSIG
VarLMPstat
@
ConstTESTmode
OR
VarLMPstat
!
Finish

^SETnormalSIG
VarLMPstat
@
ConstTESTmode
LIT
$00FF
XOR
AND
VarLMPstat
!
Finish

^@TEST[sig0]
ConstSIGchan
LIT
$0007
OR
ConstBKLITEbit
OR
DUP
VarMUXstat
!
ConstCHANmux
C!
LIT
$0008
1-
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig1]
VarMUXstat
@
LIT
$0007
OR
Const1
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig2]
VarMUXstat
@
LIT
$0007
OR
Const2
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig3]
VarMUXstat
@
LIT
$0007
OR
LIT
$0004
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^Stop
''STOPED
ConstDISPLAY1
w-TYPE
LIT
$FFFF
VarCALflg
!
SET-TESTrtn
BKliteON
BEGIN
$F18D
UPDATEkeyQ
Const0
OBRANCH
$FFF8
Finish

^EVALGAIN
DUP
LIT
$0009
<
SWAP
LIT
$000C
>
OR
VarfNFg>Lim
@
OR
VarfGERR
@
OR
VarfGERR
!
Finish

^GAINTEST
VarfGERR
@
OBRANCH
$000A
RNGERR
ConstDISPLAY2
w-TYPE
Stop
ENDIF
Finish

^CALC-GAINS
Const0
VarfGERR
!
Const0
VarfNFg>Lim
!
PRIME-LAMP-CONTROL
SETtestSIG
CR
.''
$19
''Test Signals G0,G1,G2,G3 ''
@TEST[sig0]
DUP
>R
DUP
Vars0
!
VarDltaGains
!
@TEST[sig1]
TYPEGAINS
DUP
R
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
$0004
+
2!
@TEST[sig2]
TYPEGAINS
DUP
R
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
$0004
+
2@
LIT
$FFFC
LIT
$2710
nF*/
VarDltaGains
LIT
$0008
+
2!
@TEST[sig3]
TYPEGAINS
DUP
R>
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
$0008
+
2@
LIT
$FFFC
LIT
$2710
nF*/
VarDltaGains
LIT
$000C
+
2!
SETnormalSIG
LIT
$FFFC
LIT
$2710
VarDltaGains
2!
DSPLYGc's
GAINTEST
Finish

^GET[Sig]
ConstSIGchan
VarMUXset
!
SET-ANALOG-CNTRL
A/DCNVRT
Finish

^GETAVE
LIT
$0000
LIT
$0000
LIT
$000A
Const0
(DO)
FIRE-LAMP
GET[Sig]
Const0
D+
?VIAL-OUT
VarfABORT
@
OR
OBRANCH
$0004
LEAVE
ENDIF
(LOOP)
$FFE8
LIT
$000A
D/
DROP
Finish

^UPDATE-OFFSET
SET[Offset]
GETAVE
SET[Normal]
VarSIG[Offset]
!
Finish

^GET[Ref]
ConstREFchan
VarMUXset
!
SET-ANALOG-CNTRL
A/DCNVRT
Finish

^AGCGAIN
PRIME-LAMP-CONTROL
CR
.''
$10
''-AGC-  GAIN/SIG ''
Const0
VarGAINvlu
!
BEGIN
VarGAINvlu
@
LIT
$000A
*
Const1
MAX
VarGAINvlu
!
GET[Sig]
DROP
GETAVE
UPDATE-OFFSET
VarSIG[Offset]
@
-
.''
$02
'', ''
VarGAINvlu
@
.
.''
$02
''/ ''
DUP
.
LIT
$012C
>
VarGAINvlu
@
LIT
1000
>=
OR
VarGAINexp
@
$21D6
@
>=
OR
VarfABORT
@
OR
OBRANCH
$FFA6
Finish

^SETGAIN
Const1
MAX
VarGAINvlu
!
SET-ANALOG-CNTRL
Finish

^/RND
DUP
>R
M/MOD
DROP
SWAP
R>
2/
1-
>
OBRANCH
$0004
1+
ENDIF
Finish

^INIT-FLTRTBLS
LIT
$0008
Const0
(DO)
Var#SMPLtbl0
)
+
@
Var#SMPLtbl
)
+
!
#OUTLYRtbl0refx
)
+
@
Var#OUTLYRtbl
)
+
!
Const2
(+LOOP)
$FFDC
Finish

^SET-#SMPLS
2*
Var#SMPLtbl
+
@
Var#SMPLS
!
Finish

^SET-#OUTLYRS
2*
Var#OUTLYRtbl
+
@
Var#OUTLYERS
!
Finish

^INIT-MEASURE-CYCLE
VarGAINexp
@
DUP
SET-#SMPLS
SET-#OUTLYRS
Var#SMPLS
@
Var#OUTLYERS
@
2*
+
DUP
VarSMPLtotal
!
2*
VarNDXlimit
!
Const0
VarSMPL#
!
Const0
VarSMPLNDX
!
Finish

^READ-SAMPLE
LIT
$2710
FIRE-LAMP
GET[Sig]
VarSIG[Offset]
@
-
Const1
MAX
DUP
VarSIGQUE
VarSMPLNDX
@
+
!
GET[Ref]
Const1
MAX
DUP
VarREFQUE
VarSMPLNDX
@
+
!
*/
VarS/RQUE
VarSMPLNDX
@
+
!
Const2
VarSMPLNDX
+!
Finish

^INIT-MEASURE-DATA
LIT
$0000
LIT
$0000
VarAVE[S/R]
2!
LIT
$0000
LIT
$0000
VarSIG[Ave]
2!
LIT
$0000
LIT
$0000
VarREF[Ave]
2!
LIT
$0000
LIT
$0000
VarSIG[Ave]/REF[Ave]
2!
Finish

^CHK-MIN/MAX
>R
DUP
VarMAXSMPL
@
>
OBRANCH
$000E
DUP
VarMAXSMPL
!
R
VarMAXNDX
!
ENDIF
DUP
VarMINSMPL
@
<
VarMAXNDX
@
R
<>
AND
OBRANCH
$000E
DUP
VarMINSMPL
!
R
VarMINNDX
!
ENDIF
R>
2DROP
Finish

^REJECT-OUTLYER
Const0
VarMAXSMPL
!
LIT
$7FFF
VarMINSMPL
!
LIT
$FFFF
VarMAXNDX
!
LIT
$FFFF
VarMINNDX
!
Var#OUTLYERS
@
>
OBRANCH
$007A
VarNDXlimit
@
Const0
(DO)
VarS/RQUE
)
+
@
DUP
0>=
OBRANCH
$000A
)
CHK-MIN/MAX
BRANCH
$0004
ELSE
DROP
ENDIF
Const2
(+LOOP)
$FFE2
VarMAXNDX
@
DUP
0>=
OVER
VarNDXlimit
@
<
AND
OBRANCH
$0012
VarS/RQUE
+
LIT
$FFFF
SWAP
!
BRANCH
$0004
ELSE
DROP
ENDIF
VarMINNDX
@
DUP
0>=
OVER
VarNDXlimit
@
<
AND
OBRANCH
$0012
VarS/RQUE
+
LIT
$FFFE
SWAP
!
BRANCH
$0004
ELSE
DROP
ENDIF
ENDIF
Finish

^REJECT-OUTLYERS
Var#OUTLYERS
@
Const0
(DO)
REJECT-OUTLYER
(LOOP)
$FFFC
Finish

^SHFTDATA
VarAVE[S/R]
2@
LIT
$0F24
2!
VarSIG[Ave]
2@
LIT
$0F2E
2!
VarREF[Ave]
2@
LIT
$0F38
2!
VarSIG[Ave]/REF[Ave]
2@
LIT
$0F42
2!
Finish

^@AVE[S/R]
VarGAINexp
@
MINUS
VarAVE[S/R]
@
EXIT
Const0
LIT
$0F24
@
Const0
D+
Const2
D/
Const0
VarS/Rjst
!
LIT
$000A
Const0
(DO)
2DUP
LIT
$7FFF
LIT
$0000
d>
OBRANCH
$0012
Const1
VarS/Rjst
+!
LIT
$000A
D/
BRANCH
$0004
ELSE
LEAVE
ENDIF
(LOOP)
$FFDC
DROP
VarGAINexp
@
VarS/Rjst
@
+
MINUS
SWAP
Finish

^?DATA-STABLE
VarAVE[S/R]
@
LIT
$0F24
@
2DUP
+
2/
>R
-
ABS
DUP
LIT
$000F
<
SWAP
LIT
$2710
R>
*/
DUP
Var%DIF
!
LIT
$01F4
<
OR
Finish

^AVE-DATA
Const0
Var#BADPNTS
!
LIT
$0000
LIT
$0000
VarNDXlimit
@
Const0
(DO)
VarS/RQUE
)
+
@
DUP
0<
0=
OBRANCH
$0090
VarSIGQUE
)
+
@
DUP
VarSIG[Offset]
@
+
LIT
$0FF5
>
DUP
OBRANCH
$0008
Const0
VarSIGok
!
ENDIF
VarREFQUE
)
+
@
LIT
$0FF5
OVER
<
OVER
LIT
1000
<
OR
DUP
OBRANCH
$0008
Const0
VarREFok
!
ENDIF
ROT
OR
0=
OBRANCH
$0022
Const0
VarREF[Ave]
2@
D+
VarREF[Ave]
2!
Const0
VarSIG[Ave]
2@
D+
VarSIG[Ave]
2!
Const0
D+
BRANCH
$001A
ELSE
2DROP
DROP
LIT
$FFFD
VarS/RQUE
)
+
!
LIT
$FFFF
Var#BADPNTS
+!
ENDIF
BRANCH
$0004
ELSE
DROP
ENDIF
Const2
(+LOOP)
$FF5A
Finish

^CALC[AveS/R]
LIT
$0000
LIT
$0000
VarSIG[Ave]
2!
LIT
$0000
LIT
$0000
VarREF[Ave]
2!
LIT
$FFFF
VarSIGok
!
LIT
$FFFF
VarREFok
!
AVE-DATA
Var#SMPLS
@
Var#BADPNTS
@
+
Const1
MAX
DUP
>R
/RND
DUP
VarAVE[S/R]
!
LIT
$2710
VarSIG[Ave]
2@
R
/RND
DUP
VarSIG[Ave]
!
VarREF[Ave]
2@
R>
/RND
DUP
VarREF[Ave]
!
*/
DUP
0<
OBRANCH
$0008
DROP
LIT
$7D00
ENDIF
VarSIG[Ave]/REF[Ave]
!
Var#SMPLS
@
Var#BADPNTS
@
ABS
Const1
MAX
/
Const1
>
OBRANCH
$0012
LIT
$FFFF
VarSIGok
!
LIT
$FFFF
VarREFok
!
ENDIF
Finish

^TYPEdata
DUP
0<
MINUS
Varf-
!
ABS
Const0
<#
#S
#>
LIT
$0006
OVER
-
Varf-
@
+
Const0
(DO)
LIT
$0020
EMIT
(LOOP)
$FFF8
Varf-
@
OBRANCH
$0008
LIT
$002D
EMIT
ENDIF
TYPE
Finish

^DISPLAY-QUES
VarNDXlimit
@
Const0
(DO)
CR
CR
.''
$04
''Sig ''
)
LIT
$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarSIGQUE
)
+
@
TYPEdata
Const2
(+LOOP)
$FFF2
CR
.''
$04
''Ref ''
)
LIT
$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarREFQUE
)
+
@
TYPEdata
Const2
(+LOOP)
$FFF2
CR
.''
$04
''S/R ''
)
LIT
$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarS/RQUE
)
+
@
TYPEdata
Const2
(+LOOP)
$FFF2
LIT
$0014
(+LOOP)
$FF77
Finish

^DISPLAY-DATA
$226A
@
0=
OBRANCH
$0004
EXIT
ENDIF
DISPLAY-QUES
CR
.''
$05
''GAIN=''
VarGAINvlu
@
.
.''
$0A
''AVE[S/R]=GT''
@
.
.''
$07
'' %DLTA=''
Var%DIF
@
Const0
<#
#
#
LIT
$002E
HOLD
#S
#>
TYPE
.''
$0C
VarGAINexp
@
LIT
$0004
*
VarBLANKdata
+
@
.
CR
.''
$09
''AVE[Sig]=''
VarSIG[Ave]
@
.
.''
''<LF> AVE[Ref]=''
VarREF[Ave]
@
.
CR
CR
Finish

^TSTMSG
$2598
ConstDISPLAY2
w-TYPE
Const1
ConstDISPLAY2
$F530
Finish

^STOP
''STOPED
ConstDISPLAY1
w-TYPE
LIT
$FFFF
VarCALflg
!
SET-TESTrtn
BKliteON
BEGIN
$F18D
UPDATEkeyQ
Const0
OBRANCH
$FFF8
Finish

^PASSED
$26C0
LIT
$0006
LIT
$0013
ConstDISPLAY2
$F530
LIT
1000
DELAY[ms]
Finish

^FAIL
$26AE
LIT
$0004
LIT
$0015
ConstDISPLAY2
$F530
STOP
Finish

^LMPCHK
LIT
$0010
Var#PRIMES
!
PRIME-LAMP-CONTROL
LIT
$0032
'TrigDlyrefx
@
!
Const0
Var#LMPERR
!
LIT
$0000
LIT
$0000
LIT
$000A
Const0
(DO)
Const'FIRE-TEST
@
EXECUTE
GET[Ref]
Const0
D+
VarflMPERR
@
OBRANCH
$0008
Const1
Var#LMPERR
+!
ENDIF
(LOOP)
$FFE4
Finish

^SELFTEST
Const0
VarfABORT
!
Const0
Var#LMPERR
!
$F66B
Const3
$E6A8
$2572
ConstDISPLAY1
w-TYPE
$260E
ConstDISPLAY2
w-TYPE
Const2
$E6A8
$2635
$FACE
TSTMSG
$23F5
@
EXECUTE
1+
OBRANCH
$0008
FAIL
BRANCH
$0004
ELSE
PASSED
ENDIF
$264E
$FACE
TSTMSG
$240B
@
EXECUTE
1+
OBRANCH
$0008
FAIL
BRANCH
$0004
ELSE
PASSED
ENDIF
CLR-RAM
$2666
$FACE
TSTMSG
CHKRAM
0=
OBRANCH
$0008
FAIL
BRANCH
$0004
ELSE
PASSED
ENDIF
$267E
LIT
$000A
TSTMSG
LMPCHK
2DUP
CR
.''
$04
''REF=''
LIT
$000A
D/
D.
LIT
1000
LIT
$0000
D<
Var#LMPERR
@
DUP
.''
$0E
''LAMP FAILURES=''
.
LIT
$0005
>
OR
OBRANCH
$0008
FAIL
BRANCH
$0004
ELSE
PASSED
ENDIF
Finish

^?CLKerr
Const1
VarCLKERRcnt
+!
VarCLKERRcnt
@
LIT
1000
>
OBRANCH
$001D
CR
.''
$14
''CLOCK DATA RDY ERROR''
ENDIF
QUIT
Finish

^@TSTBYTE
TSTBYTE#
@CLKDTA
Finish

^!TSTBYTE
TSTBYTE#
!CLKDTA
Finish

^@RUNDLY
ConstRUNDLY#
@CLKDTA
LIT
$0100
*
ConstRUNDLY#
1+
@CLKDTA
OR
Finish

^!RUNDLY
DUP
LIT
$0100
/
ConstRUNDLY#
!CLKDTA
ConstRUNDLY#
1+
!CLKDTA
Finish

^@SMPL#
$53BA
@CLKDTA
LIT
$0100
*
$53C9
@CLKDTA
OR
Finish

^!SMPL#
LIT
$0100
/MOD
$53BA
!CLKDTA
$53C9
!CLKDTA
Finish

^+!SMPL#
@SMPL#
+
!SMPL#refx
Finish

^CNVRTdate
Constmonth
@CLKDTA
Const0
LIT
$0064
D*
ConstRTCday
@CLKDTA
Const0
D+
LIT
$0064
D*
ConstRTCyr
@CLKDTA
Const0
D+
<#
#
#
LIT
$002F
HOLD
#
#
LIT
$002F
HOLD
#S
#>
Finish

^CNVRTtime
ConstRTChrs
@CLKDTA
DUP
LIT
$007F
>
VarfPM
!
LIT
$007F
AND
Const0
LIT
$0064
D*
ConstRTCmin
@CLKDTA
Const0
D+
LIT
$0064
D*
ConstRTCsec
@CLKDTA
Const0
D+
<#
#
#
LIT
$003A
HOLD
#
#
LIT
$003A
HOLD
#S
#>
Finish

^!CLKBUFx
VarCLKBUF
+
1-
C!
Finish

^GET-SMPL#
ConstRTCday
@CLKDTA
DAY0refx
@CLKDTA
OVER
DAY0refx
!CLKDTA
<>
OBRANCH
$000A
Const1
!SMPL#refx
BRANCH
$0006
ELSE
Const1
+!SMPL#
ENDIF
@SMPL#
Finish

^CLKTST
BEGIN
STRTCLK
CR
.''
$01
''[''
CNVRTdate
TYPE
.''
$01
'' ''
CNVRTtime
TYPE
.''
$02
''] ''
LIT
$000E
LIT
$000A
(DO)
LIT
$0020
EMIT
)
@CLKDTA
Const0
HEX
<#
#
#
#>
DECIMAL
TYPE
.''
$01
''H''
(LOOP)
$FFE0
TERMINAL
DUP
OBRANCH
$000C
DROP
KEY
LIT
$001B
=
ENDIF
OBRANCH
$FFA9
Finish

^CLR-NUMBER
$F27B
$F21D
1+
$F23B
!
$F4DD
@
1+
VarMINx
@
(DO)
LIT
$0020
)
ConstDISPLAY2
$F554
(LOOP)
$FFF4
VarMINx
@
$F4DD
!
Finish

^get[num]
BEGIN
$F4DD
@
VarMAXx
@
>
OBRANCH
$000E
Const0
$F23B
!
Const0
VarfDP
!
BEGIN
$F912
OBRANCH
$FFFC
ENDIF
PCkey
LIT
$002F
OVER
<
OVER
LIT
$003A
<
AND
OBRANCH
$0038
$F23B
@
0=
OBRANCH
$0004
CLR-NUMBER
ENDIF
DUP
$F4DD
@
ConstDISPLAY2
$F554
Const1
$F4DD
+!
LIT
$005F
$F4DD
@
ConstDISPLAY2
$F554
DUP
$F23B
@
C!
Const1
$F23B
+!
ENDIF
$F4DD
@
VarMAXx
@
>
OBRANCH
$000E
LIT
$0020
$F4DD
@
ConstDISPLAY2
$F554
ENDIF
$F732
=
OBRANCH
$FF72
Finish

^SET-INITVLU
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
$0004
+
!
Finish

^GET[num]
$F27B
Const0
VarfDP
!
Const0
Varf+/-#
!
Const0
VarF#SGN
!
VarINITVLU
2@
VarINITVLU
LIT
$0004
+
@
F#CNVRT
2DUP
$F21D
1+
SWAP
CMOVE
VarMINx
@
ConstDISPLAY2
$F530
VarMINx
@
1+
VarMAXx
!
VarMAXx
@
1+
$F4DD
!
get[num]
$F21D
NUMBER
2DUP
VarINITVLU
2!
DROP
>R
DPL
@
Const0
MAX
MINUS
VarINITVLU
LIT
$0004
+
!
R>
Finish

^DaTmDSPLY
STOPCLK
CNVRTdate
LIT
$0006
LIT
$0008
ConstDISPLAY1
$F56E
CNVRTtime
LIT
$0011
LIT
$0008
ConstDISPLAY1
$F56E
STRTCLK
Finish

^?F3KEY
BEGIN
DaTmDSPLY
ConstRTCsec
@CLKDTA
VarSEC0
@
OVER
VarSEC0
!
<>
OBRANCH
$0004
DaTmDSPLY
ENDIF
$F912
DUP
OBRANCH
$0020
DROP
PCkey
$F70C
OVER
=
OVER
$F71E
=
OR
DUP
0=
OBRANCH
$0006
SWAP
DROP
ENDIF
ENDIF
OBRANCH
$FFC2
$F71E
=
Finish

^?CHNGtime
$2E76
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^?PM
$2E9C
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^?DaTmOK
$2E03
ConstDISPLAY1
w-TYPE
$2E50
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^NEWTIME
STOPCLK
Const0
ConstRTCsec
!CLKDTA
Const2
$F3DB
$2EEC
$FACE
DUP
2+
DUP
VarMINx
!
2+
VarMAXx
!
Const1
ConstDISPLAY2
$F530
Const0
BEGIN
DROP
ConstRTChrs
@CLKDTA
LIT
$007F
AND
SET-INITVLU
GET[num]
DUP
LIT
$000D
<
OBRANCH
$FFE6
VarTMPhrs
!
Const2
$F3DB
$2EFC
$FACE
DUP
2+
DUP
VarMINx
!
2+
VarMAXx
!
Const1
ConstDISPLAY2
$F530
Const0
BEGIN
DROP
ConstRTCmin
@CLKDTA
SET-INITVLU
GET[num]
DUP
LIT
$003C
<
OBRANCH
$FFEC
ConstRTCmin
!CLKDTA
?PM
OBRANCH
$000A
LIT
$0080
BRANCH
$0004
ELSE
Const0
ENDIF
VarTMPhrs
@
+
ConstRTChrs
!CLKDTA
STRTCLK
Finish

^NEWDATE
STOPCLK
Const2
$F3DB
$2EBF
$FACE
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
$F530
ConstRTCmonth
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCmonth
!CLKDTA
Const2
$F3DB
$2ECF
$FACE
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
$F530
ConstRTCday
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCday
!CLKDTA
Const2
$F3DB
$2EDD
$FACE
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
$F530
ConstRTCyr
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCyr
!CLKDTA
STRTCLK
Finish

^INIT-RTC
Binitrefx
SETbitrefx
OR
REGBrefx
!CLKDTA
Ainitrefx
REGArefx
!CLKDTA
REGCrefx
@CLKDTA
DROP
Const1
!SMPL#refx
REGDrefx
@CLKDTA
DROP
STRTCLK
Finish

^?CLKDTAok
REGDrefx
@CLKDTA
VTRbitrefx
AND
>
Finish

^DATE/TIME
BEGIN
LITEX
$FFFF
VarCALflg
!
STRTCLK
REGDrefx
@CLKDTA
VTRbitrefx
AND
OBRANCH
$0022
?DaTmOK
OBRANCH
$000A
Const0
VarCALflg
!
EXIT
?CHNGtime
OBRANCH
$0008
NEWTIME
BRANCH
$0004
ELSE
NEWDATE
ENDIF
BRANCH
$000E
INIT-RTC
''CLKRST
ConstDISPLAY1
w-TYPE
NEWDATE
NEWTIME
Const0
OBRANCH
$FFC4
Finish

^!PRNBUF1x
VarPRNBUF1
+
1-
C!
Finish

^CLR-PRNBUF1
LIT
$1318
VarPRNBUF1
(DO)
LIT
$0020
)
C!
(LOOP)
$FFF6
Const0
LIT
$1318
C!
Finish

^CLR-PRNBUF2
LIT
$1343
VarPRNBUF2
(DO)
LIT
$0020
)
C!
(LOOP)
$FFF6
Const0
LIT
$1343
C!
Finish

^BOLD
LIT
$001B
PRNTCHAR
LIT
$0047
PRNTCHAR
Finish

^BIG
LIT
$000E
PRNTCHAR
Finish

^BIGBOLD
$80EB
$80D5
Finish

^PNORMAL
LIT
$001B
PRNTCHAR
LIT
$0048
PRNTCHAR
Finish

^PRNTRDaT
$8080
$5511
$55A3
VarPRNBUF1
SWAP
CMOVE
$55EF
VarPRNBUF1
LIT
$000F
+
SWAP
2DUP
+
>R
CMOVE
$540D
@
OBRANCH
$0008
$2F1B
BRANCH
$0004
ELSE
$2F0D
ENDIF
$FACE
R>
SWAP
2DUP
+
>R
CMOVE
Const0
R>
1+
C!
$5533
Finish

^PRNanswer
$22A1
@
0=
OBRANCH
$0040
Var2DIGrslt
2@
DUP
0<
OBRANCH
$0008
LIT
$002D
PRNTCHAR
ENDIF
DABS
Var2DIGrslt
LIT
$0004
+
@
$2358
@
EXECUTE
$FF17
VarPPM/PPB
@
OBRANCH
$0008
$3027
BRANCH
$0004
ELSE
$3008
ENDIF
$FACE
$FF17
BRANCH
$0008
ELSE
$2BC7
$FACE
$FF17
ENDIF
$FEF9
Finish

^PRNCALDATA
$80AE
$2AF3
$FACE
VarPRNBUF2
C!
VarPRNBUF2
COUNT
CMOVE
$218A
COUNT
DUP
>R
VarPRNBUF2
COUNT
2+
DUP
>R
+
SWAP
CMOVE
R>
R>
+
VarPRNBUF2
C!
$2198
COUNT
DUP
>R
VarPRNBUF2
COUNT
2+
DUP
>R
+
SWAP
CMOVE
R>
R>
+
VarPRNBUF2
C!
$80D5
VarPRNBUF2
COUNT
$FF17
$FEF9
$8111
Finish

^PRINT-RESULTS
$FBA2
C@
$FBB3
AND
OBRANCH
$0004
EXIT
ENDIF
$80AE
$FEF9
$80D5
$2FEC
$FACE
$FF17
$8111
$23DF
@
EXECUTE
Const0
<#
#S
#>
$FF17
$FEF9
$24F0
@
EXECUTE
$81E6
$80D5
$2FAF
$FACE
$FF17
$8111
VarPRNBUF1
LIT
$000A
$FF17
$80D5
$2FC1
$FACE
$FF17
$8111
VarPRNBUF1
LIT
$000F
+
LIT
$000B
$FF17
$FEF9
$80D5
$2FD5
$FACE
$FF17
$8111
$8185
$FEF9
Finish

^COMNTS
$80D5
$3048
$FACE
DUP
>R
$FF17
$8111
LIT
$0028
R>
(DO)
LIT
$005F
PRNTCHAR
(LOOP)
$FFF8
LIT
$0006
Const0
(DO)
$FEF9
(LOOP)
$FFFC
Finish

^PRN-CALVLUS
$80AE
$80D5
$2F74
$FACE
$FF17
$FEF9
$8111
$80AE
VarCALIBVLU
2@
DUP
>R
DABS
VarCALIBVLU
LIT
$0004
+
@
F#CNVRT
LIT
$0004
MIN
VarPRNBUF2
R>
0<
OBRANCH
$000C
LIT
$002D
OVER
C!
1+
ENDIF
SWAP
2DUP
+
>R
CMOVE
VarPPM/PPB
@
OBRANCH
$0008
$2CD5
BRANCH
$0004
ELSE
$2CE4
ENDIF
$FACE
R>
1+
SWAP
CMOVE
VarBLNKVLU
2@
DUP
>R
DABS
2DUP
+
0=
OBRANCH
$000A
LIT
$FFFF
BRANCH
$000C
ELSE
VarBLNKVLU
LIT
$0004
+
@
ENDIF
F#CNVRT
LIT
$0004
MIN
VarPRNBUF2
LIT
$000F
+
R>
0<
OBRANCH
$000C
LIT
$002D
OVER
C!
1+
ENDIF
SWAP
2DUP
+
>R
CMOVE
VarPPM/PPB
@
OBRANCH
$0008
$2CD5
BRANCH
$0004
ELSE
$2CE4
ENDIF
$FACE
R>
1+
SWAP
CMOVE
$2144
@
Const0
<#
#S
#>
VarPRNBUF2
LIT
$0019
+
SWAP
2DUP
+
>R
CMOVE
$2F9F
$FACE
R>
SWAP
CMOVE
VarPRNBUF2
$FACE
$FF17
$FEF9
Finish

^PRINT-CALIB
$FEF9
$80AE
$80FF
$2DE8
$FACE
$FF17
$FEF9
$80D5
CFA
$24F0
@
EXECUTE
$80D5
$2F2C
$FACE
$FF17
$FEF9
$80D5
$2F54
$FACE
$FF17
$FEF9
$8111
VarPRNBUF1
$FACE
$FF17
$FEF9
$8317
$FEF9
$FEF9
$FEF9
$FEF9
Finish

^PRNTHDR
$812D
$8429
Finish

^INIT-PRINTER
LIT
$FFFF
$FC3D
!
$FC5D
$FBBE
$FBDA
!
Const0
$FC3D
!
LIT
$0018
PRNTCHAR
$FEF9
LIT
$0014
DELAY[ms]
$E608
LIT
$0028
LIT
$0000
D+
BEGIN
2DUP
$E608
D<
$FC07
@
$FC17
@
=
OR
OBRANCH
$FFEC
2DROP
$FEF9
Finish

^METHOD
Finish

^@METHODadr
$20F5
@
VarBYTES/METHOD
*
+
$20E7
+
Finish

^@MCKSUM
Const0
ConstMDELAY
@METHODadr
DUP
VarBYTES/METHOD
+
SWAP
(DO)
)
@
+
Const2
(+LOOP)
$FFF6
Finish

^CKSUM-METHOD
Const0
$8542
@METHODadr
!
$859A
LIT
$FFFF
XOR
$8542
@METHODadr
!
Finish

^SET-DEFAULTS
$856D
$20E7
VarBYTES/METHOD
$20F5
@
*
+
VarBYTES/METHOD
CMOVE
$55A3
$8535
@METHODadr
SWAP
CMOVE
$85C9
$856D
ConstMDELAY
+
@
$2144
!
$856D
$84FF
+
@
VarPPM/PPB
!
$856D
$850D
+
@
$215F
!
$856D
$851B
+
VarCALIBVLU
LIT
$0006
CMOVE
$856D
$8529
+
VarBLNKVLU
LIT
$0006
CMOVE
Finish

^RESET-METHODQ
''MQRESET1
ConstDISPLAY1
w-TYPE
''MQRESET2
ConstDISPLAY2
w-TYPE
PCkey
DROP
$86B2
ConstDISPLAY1
w-TYPE
$2598
ConstDISPLAY2
w-TYPE
$20E7
$210E
LIT
$FFFF
FILL
Const0
$20F5
!
SET-DEFAULTS
LIT
$55AA
$2102
!
Finish

^GET-DELAYTIME
$274A
ConstDISPLAY1
w-TYPE
$276F
ConstDISPLAY2
w-TYPE
$2144
@
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
$0004
+
!
$3A25
$2144
!
Finish

^GETUNITS
Const0
$3292
!
VarQAflg
@
OBRANCH
$000A
Const0
$215F
!
EXIT
ENDIF
$2CF7
ConstDISPLAY1
w-TYPE
$2D1F
ConstDISPLAY2
w-TYPE
Const0
DROP
PCkey
$F70C
OVER
=
OVER
$F71E
=
OR
OBRANCH
$FFEC
$F70C
=
$215F
!
LIT
$FFFF
$3292
!
Finish

^GET-DSPLYUNITS
Const0
$3292
!
$2C8B
ConstDISPLAY1
w-TYPE
$2CB1
ConstDISPLAY2
w-TYPE
Const0
DROP
PCkey
$F70C
OVER
=
OVER
$F71E
=
OR
OBRANCH
$FFEC
$F70C
=
VarPPM/PPB
!
LIT
$FFFF
$3292
!
Finish

^?CALvlu>BLNKvlu
>R
2DUP
LIT
$0DEC
@
VarCALIBVLU
2@
DROP
nF-
SWAP
DROP
Const0
<=
DUP
0=
OBRANCH
$0008
$291F
ConstDISPLAY1
w-TYPE
ENDIF
R>
SWAP
Finish

^GET-CAL-VALUE
$2796
ConstDISPLAY1
w-TYPE
VarPPM/PPB
@
OBRANCH
$0008
$280C
BRANCH
$0004
ELSE
$27E5
ENDIF
ConstDISPLAY2
w-TYPE
Const1
VarMINx
!
Const2
VarMAXx
!
Const0
Varf+/-#
!
VarCALIBVLU
2@
LIT
1000
LIT
$0000
$E07A
2DUP
VarCALIBVLU
2!
VarINITVLU
2!
LIT
$0DEC
@
LIT
$0004
MIN
LIT
$FFFC
MAX
LIT
$0E7C
!
VarINITVLU
LIT
$0004
+
@
LIT
$FFFF
<
OBRANCH
$0032
VarINITVLU
2@
VarINITVLU
LIT
$0004
+
@
ABS
Const1
(DO)
LIT
$000A
$E018
(LOOP)
$FFF8
VarINITVLU
2!
LIT
$FFFF
VarINITVLU
LIT
$0004
+
!
ENDIF
Const0
LIT
$0000
LIT
$0000
BEGIN
2DROP
DROP
$38FA
2DUP
LIT
$0000
LIT
$0000
d>
OBRANCH
$FFEC
ROT
>R
BEGIN
2DUP
LIT
1000
LIT
$0000
D<=
OBRANCH
$0014
LIT
$000A
D*
R>
1-
>R
Const0
BRANCH
$0006
ELSE
LIT
$FFFF
ENDIF
OBRANCH
$FFD8
R>
LIT
$0DEC
!
VarCALIBVLU
2!
Finish

^GET-BLANK-VALUE
$27BE
ConstDISPLAY1
w-TYPE
Const0
LIT
$0000
LIT
$0000
BEGIN
2DROP
DROP
VarPPM/PPB
@
OBRANCH
$0008
$280C
BRANCH
$0004
ELSE
$27E5
ENDIF
ConstDISPLAY2
w-TYPE
Const1
VarMINx
!
Const2
VarMAXx
!
LIT
$FFFF
Varf+/-#
!
VarBLNKVLU
2@
LIT
$FC18
LIT
$FFFF
$E061
2DUP
VarBLNKVLU
2!
VarINITVLU
2!
LIT
$0DF2
@
LIT
$0004
MIN
LIT
$FFFC
MAX
LIT
$0E7C
!
$38FA
$880F
OBRANCH
$FF9E
VarBLNKVLU
2!
LIT
$0DF2
!
Finish

^SETUP-METHOD
$2144
@
0<
$2144
@
LIT
1000
>
OR
OBRANCH
$0004
SET-DEFAULTS
ENDIF
GET-DELAYTIME
$87BF
Const0
VarQAflg
!
$8760
GET-CAL-VALUE
GET-BLANK-VALUE
$2136
ConstMDELAY
@METHODadr
LIT
$0012
CMOVE
$55A3
$8535
@METHODadr
SWAP
CMOVE
$85C9
Finish

^WAIT[VialIn]
$9024
$F18D
$32A3
$3AEF
C@
$3AFD
AND
0=
OBRANCH
$0016
LIT
$00FA
$E683
$3AEF
C@
$3AFD
AND
0=
BRANCH
$0004
GetVar
OBRANCH
$000E
LIT
$FFFF
VarfVIAL
!
BRANCH
$0008
GetVar
VarfVIAL
!
VarfVIAL
@
OBRANCH
$FFBA
BKliteON
Finish

^WAIT[VialOut]
GetVar
$F9E4
!
$F9E4
@
OBRANCH
$0010
$2347
@
EXECUTE
GetVar
$F9E4
!
$8F8D
$9013
@
0=
OBRANCH
$0004
$32A3
$9024
$F18D
$3AEF
C@
$3AFD
AND
0=
OBRANCH
$000A
LIT
$FFFF
BRANCH
$0012
LIT
$0064
$E683
$3AEF
C@
$3AFD
AND
0=
OBRANCH
$000E
LIT
$FFFF
VarfVIAL
!
BRANCH
$0008
GetVar
VarfVIAL
!
VarfVIAL
@
0=
OBRANCH
$FF96
GetVar
VarfVIAL
!
GetVar
$910B
!
BKliteON
Finish

^ACQUIRE-READING
Const0
VarfABORT
!
Const0
VarTRIGerr
!
$49D4
VarGAINexp
@
Const2
>
OBRANCH
$000A
LIT
$0008
BRANCH
$0006
LIT
$0004
1-
$40A6
!
$4131
$3EDE
CR
$92F4
2+
Const0
(DO)
$93C3
VarSUM[Rn]
2@
D+
VarSUM[Rn]
2!
Const1
VarCYCL[n]
+!
VarCYCL[n]
@
DUP
.
$40A6
@
>
OBRANCH
$0042
VarSUM[Rn]
2@
$40B2
@
$40BE
@
-
Const1
MAX
$E018
2DUP
$40E4
2!
$9300
Const0
D>
VarfABORT
@
OR
VarSUM[Rn]
2@
LIT
$0064
VarCYCL[n]
@
*
Const0
D<
OR
OBRANCH
$0004
LEAVE
(LOOP)
$FF9A
$40E4
2@
OBRANCH
$000A
DROP
Const0
BRANCH
$001E
DUP
0<
OBRANCH
$000A
DROP
Const0
BRANCH
$000E
LIT
$2710
SWAP
Const1
MAX
/
VarDlta
!
VarCYCL[n]
@
$92F4
>
LIT
$0064
$92F4
*
Const0
VarSUM[Rn]
2@
D<
AND
OBRANCH
$001B
CR
.''
$0E
''UNSTABLE DATA ''
Const0
BRANCH
$0006
LIT
$FFFF
$9048
!
$9379
Finish

^CALC-RESULTS
@AVE[S/R]
''R1
VarGAINexp
@
LIT
$0004
*
VarBLANKdata
+
2@
nF-
VarCALIBVLU
LIT
$0004
+
@
VarCALIBVLU
2@
DROP
VarBLNKVLU
LIT
$0004
+
@
VarBLNKVLU
2@
DROP
DUP
>R
OVER
>R
nF-
VarCALdata
2@
OVER
ABS
LIT
$0004
*
VarBLANKdata
+
2@
nF-
Const1
MAX
nF*/
VarCALdata
2@
DROP
ABS
LIT
$0004
*
VarDltaGains
+
2@
VarGAINexp
@
LIT
$0004
*
VarDltaGains
+
2@
nF*/
R>
R>
nF+
''R12
2DUP
VarnFresult
2!
2DUP
S->D
VarRESULTS
2!
LIT
$0E5A
!
S->D
j,d>2DIG
Finish

^DISPLAY-RESULTS
$22A1
@
OBRANCH
$000A
$2BC7
$F4BC
$F51E
EXIT
$2B5E
$F4BC
$F51E
Var2DIGrslt
2@
$910B
@
0=
OBRANCH
$000C
LIT
$0000
LIT
$0000
$E061
Const0
$F9F0
!
Const0
$910B
!
2DUP
Var2DIGrslt
2!
2DUP
$2284
2!
LIT
$0EBC
@
DUP
LIT
$0E5A
!
$9275
Finish

^DO-TEST
LIT
$0005
VarMAXx
!
$3B0C
OBRANCH
$003A
$2AA2
$F4BC
$F51E
$2598
$F4CB
$F51E
$9579
$3B0C
$9056
AND
OBRANCH
$0020
$9934
$99EC
$22A1
@
0=
OBRANCH
$0012
$812D
PRINT-RESULTS
VarfTEST
@
0=
OBRANCH
$0004
$82D7
$4F33
Finish

^METHODandCALIB
$8F16
$9788
Finish

^GAINSET
VarMINx
@
VarMINxSV
!
VarMAXx
@
VarMAXx
!
''SETGAIN1
ConstDISPLAY1
w-TYPE
''SETGAIN2
ConstDISPLAY2
w-TYPE
LIT
$0011
VarMINx
!
LIT
$0011
VarMAXx
!
VarGAINexp
@
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
$0004
+
!
Const0
Varf+/-#
!
$3944
DUP
VarGAINexp
!
Const0
OVER
<=
SWAP
Const3
<=
AND
OBRANCH
$FFBC
Const0
VarGAINexp
@
1+
Const0
(DO)
LIT
$000A
*
Const1
MAX
(LOOP)
$FFF4
$473B
VarMINxSV
@
VarMINx
!
VarMAXx
@
VarMAXx
!
Finish

^SHOW-RSLTS
ACQUIRE-READING
$4763
@
$33EE
LIT
$0005
ConstDISPLAY1
$F530
$4772
@
$33EE
LIT
$000E
ConstDISPLAY1
$F530
VarGAINexp
@
$33EE
LIT
$0018
ConstDISPLAY1
$F530
$4C79
@
0=
$4C85
@
0=
OR
$9048
@
0=
OR
VarfABORT
@
OR
$3C0A
@
$D844
OR
OBRANCH
$0014
$26FC
ConstDISPLAY2
w-TYPE
LIT
$FFFF
$AA38
!
BRANCH
$006A
$AA38
@
OBRANCH
$000E
$9EFC
ConstDISPLAY2
w-TYPE
Const0
$AA38
!
$4BC4
SWAP
DROP
S->D
LIT
$FFFC
$3516
LIT
$0006
MIN
LIT
$0006
ConstDISPLAY2
$F530
$220D
@
OBRANCH
$0026
$9934
VarRESULTS
2@
VarRESULTS
LIT
$0004
+
@
$3516
LIT
$0005
MIN
LIT
$0014
ConstDISPLAY2
$F530
BRANCH
$000E
$9F23
$FACE
LIT
$000D
ConstDISPLAY2
$F530
Finish

^LOOP-FIRE
Const0
LIT
$000A
Const0
(DO)
FIRE-LAMP
VarLMPERR
@
+
(LOOP)
$FFF6
Finish

^BADLMP-DET
$80D5
$B77C
$FACE
$FF17
$FEF9
$B72D
ConstDISPLAY1
w-TYPE
$25E5
ConstDISPLAY2
w-TYPE
BEGIN
PCkey
LIT
$000D
=
OBRANCH
$FFF6
$B7A5
LIT
$0007
<
$A50C
$B755
ConstDISPLAY2
w-TYPE
$917C
Finish

^TOGGLE
OVER
C@
XOR
SWAP
C!
Finish

^+ORIGIN
LIT
$C000
+
Finish

^1+
Const1
+
Finish

^2+
Const2
+
Finish

^ROT
>R
SWAP
R>
SWAP
Finish

^SPACE
ConstBL
EMIT
Finish

^MIN
OVER
OVER
>
OBRANCH
$0004
SWAP
ENDIF
DROP
Finish

^MAX
OVER
OVER
<
OBRANCH
$0004
SWAP
ENDIF
DROP
Finish

^-DUP
COLON
DUP
OBRANCH
$0004
DUP
ENDIF
Finish

^TRAVERSE
SWAP
BEGIN
OVER
+
ChrLit
$7F
OVER
C@
<
OBRANCH
$FFF1
SWAP
DROP
Finish

^LATEST
CURRENT
@
@
Finish

^LFA
ChrLit
$04
-
Finish

^CFA
ChrLit
$05
-
Const1
MINUS
TRAVERSE
Finish

^NFA
ChrLit
$05
-
Const1
MINUS
TRAVERSE
Finish

^PFA
Const1
TRAVERSE
ChrLit
$05
+
Finish

^CSP
USER
$0036
Finish

^!CSP
SP@
CSP
!
Finish

^?ERROR
SWAP
OBRANCH
$0008
ERROR
BRANCH
$0004
ELSE
DROP
ENDIF
Finish

^?COMP
STATE
@
0=
ChrLit
$11
?ERROR
Finish

^?EXEC
STATE
@
ChrLit
$12
?ERROR
Finish

^?PAIRS
-
ChrLit
$13
?ERROR
Finish

^?CSP
SP@
CSP
@
-
ChrLit
$14
?ERROR
Finish

^[
Const0
STATE
!
Finish

^]
ChrLit
$C0
STATE
!
Finish

^SMUDGE
LATEST
ChrLit
$20
TOGGLE
Finish

^COUNT
DUP
1+
SWAP
C@
Finish

^TYPE
-DUP
OBRANCH
$0018
OVER
+
SWAP
(DO)
)
C@
EMIT
(LOOP)
$FFF8
BRANCH
$0004
ELSE
DROP
ENDIF
Finish

^TRAILING
DUP
Const0
(DO)
OVER
OVER
+
Const1
-
C@
BLrefx
-
OBRANCH
$0008
LEAVE
BRANCH
$0006
ELSE
Const1
-
ENDIF
(LOOP)
$FFE0
Finish

^?STACK
ChrLit
$12
+ORIGIN
@
Const2
1-
SP@
<
Const1
?ERROR
SP@
LIT
$0300
ChrLit
$20
+
<
OBRANCH
$0006
Const2
?ERROR
ENDIF
Finish

^EXPECT
OVER
+
OVER
(DO)
KEY
DUP
ChrLit
$0E
+ORIGIN
@
=
OBRANCH
$0029
DROP
ChrLit
$08
EMIT
ChrLit
$20
EMIT
ChrLit
$08
OVER
)
=
DUP
R>
Const2
1-
+
>R
1-
BRANCH
$0027
ELSE
DUP
ChrLit
$0D
=
OBRANCH
$000E
LEAVE
DROP
ConstBL
Const0
BRANCH
$0004
ENDIF
DUP
)
C!
Const0
)
1+
!
ENDIF
EMIT
(LOOP)
$FF9F
DROP
Finish

FILL:
SWAP
>R
OVER
C!
DUP
1+
R>
Const1
-
CMOVE
Finish

^ERASE
Const0
FILL
Finish

^BLANKS
BLrefx
FILL
Finish

^HOLD
LIT
$FFFF
HLDrefx
+!
HLDrefx
@
C!
Finish

^PAD
HERE
ChrLit
$44
+
Finish

^FIND
BLrefx
WORD
HERE
CONTEXT
@
@
(FIND)
DUP
0=
OBRANCH
$000A
DROP
HERE
LATEST
(FIND)
ENDIF
Finish

^CREATE
-FIND
OBRANCH
$0015
DROP
LIT
$0007
EMIT
NFA
$CDE4
ChrLit
$04
MESSAGE
SPACE
ENDIF
HERE
DUP
C@
UsrWIDTH
@
MIN
1+
ALLOT
DUP
ChrLit
$A0
TOGGLE
HERE
Const1
-
ChrLit
$80
TOGGLE
LATEST
,
CURRENT
@
!
HERE
2+
,
Finish

^QUIT
Const0
BLK
!
[
RP!
CR
QUERY
INTERPRET
STATE
@
0=
OBRANCH
$0008
.''
$03
'' OK''
BRANCH
$FFE6
Finish

^ABORT1
SP!
DECIMAL
?STACK
Const0
OFFSET
!
CR
.''
$22
''Oxbridge FORTH79/6800  3/8/90''
CR
.''
$1E
''(C) 1989,1990 by Oxbridge Inc.''
$0562
DEFINITIONS
Finish

^ABORT
ABORT1
QUIT
Finish

^BOOT
ABORT1
ConstVBOOT
@
EXECUTE
QUIT
Finish

^S->D
DUP
0<
MINUS
Finish

^STATE
USER
$002C
Finish

^/MOD
DUP
0<
>R
ABS
SWAP
DUP
0<
>R
ABS
S->D
ROT
U/
SWAP
)
OBRANCH
$0004
MINUS
ENDIF
SWAP
R>
R>
XOR
OBRANCH
$0004
MINUS
ENDIF
Finish

^*/MOD
>R
U)
R>
U/
Finish

^*/
*/MOD
SWAP
DROP
Finish

^M/MOD
>R
Const0
R
U/
R>
SWAP
>R
U/
R>
Finish

^ABS
DUP
0<
OBRANCH
$0004
MINUS
ENDIF
Finish

^DABS
DUP
0<
OBRANCH
$0004
DMINUS
ENDIF
Finish

^'
-FIND
0=
Const0
?ERROR
DROP
LITERAL
Finish

^BEGIN
?COMP
HERE
Const1
Finish

^ENDIF
?COMP
Const2
?PAIRS
HERE
OVER
-
SWAP
!
Finish

^THEN
ENDIF
Finish

^DO
COMPILE
(DO)
HERE
Const3
Finish

^LOOP
Const3
?PAIRS
COMPILE
(LOOP)
$D49F
Finish

^+LOOP
Const3
?PAIRS
COMPILE
(+LOOP)
$D49F
Finish

^UNTIL
Const1
?PAIRS
COMPILE
OBRANCH
$D49F
Finish

^END
$D528
Finish

^AGAIN
Const1
?PAIRS
COMPILE
BRANCH
$D49F
Finish

^REPEAT
>R
>R
$D54A
R>
R>
Const2
-
ENDIF
Finish

^IF
COMPILE
OBRANCH
HERE
Const0
,
Const2
Finish

^ELSE
Const2
?PAIRS
COMPILE
BRANCH
HERE
Const0
,
SWAP
Const2
ENDIF
Const2
Finish

^WHILE
IF
2+
Finish

^SPACES
Const0
MAX
-DUP
OBRANCH
$000C
Const0
(DO)
SPACE
(LOOP)
$FFFC
ENDIF
Finish

^<#
PAD
HLDrefx
!
Finish

^#>
DROP
DROP
HLDrefx
@
PAD
OVER
-
Finish

^SIGN
ROT
0<
OBRANCH
$0007
ChrLit
$2D
HOLD
ENDIF
Finish

^#
BASE
@
M/MOD
ROT
ChrLit
$09
OVER
<
OBRANCH
$0007
ChrLit
$07
+
ENDIF
ChrLit
$30
+
HOLD
Finish

^#S
BEGIN
#
OVER
OVER
OR
0=
OBRANCH
$FFF4
Finish

^.R
>R
S->D
R>
D.R
Finish

^D.R
>R
SWAP
OVER
DABS
<#
#S
SIGN
#>
R>
OVER
-
SPACES
TYPE
Finish

^D.
Const0
D.R
SPACE
Finish

^.
S->D
D.
Finish

^?
@
.
Finish

^EXIT
R>
DROP
Finish

^@RUNHR
LIT
$0210
C@
Finish

^@RUNMIN
LIT
$0211
C@
Finish

^@RUNSEC
LIT
$0212
C@
Finish

^@RUN10TH
LIT
1000
LIT
TickCtr
@
-
LIT
$0064
/
Finish

^#RUNmsec
LIT
1000
LIT
TickCtr
@
-
Finish

^WRTc1
LIT
$DDF5
NFA
1+
C!
DUP
LIT
$DE1B
NFA
1+
C!
LIT
$DE2D
NFA
1+
C!
Finish

^D*
DUP
>R
OVER
>R
>R
DABS
R>
ABS
SWAP
OVER
*
>R
U)
Const0
R>
D+
R>
R>
XOR
0<
OBRANCH
$0004
ENDIF
DMINUS
Finish

^D/
DUP
0=
OBRANCH
$0006
DROP
Const1
ENDIF
OVER
>R
>R
DABS
R
ABS
/MOD
ROT
ROT
R
ABS
M/MOD
ROT
DROP
ROT
Const0
SWAP
D+
R>
R>
XOR
0<
OBRANCH
$0004
DMINUS
ENDIF
Finish

^DMAX
2OVER
2OVER
D<
OBRANCH
$0004
2SWAP
ENDIF
2DROP
Finish

^DMIN
2OVER
2OVER
d>
OBRANCH
$0004
2SWAP
ENDIF
2DROP
Finish

^nF/
LIT
$8001
MAX
>R
>R
LIT
$8001
MAX
R>
R>
DUP
0=
OBRANCH
$0016
2DROP
2DROP
LIT
$FFFF
$E13F
!
LIT
$000A
Const1
EXIT
ENDIF
DUP
Varsgn2
!
SWAP
VarJ2
!
ABS
LIT
$0010
Const0
(DO)
)
$E129
!
DUP
LIT
$3E80
>
OBRANCH
$0008
LEAVE
BRANCH
$0004
ELSE
2*
ENDIF
(LOOP)
$FFE4
>R
DUP
Varsgn1
!
SWAP
VarJ1
!
ABS
LIT
$0010
Const0
(DO)
)
$E120
!
DUP
LIT
$3E80
>
OBRANCH
$0008
LEAVE
BRANCH
$0004
ELSE
*
ENDIF
(LOOP)
$FFE4
LIT
$2710
LIT
$FFFC
VarJ1
+!
R>
*/
$E129
@
$E120
@
-
DUP
>
OBRANCH
$0028
LIT
$0006
*
$E0EF
+
DUP
LIT
$0004
+
@
VarJ1
+!
DUP
2+
@
SWAP
@
*/
Const0
ENDIF
DUP
0<
OBRANCH
$0036
ABS
LIT
$0006
*
$E0EF
+
DUP
LIT
$0004
+
@
1-
MINUS
VarJ1
+!
DUP
@
LIT
$000A
/
SWAP
2+
@
*/
BRANCH
$0004
ELSE
DROP
ENDIF
Varsgn1
@
Varsgn2
@
XOR
0<
OBRANCH
$0004
MINUS
ENDIF
VarJ1
@
VarJ2
@
-
SWAP
Finish

^nF*
LIT
$8001
MAX
>R
>R
LIT
$8001
MAX
R>
R>
DUP
0=
OBRANCH
$0016
2DROP
2DROP
LIT
$FFFF
$E13F
!
LIT
$000A
Const1
EXIT
ENDIF
DUP
Varsgn2
!
SWAP
VarJ2
!
ABS
>R
DUP
Varsgn1
!
SWAP
VarJ1
!
ABS
Const0
R>
D*
BEGIN
2DUP
LIT
$7FFE
LIT
$0000
d>
OBRANCH
$001A
LIT
$000A
M/MOD
Const1
VarJ1
+!
ROT
$E131
!
Const0
BRANCH
$0006
ELSE
LIT
$FFFF
ENDIF
OBRANCH
$FFD2
DROP
$E131
@
LIT
$0004
>
OBRANCH
$0004
1+
ENDIF
Varsgn1
@
Varsgn2
@
XOR
0<
OBRANCH
$0004
MINUS
ENDIF
VarJ1
@
VarJ2
@
+
SWAP
Finish

^nF-
DUP
0<
OBRANCH
$000A
LIT
$FFFF
BRANCH
$0004
ELSE
Const0
n2
ENDIF
2!
VarJ2
!
DUP
0<
OBRANCH
$000A
LIT
$FFFF
BRANCH
$0004
ELSE
Const0
ENDIF
Varn1
2!
VarJ1
!
VarJ1
@
VarJ2
@
-
DUP
>
OBRANCH
$0024
DUP
Varn1
2@
ROT
Const0
(DO)
LIT
$000A
D*
(LOOP)
$FFF8
Varn1
2!
VarJ2
@
VarJ1
!
ENDIF
DUP
0<
OBRANCH
$0026
DUP
ABS
n2
2@
ROT
Const0
(DO)
LIT
$000A
D*
(LOOP)
$FFF8
n2
2!
VarJ1
@
VarJ2
!
ENDIF
DROP
Varn1
2@
n2
2@
$DF7B
DUP
>R
DABS
LIT
$000A
D*
LIT
$FFFF
VarJ1
+!
BEGIN
Const1
VarJ1
+!
LIT
$000A
D/
2DUP
LIT
$7FFF
LIT
$0000
D<=
OBRANCH
$FFE6
DROP
R>
0<
OBRANCH
$0004
MINUS
ENDIF
VarJ1
@
SWAP
Finish

^nF+
MINUS
nF-
Finish

^nF*/
DUP
VarFsgn
!
ABS
$E45A
2!
DUP
VarFsgn
@
XOR
VarFsgn
!
ABS
n2
2!
DUP
VarFsgn
@
XOR
VarFsgn
!
ABS
Varn1
2!
Varn1
2+
@
n2
2+
@
+
$E45A
2+
@
-
$E45A
2+
!
Varn1
@
S->D
n2
@
D*
$E45A
@
D/
2DUP
LIT
$7530
LIT
$0000
d>
OBRANCH
$003C
BEGIN
LIT
$000A
M/MOD
ROT
Varn1
!
Const1
LIT
$05DC
+!
2DUP
LIT
$7530
LIT
$0000
D<
OBRANCH
$FFDE
Varn1
LIT
$0004
>
OBRANCH
$000C
LIT
$0001
LIT
$0000
D+
ENDIF
ENDIF
DROP
LIT
$05DC
@
SWAP
VarFsgn
@
0<
OBRANCH
$0004
MINUS
ENDIF
Finish

^CLRtimer
Const0
ConstmsTIMER
!
Finish

^DELAY[ms]
Const0
MAX
CLRtimer
BEGIN
DUP
ConstmsTIMER
@
<=
OBRANCH
$FFF6
DROP
Finish

^CLR-CHRBUF1
$F20F
$F201
+
$F20F
(DO)
LIT
$0020
)
C!
(LOOP)
$FFF6
$F20F
$F22C
!
Finish

^CLR-CHRBUF2
$F21D
$F201
+
$F21D
(DO)
LIT
$0020
)
C!
(LOOP)
$FFF6
$F21D
$F23B
!
Finish

^''
LIT
1000
LIT
TickCtr
@
-
DUP
LIT
$1111
LIT
$2222
*
+
LIT
Havis
/
1+
2+
1-
LIT
Data1
LIT
Addr1
!
Finish

^'''
LIT
First
LIT
Second
SWAP
DROP
DROP
LIT
First
LIT
Second
LIT
Third
ROT
=
Var#OUTLYERS
ConstRTCday
SP@
Finish

^''''
LIT
First
LIT
Second
OVER
A/DCNVRT
>R
R>
Finish

