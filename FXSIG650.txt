( A/D PARAMETERS                               12:40 07/15/89 )
HEX ALL OF THE FOLLOWING Values TO MUX CONTROL are in HEX
7002 CONSTANT A/DHiByte 
7001 CONSTANT A/DlowByte
7002 CONSTANT A/Dstatus
0 VARIABLE ACQcntrl
7002 CONSTANT VIALSWI/O 
20 CONSTANT VIALbit

: ?VIAL-IN VIALSWI/O C@ VIALbit AND 0= DUP fVIAL ! ;
: ?VIAL-OUT VIALSWI/O C@ VIALbit AND DUP 0= fVIAL ! 0<> ;

0 VARIABLE LMPstat 
0 VARIABLE BTST  
0 VARIABLE A/Ddta

( GAIN CONTROL BIT DEFINITIONS                                )
0 VARIABLE GAINvlu 
0 VARIABLE GAINexp                           
7 CONSTANT X1 
6 CONSTANT X10 
4 CONSTANT X100 
0 CONSTANT X1000 
( MUX CONTROL BIT DIFINITIONS                                 )
90 CONSTANT REFchan  
50 CONSTANT SIGchan  
30 CONSTANT LMPinten   
0 CONSTANT Agnd
DECIMAL The following Numbers would be DECIMAL except the next Command changed them back to HEX

( LAMP CONTROL                                 07:30 07/20/89 )
HEX ALL OF THE FOLLOWING Values TO MUX CONTROL are in HEX
7002 CONSTANT ACQRI/O    
0 VARIABLE ACQRmode  
0 VARIABLE LMPERR ( 40 CONSTANT TESTmode ) 
0 CONSTANT RUNmode  
0 VARIABLE fLMPERR   
60 CONSTANT TESTmode  
20 CONSTANT OSmode                        
80 CONSTANT STARTacqr 
7F CONSTANT LMPreset 
0 VARIABLE #LMPERR   
40 CONSTANT LMPDtaRdy                                            
0 VARIABLE TRIGerr                                              
0 VARIABLE TRIGDLY
DECIMAL The following Numbers are DECIMAL

: TRIGER-LAMP LMPstat @ LMPreset AND ( Set bit for lamp HV reset)
Place LMPstat on Stack (@) then AND with LMPreset (7F)
DUP ACQRI/O C! TRIGDLY @ 50 MAX DELAY[ms] 
Place bottom 8 bits in ACQRI/O , Place TRIGDLY on Stack Then Delay for the greater of TRIGDLY or 50
 ( Wait for HV recharge)(                 50 DELAY[ms]          ( Wait for HV recharge)
STARTacqr OR DUP LMPstat ! ACQRI/O C! ; ( Fire lamp)
STARTacqr = 80 OR DUPLICATE and place in LMPstat place HEX 7002 in Stack

COMMENT LMPstat Placed on Stack ANDED with LMPreset Then DUP leave a copy on the stack and store LSB in ACQRI/O 


( LAMP CONTROL                                 06:52 02/05/90 )
: LMPFAIL -1 fABORT ! -1 TRIGerr ! fTEST @ 0=                     
IF "LMPFAIL1 DISPLAY1 w-TYPE ( ** WAIT-ENT*) THEN ;

: FIRE-LAMP 0 LMPERR ! -1 fLMPERR !
BEGIN TRIGER-LAMP  0 BEGIN 1+ DUP  10 >   
( Wait for dta rdy or timeout error)             
A/DStatus C@ 255 XOR LMPDtaRdy AND OR
?VIAL-OUT IF -1 DUP fABORT ! ELSE 0 THEN OR UNTIL 10 >
IF 1 LMPERR +! 1 #LMPERR +! LMPERR @  3 > IF LMPFAIL THEN       
ELSE 0 fLMPERR ! THEN 
fLMPERR @ 0= fABORT @ OR                                      
UNTIL                                                           
LMPERR @ 0>                                                     
IF CR LMPERR @ . ." DATA READY ERROR(s) " CR THEN ;

( GAIN AND MUX CONTROL ASSEMBLY CODE           08:29 07/06/89 )
DECIMAL 0 VARIABLE Rtn  
0 VARIABLE TmpX                                 
CODE @GAINCode      ( --   Xcode in A & B subroutine call only)   
0 # LDX, GAINexp STX,         ( Preset gain exponent to zero)   
X1 # LDX, .B CLR,                        ( Preset for gain=1)   
GAINvlu 1+ .A LD,              ( Read the gain value desired)   
1000 # .A CMP, 0= IF, X1000 # LDX, 3 # .B LD, ENDIF,             
100 # .A CMP, 0= IF,  X100 # LDX, 2 # .B LD, ENDIF,              
10 # .A CMP, 0= IF,   X10 # LDX, 1 # .B LD, ENDIF,            
TmpX STX, GAINexp 1+ .B ST,                                     
TmpX .A LD, TmpX 1+ .B LD,          ( Put gain bits in A & B)   
RTS,
FORTH
( SET ANALOG CONTROL ASSEMBLY CODE             07:05 09/23/89 ) 
CODE SET-ANALOG-Cntrl 
' @GAINCode JSR,           ( Rtn with gain bit code in A & B)   
MUXset 1+ .B OR, ( **BKlite 1+**) BKLITEbit # .B OR,            
MUXstat 1+ .B ST, CHANmux .B ST, NEXT,                        
FORTH
( LAMP PRIME                                   13:22 11/03/89 ) 
0 VARIABLE SIG[Offset] 
0 VARIABLE SVstat                        
0 VARIABLE 'GET[Sig]                                            
0 VARIABLE #PRIMES                                              
HEX
: SET[Offset] LMPstat @ DUP SVstat !   ( Save original LMPstat)
9F AND 20 OR LMPstat ! ;    ( Then set for OFFSET measure) 
: SET[Normal] SVstat @ LMPstat ! ;         ( Reset NORMAL mode) 
DECIMAL                                                         
: PRIME-LAMP-CONTROL ( Fire lamp to establish lamp control sig)   
#PRIMES @ 0 DO TRIGER-LAMP LOOP ;                                                                                                                                                                                                                                                                                                                                                             ( A/D ASSEMBLY CODE                            16:05 06/27/89 ) 
0 VARIABLE Temp
0 VARIABLE rtn  
                                
HEX   Handle the Following in HEX                                                          
CODE A/D! ( A,B=A/Ddta --  Subroutine call only) 
   CODE A/D! Define A/D! as a dictionary entry, use Assembly Lang                 
LMPstat 1+ .A LD, F0 # .A AND,                                  
A/Ddta .A OR, A/DHiByte .A ST,                                  
A/Ddta 1+ .B LD, A/DLowByte .B ST,                              
RTS, CODE A/D>LMPstat ( A,B=A/D data )                                    
0F # .A AND,                                                    
LMPstat 1+ .B LD, F0 .B AND,                                    
ABA, LMPstat 1+ .A ST,                                          
RTS, DECIMAL FORTH
                                                                                                                                                                                   ( A/D ASSEMBLY CODE                            16:05 06/27/89 ) 
HEX
0 VARIABLE LOOPcntr
                                         
CODE A/DCNVRT ( -- n) 0C # .A LD, LOOPcntr .A ST,                   
800 #  LDX, BTST STX, 0 # LDX, A/Ddta STX,                      
BEGIN, A/Ddta .A LD, A/Ddta 1+ .B LD,                             
BTST .A OR, BTST 1+ .B OR,                                      
A/Ddta .A ST, A/Ddta 1+ .B ST,                                  
' A/D! JSR, A/DStatus .A LD, 0< NOT                             
IF, A/Ddta .A LD, A/Ddta 1+ .B LD,                                  
BTST .A EOR, BTST 1+ .B EOR,                                    
A/Ddta .A ST, A/Ddta 1+ .B ST, ENDIF,                       
CLC, BTST ROR, BTST 1+ ROR,                                     
LOOPcntr DEC, LOOPcntr .A LD, 0= UNTIL,                         
A/Ddta .A LD, A/Ddta 1+ .B LD, PUSHD,                           
' A/D>LMPstat JSR, NEXT,                                  
DECIMAL FORTH  
                                                 
( GAIN MEASUREMENT                             08:04 10/23/89 ) 
0 VARIABLE DltaGains
20 ALLOT-RAM Allot 20 words of RAM to DltaGains                              
: SCALE-GAIN ( n -- exp,N) 0 SWAP -4 1000 0 DltaGains @ nF*/ ;  
   Swap 0 and -4 1000 0 Leave DltaGains                                                             
: DSPLYGc's                ( Display correction factors on CRT)   
CR ." Gain factors Gc0,Gc1,Gc2,Gc3 "                            
[ DltaGains 16 + ] LITERAL DltaGains  
  LITERAL if compiling, compile stack val n as 16bit literal when executed will leave n on stack                        
DO ( DUP) I 2@ 0 ROT FORMAT-ANSWER SPACE TYPE 4 +LOOP ;
DoLoop I 2@ Leave in the stack the contents of the 4 consec bytes beinning at addr,for a double number
ROT  Rotates the top 3 values bringing the deepst to the top
: FORMAT-ANSWER ( d,j -- adr,cnt) OVER >R >R DABS R> (This is from FxPanel.650)                
F#CNVRT OUTBUF 1+ SWAP DUP 1+ >R CMOVE                         
 R> R> 0< IF 45 ELSE 32 THEN OUTBUF C! OUTBUF SWAP ;
SPACE Transmits ASCII Blank to output device, TYPE Transmits n characters beginning at addr if n>0 Loops by 4 
    
0 VARIABLE s0                                                   
: FORMAT-GAIN ( n10 -- adr,cnt) 0 SWAP -2 100 0 s0 @ nF*/
0 ROT FORMAT-ANSWER  ;                                        
: TYPEGAINS ."   GAIN " DUP FORMAT-GAIN TYPE ;                                                                                                                                                                                                                                                                                  (                                                16:32 05/10/81 )
0 VARIABLE CYCL[n] 
0 VARIABLE MINSMPL#                          
0 VARIABLE R[Hi]  
0 VARIABLE R[Lo]  
0 VARIABLE Dlta             
0 VARIABLE SUM[Rn] 4 ALLOT-RAM   
0 VARIABLE 1/Dlta 4 ALLOT-RAM  
50 CONSTANT #GTRIES 
1000 CONSTANT GLimit ( .1% )                
0 VARIABLE fNFg>Lim  
0 VARIABLE fOffset                         
: INIT-SIGFILTER 0. SUM[Rn] 2! 0 R[Hi] ! 32767 R[Lo] ! 0 CYCL[n] ! ;
: TYPE-%Dlta   <# # # 46 HOLD #S #> TYPE ;                     
( : GTYPE-RAWDTA ."  { SUMSIG=" SUM[Rn] 2@ D.                   (   ."   Hi-Lo=" R[Hi] @ R[Lo] @ - . ."  }" ;                   : GTYPE-ALL CR SUM[Rn] 2@ CYCL[n] @ 8 * D/                        ." GAINSIG=" D.                                                 ."  %DLTA=" Dlta @ 0 TYPE-%Dlta ( 4 SPACES GTYPE-RAWDTA) ;
                                                                                                                                    (                                                13:53 05/10/81 )
: @TEST-SIG ( -- n Sum of 8 readings0  0   8 0 
DO FIRE-LAMP A/DCNVRT + LOOP                            
DUP R[Hi] @ > IF DUP R[Hi] ! THEN                               
DUP R[Lo] @ < IF DUP R[Lo] ! THEN 0 ;
                                                                                                                                                         : CHK-GAINok
1/Dlta 2@ IF DROP 0 ELSE DUP 0< IF DROP 0 ELSE 10000 SWAP 1 MAX / THEN
THEN Dlta ! GTYPE-ALL                                           
CYCL[n] @ #GTRIES > 100 #GTRIES * 0 SUM[Rn] 2@ D< AND           
IF -1 fNFg>Lim ! 0. SUM[Rn] 2!                                     
CR ." UNSTABLE GAIN DATA " CR THEN ;
                                                                                                                                                       (                                                16:31 05/10/81 

: GET-TEST-SIG ( -- n) INIT-SIGFILTER                             
SPACE #GTRIES 2+ 0                                              
DO @TEST-SIG SUM[Rn] 2@ D+ SUM[Rn] 2!                              
1 CYCL[n] +! CYCL[n] @ DUP . MINSMPL# @ >                       
IF SUM[Rn] 2@ R[Hi] @ R[Lo] @ - 1 MAX D/ 2DUP 1/Dlta 2!            
GLimit 0 D> fABORT @ OR                                         
SUM[Rn] 2@ 400. D< fOffset @ AND OR                             
IF LEAVE THEN THEN                                        
LOOP CHK-GAINok SUM[Rn] 2@ CYCL[n] @ 8 * D/ DROP ;            

: READtest CR ." Sig " 0 fOffset ! GET-TEST-SIG ;               

: READoffset CR ." Offset "                                       
SET[Offset] 7 MINSMPL# ! -1 fOffset !                           
GET-TEST-SIG SET[Normal] ;
                                                                                                                                                                    ( GAIN MEASUREMENT                             08:04 10/23/89 )
: SETtestSIG ( Set test signal input) LMPstat @ TESTmode OR LMPstat ! ;

: SETnormalSIG ( Set normal detector signal input)   LMPstat @ TESTmode 255 XOR AND  LMPstat ! ;
: @TEST[sig0] SIGchan  7 OR BKLITEbit OR DUP MUXstat ! CHANmux C! 8 1- MINSMPL# ! READtest READoffset - ;
: @TEST[sig1] MUXstat @ 7 OR 1 XOR DUP MUXstat ! CHANmux C!       3 MINSMPL# ! READtest READoffset - ;                          : @TEST[sig2] MUXstat @ 7 OR 2 XOR DUP MUXstat ! CHANmux C!       3 MINSMPL# ! READtest READoffset - ;                          : @TEST[sig3] MUXstat @ 7 OR 4 XOR DUP MUXstat ! CHANmux C!       3 MINSMPL# ! READtest READoffset - ;
                                                                                                                                                                                                                          0 VARIABLE fGERR                                                
"STRNG" "RNGERR  | GAIN RANGE ERROR        |
                    
: Stop "STOPED DISPLAY1 w-TYPE                                   
-1 CALflg ! SET-TESTrtn  ( Disable RECAL key & force rtn here)   
BKliteON BEGIN ?BKliteOFF UPDATEkeyQ 0 UNTIL ;

: EVALGAIN ( n --   fGERR updated) DUP  9 < SWAP 12 > OR fNFg>Lim @ OR fGERR @ OR fGERR ! ;
Leave copy of top of Stack IF value <9 or >12 or fNFg>Lim true or fGERR true THEN fGERR TRUE
: GAINTEST ( -- f) fGERR @ IF "RNGERR DISPLAY2 w-TYPE Stop THEN ;
IF fGERR True then Send String RNGERR "GAIN RANGE ERROR" to DISPLAY2 w-TYPE STOP
                                                                                                                                                                                                                                                                                                                                                                                                                        ( GAIN MEASUREMENT                             11:29 09/23/89 )
: CALC-GAINS  0 fGERR ! 0 fNFg>Lim ! PRIME-LAMP-CONTROL           
SETtestSIG  ( Set test mode)   
CR ." Test Signals G0,G1,G2,G3 "                                
@TEST[sig0] DUP >R DUP s0 ! DltaGains !                         
@TEST[sig1] TYPEGAINS DUP R / EVALGAIN                          
SCALE-GAIN DltaGains 4 + 2!                  ( Gc10)            
@TEST[sig2] TYPEGAINS DUP R / EVALGAIN                          
SCALE-GAIN DltaGains 4 + 2@ -4 10000 nF*/                       
DltaGains 8 + 2!                            ( Gc100)            
@TEST[sig3] TYPEGAINS DUP R> / EVALGAIN                         
SCALE-GAIN DltaGains 8 + 2@ -4 10000 nF*/                       
DltaGains 12 + 2!                          ( Gc1000)            
SETnormalSIG                               ( Set normal mode)   
-4 10000 DltaGains 2! DSPLYGc's   ( Set Gc0=1.0000 & display)   GAINTEST ;

 ( Check that gains OK) 
( SIGNAL/REFERENCE CHANNEL READ                10:46 10/25/89 ) 
: GET[Sig] ( --n) SIGchan MUXset ! SET-ANALOG-Cntrl A/DCNVRT ;
  ' GET[Sig] CFA 'GET[Sig] !                                      
: GETAVE  0. 10 0 DO FIRE-LAMP GET[Sig] 0 D+                        
?VIAL-OUT fABORT @ OR IF LEAVE THEN LOOP 10 D/ DROP ;

: UPDATE-OFFSET SET[Offset] GETAVE SET[Normal] SIG[Offset] ! ;  
: GET[Ref] ( --n) REFchan MUXset ! SET-ANALOG-Cntrl A/DCNVRT ;  
: AGCGAIN PRIME-LAMP-CONTROL    ( Allow cntrl loop to stablize)     
CR ." -AGC-  GAIN/SIG " 0 GAINvlu !                             
BEGIN GAINvlu @ 10 * 1 MAX GAINvlu ! GET[Sig] DROP                    
GETAVE UPDATE-OFFSET SIG[Offset] @ -                             
." , " GAINvlu @ . ." / " DUP .                                 
300 > GAINvlu @ 1000 >= OR                                      
GAINexp @ GAINlimit @ >= OR fABORT @ OR UNTIL ;      

: SETGAIN  ( n -- ) 1 MAX GAINvlu ! SET-ANALOG-Cntrln) 0.  50 0 DO FIRE-LAMP A/DCNVRT 0 D+ LOOP   2DUP  50 D/ D. 7 D/ DROP ;                                    : READtest CR ." Sig " GET-TEST-SIG ;
: READoffset ." Offset " SET[Offset] GET-TEST-SIG SET[Normal] ; 
: @TEST[sig0] SIGchan  7 OR BKLITEbit OR DUP MUXstat ! CHANmux C! READtest READoffset - ;
: @TEST[sig1] MUXstat @ 7 OR 1 XOR DUP MUXstat ! CHANmux C!       READtest READoffset - ;                                       : @TEST[sig2] MUXstat @ 7 OR 2 XOR DUP MUXstat ! CHANmux C!       READtest READoffset - ;                                       : @TEST[sig3] MUXstat @ 7 OR 4 XOR DUP MUXstat ! CHANmux C!       READtest READoffset - ; 
                                                                                                                                                                                                                                      ( GAIN MEASUREMENT                             11:29 09/23/89 )
 
: CALC-GAINS  PRIME-LAMP-CONTROL SETtestSIG ( Set test mode)   
( Read test signals at gain=1 then each gain stage alone)       
CR ." Test Signals G0,G1,G2,G3 "                                
@TEST[sig0] DUP s0 ! DltaGains !                                
@TEST[sig1] TYPEGAINS                                           
SCALE-GAIN DltaGains 4 + 2! ( Gc10)                             
@TEST[sig2] TYPEGAINS                                           
SCALE-GAIN DltaGains 4 + 2@ -4 10000 nF*/                       
DltaGains 8 + 2!                                     ( Gc100)   
@TEST[sig3] TYPEGAINS                                           
SCALE-GAIN DltaGains 8 + 2@ -4 10000 nF*/                       
DltaGains 12 + 2!                                   ( Gc1000)   
SETnormalSIG                               ( Set normal mode)   
-4 10000 DltaGains 2! DSPLYGc's ; ( Set Gc0=1.0000 & display) 
