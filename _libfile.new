!SetStrConst:
mov al,[esi]; Get char
mov [edi],al; Put char
or al,al; Test for NULL
je !SetStrConstDone
inc esi; Bump source ptr
inc edi; Bump dest ptr
jmp !SetStrConst
!SetStrConstDone:
ret

!TrmStr:

ret

!PrtUsing:

ret

!ReadBool:
; Enter with target byte addr in esi, src addr in _DataPtr
mov edi,[_DataPtr]; Get data addr
mov al,[edi]; Get boolean value
cmp al,$30; Is it false?
jne !ReadBoolTrue; No, must be true
xor al,al; Set to false
jmp !ReadBoolDone
!ReadBoolTrue:
mov al,1; Set to true
!ReadBoolDone:
mov [esi],al;  Save in target var
add edi,2; Point to next data field
mov [_DataPtr],edi; Save for next use
ret

!ReadByte:
; Enter with target byte addr in esi, src addr in _DataPtr
push esi; Save target addr
cinvoke atol,[_DataPtr]
pop esi; Restore target addr
mov [esi],al; Save result into target
call !UpdataDataPtr; Point to next data field
ret

!ReadShort:
; Enter with target word addr in esi, src addr in _DataPtr
push esi; Save target addr
cinvoke atol,[_DataPtr]
pop esi; Restore target addr
mov [esi],ax; Save result into target
call !UpdataDataPtr; Point to next data field
ret

!ReadLong:
; Enter with target long addr in esi, src addr in _DataPtr
push esi; Save target addr
cinvoke atol,[_DataPtr]
pop esi; Restore target addr
mov [esi],eax; Save result into target
call !UpdataDataPtr; Point to next data field
ret

!ReadFlt:

ret

!ReadStr:
; Enter with target string addr in esi, src addr in _DataPtr
mov edi,[_DataPtr]; Get dest addr
!ReadStrLoop:
mov al,[edi]; Get data
mov [esi],al; Put data
inc edi; Bump src ptr
inc esi; Bump dest ptr
cmp al,0; Is it a null?
jne !ReadStrLoop; No, proc next char
mov [_DataPtr],edi; Save result
ret

!UpdataDataPtr:
mov esi,[_DataPtr]; Get ptr
!UpdataDataPtrLoop:
mov al,[esi]; Get char
cmp al,0; Is it null?
je !UpdataDataPtrDone
inc esi; Bump ptr
jmp !UpdataDataPtrLoop
!UpdataDataPtrDone:
inc esi; Point to next data field
mov [_DataPtr],esi; Save result
ret

!MovArg:
; Enter with cmdline ptr in [_ArgList], dst vector in edi
mov esi,[_ArgList]; Point to next char in cmdline
mov edx,[edi+4]; Get dst len
mov edi,[edi]; Get dst ptr
!MovArg1:
mov al,[esi]; Get next char
cmp al,32; Space?
je !MovArgSpace; End of this arg
mov [edi],al; Store in dest
or al,al; Set z flag
je !MovArgDone; End of cmdline
inc esi; Point to nexr char
inc edi; Point to next dest
dec edx; Dec max len
je !MovArgDone; dest len maxed out
jmp !MovArg1; Do next
!MovArgSpace:
xor al,al; Make string terminator
mov [edi],al; Store terminator in dest
inc esi; Point to nexr char
!MovArgDone:
mov [_ArgList],esi; Save cmdline ptr
ret

!MovStr:
; Enter with src vector addr in esi, dst vector addr in edi
push ebx; Save _True flag
mov edx,[edi+4]; Get dst len
mov edi,[edi]; Get dst ptr
!MovStr1:
mov ecx,[esi+4]; Get src len
or ecx,ecx; Set z flag
je !MovStrDone1; Bail out if 0 len in src
mov ebx,[esi]; Get src ptr
!MovStr2:
mov al,[ebx]; Get char
mov [edi],al; Put char
inc edi; Inc dst ptr
inc ebx; Inc src ptr
dec edx; Dec dst len
je !MovStrDone2; Quit if dst len=0
or al,al; was last char term char?
je !MovStr3; Yes, undo and get next src lnk
dec ecx; Dec src len
jne !MovStr2; Move next char
jmp !MovStr4; Skip dst ptr undo
!MovStr3:
dec edi; Point back before term char
!MovStr4:
mov ecx,[esi+8]; Get src lnk
or ecx,ecx; Set z flag
je !MovStrDone1
mov esi,ecx; Move lnk to src vec addr
jmp !MovStr1; Process new src vec
!MovStrDone1:
mov byte [edi],0; Tack on null because dest len not reached
!MovStrDone2:
pop ebx; Restore _True flag
ret

!CmpStr:
; Enter with src vector addr in esi, dst vector addr in edi
mov edx,[edi+4]; Get dst len
mov edi,[edi]; Get dst ptr
mov ecx,[esi+4]; Get src len
mov esi,[esi]; Get src ptr
!CmpStrLoop:
mov al,[edi]; Get dest char
mov ah,[esi]; Get src char
cmp al,0; Src end?
je !CmpStrDone; Yes, quit
cmp ah,0; Dst end?
je !CmpStrDone; Yes, quit 
cmp al,ah; Compare chars
jne !CmpStrDiff; Found a difference, time to quit
inc edi; Inc dst ptr
inc esi; Inc src ptr
dec edx; Dec dst len
je !CmpStrDone; Quit if dst len=0
dec ecx; Dec src len
jne !CmpStrLoop; Move next char
!CmpStrDone:
cmp al,ah; Compare chars
!CmpStrDiff:
ret

!StrLen:
; Enter with vector addr in esi
xor eax,eax; Clear len ctr
!StrLenGetVec:
mov edi,[esi]; Get vec ptr
mov edx,[esi+4]; Get vec len
!StrLenLp:
mov cl,[edi]; Get next str char
cmp cl,0; Is it term char?
je !StrLenChkLnk; Yes, check lnk
inc eax; Inc len
dec edx; Dec len ctr
je !StrLenChkLnk; Yes, check lnk
inc edi; Point to next char
jmp !StrLenLp; Go chk next char
!StrLenChkLnk:
mov esi,[esi+8]; Get vec lnk
or esi,esi; Set z flag
jne !StrLenGetVec; Zero lnk means done
ret

!SubStr:

ret

!MidStr:
; Enter with vector addr in esi, start pos in eax, quan in edx
dec eax; Convert offset to 0 base
mov edi,[esi]; Get vec ptr
add edi,eax; Get new start pos
mov [esi],edi; Save new vec ptr
mov [esi+4],edx; Set new len
ret

!RightStr:
; Enter with vector addr in esi, quan in eax
mov edi,[esi]; Get vec ptr
mov ecx,[esi+4]; Get vec len
!RightStrLen:
mov dl,[edi]; Read char
or dl,dl; Is it a null?
je !RightStr2
dec ecx; Dec len
je !RightStr1
inc edi; Bump ptr
jmp !RightStrLen
!RightStr1:
inc edi; Correction factor
!RightStr2:
sub edi,eax; Set new ptr
mov [esi],edi; Save ptr
mov [esi+4],eax; Save len
ret

!ClrConv:

ret

!AtoD:

ret

!AtoL:
mov dl,[esi]; Get first byte of conv string
cmp dl,'$'; Is it a '$'?
jne !NotHex
call !NumScan
!HexLoop:
dec esi; Bump ptr backward
xor edx,edx; Insure 3 high bytes=0
mov dl,[esi]; Get next char
cmp dl,'$'; Term char?
je !AtoLDone
cmp dl,$39; More than '9'?
jg !HexLetter
and dl,$0f; Strip off all but numeric value
jmp !HexAcc; Accumulate result
!HexLetter:
and dl,$0f; Strip off all but numeric offset
add dl,9; Add numeric base to offset
!HexAcc:
imul edx,ecx; Digit position multiplier
add eax,edx; Accumulate result
imul ecx,16; Set multiplier for next digit 
jmp !HexLoop; Do next
!NotHex:
cmp dl,'%'; Is it a '%'?
jne !NotOctal
call !NumScan
!OctalLoop:
dec esi; Bump ptr backward
xor edx,edx; Insure 3 high bytes=0
mov dl,[esi]; Get next char
cmp dl,'%'; Term char?
je !AtoLDone
and dl,$07; Strip off all but octal value
imul edx,ecx; Digit position multiplier
add eax,edx; Accumulate result
imul ecx,8; Set multiplier for next digit 
jmp !OctalLoop; Do next
!NotOctal:
cmp dl,'&'; Is it a '&'?
jne !NotBinary
call !NumScan
!BinaryLoop:
dec esi; Bump ptr backward
xor edx,edx; Insure 3 high bytes=0
mov dl,[esi]; Get next char
cmp dl,'&'; Term char?
je !AtoLDone
and dl,$01; Strip off all but octal value
imul edx,ecx; Digit position multiplier
add eax,edx; Accumulate result
imul ecx,2; Set multiplier for next digit 
jmp !OctalLoop; Do next
!NotBinary:
cinvoke atol,esi; Do non-hex convert
!AtoLDone:
ret

!NumScan:
inc esi; Bump ptr
mov dl,[esi]; Get next char
cmp dl,0; Term char?
jne !NumScan; Do next
xor eax,eax; Clear acc
mov ecx,1; First digit multiplier

!ZLtoH:

ret

!ZLtoA:

ret

!LtoA:

ret

!DtoA:

ret

!LtoH:

ret

!PrintStr:

ret

!PrintTab:

ret

!InpData:
invoke ReadConsole,[_InHandle],[_IOBuffer],_BufSize,XferCount,0
push eax; Save API result
cmp [!ArgSafe1],6; Is data type 'string'?
je !InpDataString
cmp [!ArgSafe1],1; Is data type 'boolean'?
je !InpDataBool
cmp [!ArgSafe1],2; Is data type 'byte'?
je !InpDataByte
cmp [!ArgSafe1],3; Is data type 'short'?
je !InpDataShort
cmp [!ArgSafe1],5; Is data type 'float'?
je !InpDataFloat
; Get here if data type 'long'
call !GetNumVal
mov [esi],eax; Save result into target
jmp !InpDataDone
!InpDataString:
mov edi,[!ArgSafe0]; Get dst vec
mov edx,edi
add edx,4; Point to max len
mov edx,[edx]; Get max len
mov edi,[edi]; Get string addr
mov ecx,[XferCount]; Get len
mov esi,[_IOBuffer]; Get src addr
!InpDataStringLp:
mov al,[esi]; Get char
cmp al,$0d; CR?
jne !NotCR
mov byte [edi],0; Mark end
jmp !InpDataDone
!NotCR:
mov [edi],al; Put char
dec edx; Dec max count
je !InpDataDone; Quit if target max reached
inc esi; Bump src ptr
inc edi; Bump dst ptr
jne !InpDataStringLp; Get next char
jmp !InpDataDone
!InpDataBool:

jmp !InpDataDone
!InpDataByte:
call !GetNumVal
mov [esi],al; Save result into target
jmp !InpDataDone
!InpDataShort:
call !GetNumVal
mov [esi],ax; Save result into target
jmp !InpDataDone
!InpDataFloat:

!InpDataDone:
pop eax; Restore API result
ret

!GetNumVal:
mov esi,[_IOBuffer]; Get buf addr
cinvoke atol,[_IOBuffer]
mov esi,[!ArgSafe0]; Get target vec
mov esi,[esi];  Get target addr
ret

!BtoA:
; Enter with al as bool 
mov edi,[_ConvBuf1]; Point to build str
or al,al; Set z flag
je !BoolFalse; If zero, is false
mov esi,_TrueStr; Point to true str
jmp !BldBool; Go build str
!BoolFalse:
mov esi,_FalseStr; Point to false str
!BldBool:
mov al,[esi]; Get char from src
mov [edi],al; Put next char in ConvBuf1
cmp al,0; Is it term char?
je !BtoADone; Yes, all done
inc esi; Point to next char in src
inc edi; Point to next char in dest
jmp !BldBool; Go to next char
!BtoADone:
mov [edi],al; Put term char into dest
ret

!LCase:
; Enter with vector addr in esi
mov ecx,[esi+4]; Get vec len
mov esi,[esi]; Get vec ptr
!LCaseLoop:
mov al,[esi]; Get char
or al,al; Is it a null?
je !LCaseDone; Yes, quit 
cmp al,$41; Is it less than 'A'?
jb !NotUpper; Yes... don't convert
cmp al, $5a; Is it more than "Z'?
ja !NotUpper; Yes... don't convert
or al,$20; Convert to lower case
!NotUpper:
mov [esi],al; Put char
inc esi; Bump ptr
dec ecx; Dec len
jne !LCaseLoop; Proc next char
!LCaseDone:
ret

!UCase:
; Enter with vector addr in esi
mov ecx,[esi+4]; Get vec len
mov esi,[esi]; Get vec ptr
!UCaseLoop:
mov al,[esi]; Get char
or al,al; Is it a null?
je !UCaseDone; Yes, quit 
cmp al,$61; Is it less than 'a'?
jb !NotLower; Yes... don't convert
cmp al, $7a; Is it more than "z'?
ja !NotLower; Yes... don't convert
and al,$df; Convert to upper case
!NotLower:
mov [esi],al; Put char
inc esi; Bump ptr
dec ecx; Dec len
jne !UCaseLoop; Proc next char
!UCaseDone:
ret

!TailStr:
; Enter with vector addr in esi, quan in eax
push ebx; Save ebx
mov edi,[esi]; Get vec ptr
mov ecx,[esi+4]; Get vec len
xor edx,edx; Clear edx
dec eax; Set value as offset
add eax,edi; Calc new ptr
!TailStrLen:
mov bl,[edi]; Read char
or bl,bl; Is it a null?
je !TailStr2
dec ecx; Dec len
je !TailStr1
inc edi; Bump ptr
inc edx; Bump new len
jmp !TailStrLen
!TailStr1:
inc edi; Correction factor
!TailStr2:
mov [esi],eax; Save new ptr
mov [esi+4],edx; Save new len
pop ebx; restore ebx
ret
