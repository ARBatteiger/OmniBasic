^?VIAL-IN
ConstVIALSWI/O
C@
ConstVIALbit
AND
0=
DUP
VarfVIAL
!
Finish

^SET-TESTrtn
R>
VarTESTRTN
@
OBRANCH
BrnOffs$000A
BEGIN
R>
0=
OBRANCH
BrnOffs$FFFA
ENDIF
DUP
VarTESTRTN
!
Const0
>R
>R
Const0
VarfTEST
!
INIT-keyQ
Finish

^?VIAL-OUT
ConstVIALSWI/O
C@
ConstVIALbit
AND
DUP
0=
VarfVIAL
!
0<>
Finish

^TRIGER-LAMP
VarLMPstat
@
ConstLMPreset
AND
DUP
ConstACQRI/O
C!
VarTRIGDLY
@
LIT
LV$0032
MAX
DELAY[ms]
ConstSTARTacqr
OR
DUP
VarLMPstat
!
ConstACQRI/O
C!
Finish

^LMPFAIL
LIT
LV$FFFF
VarfABORT
!
LIT
LV$FFFF
VarTRIGerr
!
VarfTEST
@
0=
OBRANCH
BrnOffs$0008
TxtLMPFAIL1
ConstDISPLAY1
w-TYPE
ENDIF
Finish

^FIRE-LAMP
Const0
VarLMPERR
!
LIT
LV$FFFF
VarflMPERR
!
BEGIN
TRIGER-LAMP
Const0
BEGIN
1+
DUP
LIT
LV$000A
>
VarA/DStatus
C@
LIT
LV$00FF
XOR
ConstLMPDtaRdy
AND
OR
?VIAL-OUT
OBRANCH
BrnOffs$0010
LIT
LV$FFFF
DUP
VarfABORT
!
BRANCH
BrnOffs$0004
ELSE
Const0
ENDIF
OR
OBRANCH
BrnOffs$FFCC
LIT
LV$000A
>
OBRANCH
BrnOffs$0020
Const1
VarLMPERR
+!
Const1
Var#LMPERR
+!
VarLMPERR
@
Const3
>
OBRANCH
BrnOffs$0004
LMPFAIL
ENDIF
BRANCH
BrnOffs$0008
ELSE
Const0
VarflMPERR
!
ENDIF
VarflMPERR
@
0=
VarfABORT
@
OR
OBRANCH
BrnOffs$FF8A
VarLMPERR
@
>
OBRANCH
BrnOffs$0023
CR
VarLMPERR
@
.
.''
CV$14
''DATA READY ERROR(s)''
CR
ENDIF
Finish

^SET[Offset]
VarLMPstat
@
DUP
VarSVstat
!
LIT
LV$009F
AND
LIT
LV$0020
OR
VarLMPstat
!
Finish

^SET[Normal]
VarSVstat
@
VarLMPstat
!
Finish

^PRIME-LAMP-CONTROL
Var#PRIMES
@
Const0
(DO)
TRIGER-LAMP
(LOOP)
BrnOffs$FFFC
Finish

^SCALE-GAIN
Const0
SWAP
LIT
LV$FFFC
LIT
1000
Const0
VarDltaGains
@
nF*/
Finish

^DSPLYGc's
CR
.''
CV$1D
'' Gain factors Gc0,Gc1,Gc2,Gc3 ''
LIT
LV$0EFC
VarDltaGains
(DO)
)
2@
Const0
ROT
FORMAT-ANSWER
SPACE
TYPE
LIT
LV$0004
(+LOOP)
BrnOffs$FFEC
Finish

^FORMAT-GAIN
Const0
SWAP
LIT
LV$FFFE
LIT
LV$0064
Const0
Vars0
@
nF*/
Const0
ROT
FORMAT-ANSWER
Finish

^TYPEGAINS
.''
CV$07
''  GAIN ''
DUP
FORMAT-GAIN
TYPE
Finish

^INIT-SIGFILTER
LIT
LV$0000
LIT
LV$0000
VarSUM[Rn]
2!
Const0
VarR[Hi]
!
LIT
LV$7FFF
VarR[Lo]
!
Const0
VarCYCL[n]
!
Finish

^TYPE-%Dlta
<#
#
#
LIT
LV$002E
HOLD
#S
#>
TYPE
Finish

^GTYPE-ALL
CR
VarSUM[Rn]
2@
VarCYCL[n]
@
LIT
LV$0008
*
D/
.''
CV$08
''GAINSIG=''
D.
.''
CV$07
''%DLTA=''
VarDlta
@
Const0
TYPE-%Dlta
Finish

^@TEST-SIG
Const0
LIT
LV$0008
Const0
(DO)
FIRE-LAMP
A/DCNVRT
+
(LOOP)
BrnOffs$FFF8
DUP
VarR[Hi]
@
>
OBRANCH
BrnOffs$0008
DUP
VarR[Hi]
!
ENDIF
DUP
VarR[Lo]
@
<
OBRANCH
BrnOffs$0008
DUP
VarR[Lo]
!
ENDIF
Const0
Finish

^CHK-GAINok
Var1/Dlta
2@
OBRANCH
BrnOffs$000A
DROP
Const0
BRANCH
BrnOffs$001E
ELSE
DUP
0<
OBRANCH
BrnOffs$000A
DROP
Const0
BRANCH
BrnOffs$000E
ENDIF
LIT
LV$2710
SWAP
Const1
MAX
/
ENDIF
VarDlta
!
GTYPE-ALL
VarCYCL[n]
@
Const#GTRIES
>
LIT
LV$0064
Const#GTRIES
*
Const0
VarSUM[Rn]
2@
D<
AND
OBRANCH
BrnOffs$0030
LIT
LV$FFFF
VarfNFg>Lim
!
LIT
LV$0000
LIT
LV$0000
VarSUM[Rn]
2!
CR
.''
CV$13
''UNSTABLE GAIN DATA ''
CR
ENDIF
Finish

^GET-TEST-SIG
INIT-SIGFILTER
SPACE
Const#GTRIES
2+
Const0
(DO)
@TEST-SIG
VarSUM[Rn]
2@
D+
VarSUM[Rn]
2!
Const1
VarCYCL[n]
+!
VarCYCL[n]
@
DUP
.
VarMINSMPL#
@
>
OBRANCH
BrnOffs$0044
VarSUM[Rn]
2@
VarR[Hi]
@
VarR[Lo]
@
-
Const1
MAX
D/
2DUP
Var1/Dlta
2!
ConstGLimit
Const0
D>
VarfABORT
@
OR
VarSUM[Rn]
2@
LIT
LV$0190
LIT
LV$0000
D<
VarfOffset
@
AND
OR
OBRANCH
BrnOffs$0004
LEAVE
ENDIF
ENDIF
(LOOP)
BrnOffs$
CHK-GAINok
VarSUM[Rn]
2@
VarCYCL[n]
@
LIT
LV$0008
*
D/
DROP
Finish

^READtest
CR
.''
CV$04
''Sig ''
Const0
VarfOffset
!
GET-TEST-SIG
Finish

^READoffset
CR
.''
CV$07
''Offset ''
SET[Offset]
LIT
LV$0007
Finish

^SETtestSIG
VarLMPstat
@
ConstTESTmode
OR
VarLMPstat
!
Finish

^SETnormalSIG
VarLMPstat
@
ConstTESTmode
LIT
LV$00FF
XOR
AND
VarLMPstat
!
Finish

^@TEST[sig0]
ConstSIGchan
LIT
LV$0007
OR
ConstBKLITEbit
OR
DUP
VarMUXstat
!
ConstCHANmux
C!
LIT
LV$0008
1-
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig1]
VarMUXstat
@
LIT
LV$0007
OR
Const1
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig2]
VarMUXstat
@
LIT
LV$0007
OR
Const2
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^@TEST[sig3]
VarMUXstat
@
LIT
LV$0007
OR
LIT
LV$0004
XOR
DUP
VarMUXstat
!
ConstCHANmux
C!
Const3
VarMINSMPL#
!
READtest
READoffset
-
Finish

^Stop
''STOPED
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
VarCALflg
!
SET-TESTrtn
BKliteON
BEGIN
?BKliteOFF
UPDATEkeyQ
Const0
OBRANCH
BrnOffs$FFF8
Finish

^EVALGAIN
DUP
LIT
LV$0009
<
SWAP
LIT
LV$000C
>
OR
VarfNFg>Lim
@
OR
VarfGERR
@
OR
VarfGERR
!
Finish

^GAINTEST
VarfGERR
@
OBRANCH
BrnOffs$000A
TxtRNGERR
ConstDISPLAY2
w-TYPE
Stop
ENDIF
Finish

^CALC-GAINS
Const0
VarfGERR
!
Const0
VarfNFg>Lim
!
PRIME-LAMP-CONTROL
SETtestSIG
CR
.''
CV$19
''Test Signals G0,G1,G2,G3 ''
@TEST[sig0]
DUP
>R
DUP
Vars0
!
VarDltaGains
!
@TEST[sig1]
TYPEGAINS
DUP
R
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
LV$0004
+
2!
@TEST[sig2]
TYPEGAINS
DUP
R
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
LV$0004
+
2@
LIT
LV$FFFC
LIT
LV$2710
nF*/
VarDltaGains
LIT
LV$0008
+
2!
@TEST[sig3]
TYPEGAINS
DUP
R>
/
EVALGAIN
SCALE-GAIN
VarDltaGains
LIT
LV$0008
+
2@
LIT
LV$FFFC
LIT
LV$2710
nF*/
VarDltaGains
LIT
LV$000C
+
2!
SETnormalSIG
LIT
LV$FFFC
LIT
LV$2710
VarDltaGains
2!
DSPLYGc's
GAINTEST
Finish

^GET[Sig]
ConstSIGchan
VarMUXset
!
SET-ANALOG-CNTRL
A/DCNVRT
Finish

^GETAVE
LIT
LV$0000
LIT
LV$0000
LIT
LV$000A
Const0
(DO)
FIRE-LAMP
GET[Sig]
Const0
D+
?VIAL-OUT
VarfABORT
@
OR
OBRANCH
BrnOffs$0004
LEAVE
ENDIF
(LOOP)
BrnOffs$
LIT
LV$000A
D/
DROP
Finish

^UPDATE-OFFSET
SET[Offset]
GETAVE
SET[Normal]
VarSIG[Offset]
!
Finish

^GET[Ref]
ConstREFchan
VarMUXset
!
SET-ANALOG-CNTRL
A/DCNVRT
Finish

^AGCGAIN
PRIME-LAMP-CONTROL
CR
.''
CV$10
''-AGC-  GAIN/SIG ''
Const0
VarGAINvlu
!
BEGIN
VarGAINvlu
@
LIT
LV$000A
*
Const1
MAX
VarGAINvlu
!
GET[Sig]
DROP
GETAVE
UPDATE-OFFSET
VarSIG[Offset]
@
-
.''
CV$02
'', ''
VarGAINvlu
@
.
.''
CV$02
''/ ''
DUP
.
LIT
LV$012C
>
VarGAINvlu
@
LIT
1000
>=
OR
VarGAINexp
@
VarGAINlimit
@
>=
OR
VarfABORT
@
OR
OBRANCH
BrnOffs$FFA6
Finish

^SETGAIN
Const1
MAX
VarGAINvlu
!
SET-ANALOG-CNTRL
Finish

^/RND
DUP
>R
M/MOD
DROP
SWAP
R>
2/
1-
>
OBRANCH
BrnOffs$0004
1+
ENDIF
Finish

^INIT-FLTRTBLS
LIT
LV$0008
Const0
(DO)
Var#SMPLtbl0
)
+
@
Var#SMPLtbl
)
+
!
Var#OUTLYRtbl0
)
+
@
Var#OUTLYRtbl
)
+
!
Const2
(+LOOP)
BrnOffs$FFDC
Finish

^SET-#SMPLS
2*
Var#SMPLtbl
+
@
Var#SMPLS
!
Finish

^SET-#OUTLYRS
2*
Var#OUTLYRtbl
+
@
Var#OUTLYERS
!
Finish

^INIT-MEASURE-CYCLE
VarGAINexp
@
DUP
SET-#SMPLS
SET-#OUTLYRS
Var#SMPLS
@
Var#OUTLYERS
@
2*
+
DUP
VarSMPLtotal
!
2*
VarNDXlimit
!
Const0
VarSMPL#
!
Const0
VarSMPLNDX
!
Finish

^READ-SAMPLE
LIT
LV$2710
FIRE-LAMP
GET[Sig]
VarSIG[Offset]
@
-
Const1
MAX
DUP
VarSIGQUE
VarSMPLNDX
@
+
!
GET[Ref]
Const1
MAX
DUP
VarREFQUE
VarSMPLNDX
@
+
!
*/
VarS/RQUE
VarSMPLNDX
@
+
!
Const2
VarSMPLNDX
+!
Finish

^INIT-MEASURE-DATA
LIT
LV$0000
LIT
LV$0000
VarAVE[S/R]
2!
LIT
LV$0000
LIT
LV$0000
VarSIG[Ave]
2!
LIT
LV$0000
LIT
LV$0000
VarREF[Ave]
2!
LIT
LV$0000
LIT
LV$0000
VarSIG[Ave]/REF[Ave]
2!
Finish

^CHK-MIN/MAX
>R
DUP
VarMAXSMPL
@
>
OBRANCH
BrnOffs$000E
DUP
VarMAXSMPL
!
R
VarMAXNDX
!
ENDIF
DUP
VarMINSMPL
@
<
VarMAXNDX
@
R
<>
AND
OBRANCH
BrnOffs$000E
DUP
VarMINSMPL
!
R
VarMINNDX
!
ENDIF
R>
2DROP
Finish

^REJECT-OUTLYER
Const0
VarMAXSMPL
!
LIT
LV$7FFF
VarMINSMPL
!
LIT
LV$FFFF
VarMAXNDX
!
LIT
LV$FFFF
VarMINNDX
!
Var#OUTLYERS
@
>
OBRANCH
BrnOffs$007A
VarNDXlimit
@
Const0
(DO)
VarS/RQUE
)
+
@
DUP
0>=
OBRANCH
BrnOffs$000A
)
CHK-MIN/MAX
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
Const2
(+LOOP)
BrnOffs$FFE2
VarMAXNDX
@
DUP
0>=
OVER
VarNDXlimit
@
<
AND
OBRANCH
BrnOffs$0012
VarS/RQUE
+
LIT
LV$FFFF
SWAP
!
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
VarMINNDX
@
DUP
0>=
OVER
VarNDXlimit
@
<
AND
OBRANCH
BrnOffs$0012
VarS/RQUE
+
LIT
LV$FFFE
SWAP
!
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
ENDIF
Finish

^REJECT-OUTLYERS
Var#OUTLYERS
@
Const0
(DO)
REJECT-OUTLYER
(LOOP)
BrnOffs$FFFC
Finish

^SHFTDATA
VarAVE[S/R]
2@
LIT
LV$0F24
2!
VarSIG[Ave]
2@
LIT
LV$0F2E
2!
VarREF[Ave]
2@
LIT
LV$0F38
2!
VarSIG[Ave]/REF[Ave]
2@
LIT
LV$0F42
2!
Finish

^@AVE[S/R]
VarGAINexp
@
MINUS
VarAVE[S/R]
@
EXIT
Const0
LIT
LV$0F24
@
Const0
D+
Const2
D/
Const0
VarS/Rjst
!
LIT
LV$000A
Const0
(DO)
2DUP
LIT
LV$7FFF
LIT
LV$0000
D>
OBRANCH
BrnOffs$0012
Const1
VarS/Rjst
+!
LIT
LV$000A
D/
BRANCH
BrnOffs$0004
ELSE
LEAVE
ENDIF
(LOOP)
BrnOffs$FFDC
DROP
VarGAINexp
@
VarS/Rjst
@
+
MINUS
SWAP
Finish

^?DATA-STABLE
VarAVE[S/R]
@
LIT
LV$0F24
@
2DUP
+
2/
>R
-
ABS
DUP
LIT
LV$000F
<
SWAP
LIT
LV$2710
R>
*/
DUP
Var%DIF
!
LIT
LV$01F4
<
OR
Finish

^AVE-DATA
Const0
Var#BADPNTS
!
LIT
LV$0000
LIT
LV$0000
VarNDXlimit
@
Const0
(DO)
VarS/RQUE
)
+
@
DUP
0<
0=
OBRANCH
BrnOffs$0090
VarSIGQUE
)
+
@
DUP
VarSIG[Offset]
@
+
LIT
LV$0FF5
>
DUP
OBRANCH
BrnOffs$0008
Const0
VarSIGok
!
ENDIF
VarREFQUE
)
+
@
LIT
LV$0FF5
OVER
<
OVER
LIT
1000
<
OR
DUP
OBRANCH
BrnOffs$0008
Const0
VarREFok
!
ENDIF
ROT
OR
0=
OBRANCH
BrnOffs$0022
Const0
VarREF[Ave]
2@
D+
VarREF[Ave]
2!
Const0
VarSIG[Ave]
2@
D+
VarSIG[Ave]
2!
Const0
D+
BRANCH
BrnOffs$001A
ELSE
2DROP
DROP
LIT
LV$FFFD
VarS/RQUE
)
+
!
LIT
LV$FFFF
Var#BADPNTS
+!
ENDIF
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
Const2
(+LOOP)
BrnOffs$FF5A
Finish

^CALC[AveS/R]
LIT
LV$0000
LIT
LV$0000
VarSIG[Ave]
2!
LIT
LV$0000
LIT
LV$0000
VarREF[Ave]
2!
LIT
LV$FFFF
VarSIGok
!
LIT
LV$FFFF
VarREFok
!
AVE-DATA
Var#SMPLS
@
Var#BADPNTS
@
+
Const1
MAX
DUP
>R
/RND
DUP
VarAVE[S/R]
!
LIT
LV$2710
VarSIG[Ave]
2@
R
/RND
DUP
VarSIG[Ave]
!
VarREF[Ave]
2@
R>
/RND
DUP
VarREF[Ave]
!
*/
DUP
0<
OBRANCH
BrnOffs$0008
DROP
LIT
LV$7D00
ENDIF
VarSIG[Ave]/REF[Ave]
!
Var#SMPLS
@
Var#BADPNTS
@
ABS
Const1
MAX
/
Const1
>
OBRANCH
BrnOffs$0012
LIT
LV$FFFF
VarSIGok
!
LIT
LV$FFFF
VarREFok
!
ENDIF
Finish

^TYPEdata
DUP
0<
MINUS
Varf-
!
ABS
Const0
<#
#S
#>
LIT
LV$0006
OVER
-
Varf-
@
+
Const0
(DO)
LIT
LV$0020
EMIT
(LOOP)
BrnOffs$FFF8
Varf-
@
OBRANCH
BrnOffs$0008
LIT
LV$002D
EMIT
ENDIF
TYPE
Finish

^DISPLAY-QUES
VarNDXlimit
@
Const0
(DO)
CR
CR
.''
CV$04
''Sig ''
)
LIT
LV$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarSIGQUE
)
+
@
TYPEdata
Const2
(+LOOP)
BrnOffs$FFF2
CR
.''
CV$04
''Ref ''
)
LIT
LV$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarREFQUE
)
+
@
TYPEdata
Const2
(+LOOP)
BrnOffs$FFF2
CR
.''
CV$04
''S/R ''
)
LIT
LV$0014
+
VarNDXlimit
@
MIN
)
(DO)
VarS/RQUE
)
+
@
TYPEdata
Const2
(+LOOP)
BrnOffs$FFF2
LIT
LV$0014
(+LOOP)
BrnOffs$FF77
Finish

^DISPLAY-DATA
VarfDSPLY
@
0=
OBRANCH
BrnOffs$0004
EXIT
ENDIF
DISPLAY-QUES
CR
.''
CV$05
''GAIN=''
VarGAINvlu
@
.
.''
CV$0A
''AVE[S/R]=GT''
@
.
.''
CV$07
'' %DLTA=''
Var%DIF
@
Const0
<#
#
#
LIT
LV$002E
HOLD
#S
#>
TYPE
.''
CV$0C
VarGAINexp
@
LIT
LV$0004
*
VarBLANKdata
+
@
.
CR
.''
CV$09
''AVE[Sig]=''
VarSIG[Ave]
@
.
.''
''<LF> AVE[Ref]=''
VarREF[Ave]
@
.
CR
CR
Finish

^TSTMSG
TxtBLANK
ConstDISPLAY2
w-TYPE
Const1
ConstDISPLAY2
wx-TYPE
Finish

^STOP
''STOPED
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
VarCALflg
!
SET-TESTrtn
BKliteON
BEGIN
?BKliteOFF
UPDATEkeyQ
Const0
OBRANCH
BrnOffs$FFF8
Finish

^PASSED
TxtPASED
LIT
LV$0006
LIT
LV$0013
ConstDISPLAY2
wx-TYPE
LIT
1000
DELAY[ms]
Finish

^FAIL
TxtFAIL
LIT
LV$0004
LIT
LV$0015
ConstDISPLAY2
wx-TYPE
STOP
Finish

^LMPCHK
LIT
LV$0010
Var#PRIMES
!
PRIME-LAMP-CONTROL
LIT
LV$0032
Ptr'TrigDly
@
!
Const0
Var#LMPERR
!
LIT
LV$0000
LIT
LV$0000
LIT
LV$000A
Const0
(DO)
Ptr'FIRE-TEST
@
EXECUTE
GET[Ref]
Const0
D+
VarflMPERR
@
OBRANCH
BrnOffs$0008
Const1
Var#LMPERR
+!
ENDIF
(LOOP)
BrnOffs$FFE4
Finish

^SELFTEST
Const0
VarfABORT
!
Const0
Var#LMPERR
!
CHK-DSPLYS
Const3
DELAY[sec]
TxtROMER
ConstDISPLAY1
w-TYPE
TxtSELFTST2
ConstDISPLAY2
w-TYPE
Const2
DELAY[sec]
TxtROMCK1
Count
TSTMSG
Ptr'CALC-CHKSUM2
@
EXECUTE
1+
OBRANCH
BrnOffs$0008
FAIL
BRANCH
BrnOffs$0004
ELSE
PASSED
ENDIF
TxtROMCK2
Count
TSTMSG
Ptr'CALC-CHKSUM8
@
EXECUTE
1+
OBRANCH
BrnOffs$0008
FAIL
BRANCH
BrnOffs$0004
ELSE
PASSED
ENDIF
CLR-RAM
TxtRAMCK
Count
TSTMSG
CHKRAM
0=
OBRANCH
BrnOffs$0008
FAIL
BRANCH
BrnOffs$0004
ELSE
PASSED
ENDIF
TxtLMPCK
LIT
LV$000A
TSTMSG
LMPCHK
2DUP
CR
.''
CV$04
''REF=''
LIT
LV$000A
D/
D.
LIT
1000
LIT
LV$0000
D<
Var#LMPERR
@
DUP
.''
CV$0E
''LAMP FAILURES=''
.
LIT
LV$0005
>
OR
OBRANCH
BrnOffs$0008
FAIL
BRANCH
BrnOffs$0004
ELSE
PASSED
ENDIF
Finish

^?CLKerr
Const1
VarCLKERRcnt
+!
VarCLKERRcnt
@
LIT
1000
>
OBRANCH
BrnOffs$001D
CR
.''
CV$14
''CLOCK DATA RDY ERROR''
ENDIF
QUIT
Finish

^@TSTBYTE
ConstTSTBYTE#
@CLKDTA
Finish

^!TSTBYTE
ConstTSTBYTE#
!CLKDTA
Finish

^@RUNDLY
ConstRUNDLY#
@CLKDTA
LIT
LV$0100
*
ConstRUNDLY#
1+
@CLKDTA
OR
Finish

^!RUNDLY
DUP
LIT
LV$0100
/
ConstRUNDLY#
!CLKDTA
ConstRUNDLY#
1+
!CLKDTA
Finish

^@SMPL#
ConstMSBSMPL#
@CLKDTA
LIT
LV$0100
*
ConstLSBSMPL#
@CLKDTA
OR
Finish

^!SMPL#
LIT
LV$0100
/MOD
ConstMSBSMPL#
!CLKDTA
ConstLSBSMPL#
!CLKDTA
Finish

^+!SMPL#
@SMPL#
+
!SMPL#
Finish

^CNVRTdate
Constmonth
@CLKDTA
Const0
LIT
LV$0064
D*
ConstRTCday
@CLKDTA
Const0
D+
LIT
LV$0064
D*
ConstRTCyr
@CLKDTA
Const0
D+
<#
#
#
LIT
LV$002F
HOLD
#
#
LIT
LV$002F
HOLD
#S
#>
Finish

^CNVRTtime
ConstRTChrs
@CLKDTA
DUP
LIT
LV$007F
>
VarfPM
!
LIT
LV$007F
AND
Const0
LIT
LV$0064
D*
ConstRTCmin
@CLKDTA
Const0
D+
LIT
LV$0064
D*
ConstRTCsec
@CLKDTA
Const0
D+
<#
#
#
LIT
LV$003A
HOLD
#
#
LIT
LV$003A
HOLD
#S
#>
Finish

^!CLKBUFx
VarCLKBUF
+
1-
C!
Finish

^GET-SMPL#
ConstRTCday
@CLKDTA
ConstDAY0
@CLKDTA
OVER
ConstDAY0
!CLKDTA
<>
OBRANCH
BrnOffs$000A
Const1
!SMPL#
BRANCH
BrnOffs$0006
ELSE
Const1
+!SMPL#
ENDIF
@SMPL#
Finish

^CLKTST
BEGIN
STRTCLK
CR
.''
CV$01
''[''
CNVRTdate
TYPE
.''
CV$01
'' ''
CNVRTtime
TYPE
.''
CV$02
''] ''
LIT
LV$000E
LIT
LV$000A
(DO)
LIT
LV$0020
EMIT
)
@CLKDTA
Const0
HEX
<#
#
#
#>
DECIMAL
TYPE
.''
CV$01
''H''
(LOOP)
BrnOffs$FFE0
TERMINAL
DUP
OBRANCH
BrnOffs$000C
DROP
KEY
LIT
LV$001B
=
ENDIF
OBRANCH
BrnOffs$FFA9
Finish

^CLR-NUMBER
CLR-CHRBUF2
VarCHRBUF2
1+
VarBUF2pntr
!
Varx2
@
1+
VarMINx
@
(DO)
LIT
LV$0020
)
ConstDISPLAY2
wx-emit
(LOOP)
BrnOffs$FFF4
VarMINx
@
Varx2
!
Finish

^get[num]
BEGIN
Varx2
@
VarMAXx
@
>
OBRANCH
BrnOffs$000E
Const0
VarBUF2pntr
!
Const0
VarfDP
!
BEGIN
?KEYPAD
OBRANCH
BrnOffs$FFFC
ENDIF
PCkey
LIT
LV$002F
OVER
<
OVER
LIT
LV$003A
<
AND
OBRANCH
BrnOffs$0038
VarBUF2pntr
@
0=
OBRANCH
BrnOffs$0004
CLR-NUMBER
ENDIF
DUP
Varx2
@
ConstDISPLAY2
wx-emit
Const1
Varx2
+!
LIT
LV$005F
Varx2
@
ConstDISPLAY2
wx-emit
DUP
VarBUF2pntr
@
C!
Const1
VarBUF2pntr
+!
ENDIF
Varx2
@
VarMAXx
@
>
OBRANCH
BrnOffs$000E
LIT
LV$0020
Varx2
@
ConstDISPLAY2
wx-emit
ENDIF
ConstEnt
=
OBRANCH
BrnOffs$FF72
Finish

^SET-INITVLU
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
LV$0004
+
!
Finish

^GET[num]
CLR-CHRBUF2
Const0
VarfDP
!
Const0
Varf+/-#
!
Const0
VarF#SGN
!
VarINITVLU
2@
VarINITVLU
LIT
LV$0004
+
@
F#CNVRT
2DUP
VarCHRBUF2
1+
SWAP
CMOVE
VarMINx
@
ConstDISPLAY2
wx-TYPE
VarMINx
@
1+
VarMAXx
!
VarMAXx
@
1+
Varx2
!
get[num]
VarCHRBUF2
NUMBER
2DUP
VarINITVLU
2!
DROP
>R
DPL
@
Const0
MAX
MINUS
VarINITVLU
LIT
LV$0004
+
!
R>
Finish

^DaTmDSPLY
STOPCLK
CNVRTdate
LIT
LV$0006
LIT
LV$0008
ConstDISPLAY1
FORMAT-wxTYPE
CNVRTtime
LIT
LV$0011
LIT
LV$0008
ConstDISPLAY1
FORMAT-wxTYPE
STRTCLK
Finish

^?CHNGtime
TxtDaTm3
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^?PM
TxtAM/PM
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^?DaTmOK
TxtDaTm1
ConstDISPLAY1
w-TYPE
TxtDaTm2
ConstDISPLAY2
w-TYPE
?F3KEY
Finish

^NEWTIME
STOPCLK
Const0
ConstRTCsec
!CLKDTA
Const2
BLANKline
TxtYY
Count
DUP
2+
DUP
VarMINx
!
2+
VarMAXx
!
Const1
ConstDISPLAY2
wx-TYPE
Const0
BEGIN
DROP
ConstRTChrs
@CLKDTA
LIT
LV$007F
AND
SET-INITVLU
GET[num]
DUP
LIT
LV$000D
<
OBRANCH
BrnOffs$FFE6
VarTMPhrs
!
Const2
BLANKline
TxtMIN
Count
DUP
2+
DUP
VarMINx
!
2+
VarMAXx
!
Const1
ConstDISPLAY2
wx-TYPE
Const0
BEGIN
DROP
ConstRTCmin
@CLKDTA
SET-INITVLU
GET[num]
DUP
LIT
LV$003C
<
OBRANCH
BrnOffs$FFEC
ConstRTCmin
!CLKDTA
?PM
OBRANCH
BrnOffs$000A
LIT
LV$0080
BRANCH
BrnOffs$0004
ELSE
Const0
ENDIF
VarTMPhrs
@
+
ConstRTChrs
!CLKDTA
STRTCLK
Finish

^NEWDATE
STOPCLK
Const2
BLANKline
TxtMM
Count
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
wx-TYPE
ConstRTCmonth
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCmonth
!CLKDTA
Const2
BLANKline
TxtDD
Count
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
wx-TYPE
ConstRTCday
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCday
!CLKDTA
Const2
BLANKline
TxtYY
Count
DUP
2+
DUP
VarMINx
!
1+
VarMAXx
!
Const1
ConstDISPLAY2
wx-TYPE
ConstRTCyr
@CLKDTA
SET-INITVLU
GET[num]
ConstRTCyr
!CLKDTA
STRTCLK
Finish

^INIT-RTC
ConstBinit
ConstSETbit
OR
ConstREGB
!CLKDTA
ConstAinit
ConstREGA
!CLKDTA
ConstREGC
@CLKDTA
DROP
Const1
!SMPL#
ConstREGD
@CLKDTA
DROP
STRTCLK
Finish

^?CLKDTAok
ConstREGD
@CLKDTA
ConstVTRbit
AND
>
Finish

^DATE/TIME
BEGIN
LIT
LV$FFFF
VarCALflg
!
STRTCLK
ConstREGD
@CLKDTA
ConstVTRbit
AND
OBRANCH
BrnOffs$0022
?DaTmOK
OBRANCH
BrnOffs$000A
Const0
VarCALflg
!
EXIT
?CHNGtime
OBRANCH
BrnOffs$0008
NEWTIME
BRANCH
BrnOffs$0004
ELSE
NEWDATE
ENDIF
BRANCH
BrnOffs$000E
INIT-RTC
''CLKRST
ConstDISPLAY1
w-TYPE
NEWDATE
NEWTIME
Const0
OBRANCH
BrnOffs$FFC4
Finish

^!PRNBUF1x
VarPRNBUF1
+
1-
C!
Finish

^CLR-PRNBUF1
LIT
LV$1318
VarPRNBUF1
(DO)
LIT
LV$0020
)
C!
(LOOP)
BrnOffs$FFF6
Const0
LIT
LV$1318
C!
Finish

^CLR-PRNBUF2
LIT
LV$1343
VarPRNBUF2
(DO)
LIT
LV$0020
)
C!
(LOOP)
BrnOffs$FFF6
Const0
LIT
LV$1343
C!
Finish

^BOLD
LIT
LV$001B
PRNTCHAR
LIT
LV$0047
PRNTCHAR
Finish

^BIG
LIT
LV$000E
PRNTCHAR
Finish

^BIGBOLD
BIG
BOLD
Finish

^PNORMAL
LIT
LV$001B
PRNTCHAR
LIT
LV$0048
PRNTCHAR
Finish

^PRNTRDaT
CLR-PRNBUF1
STOPCLK
CNVRTdate
VarPRNBUF1
SWAP
CMOVE
CNVRTtime
VarPRNBUF1
LIT
LV$000F
+
SWAP
2DUP
+
>R
CMOVE
VarfPM
@
OBRANCH
BrnOffs$0008
TxtPM
BRANCH
BrnOffs$0004
ELSE
TxtAM
ENDIF
Count
R>
SWAP
2DUP
+
>R
CMOVE
Const0
R>
1+
C!
STRTCLK
Finish

^PRNanswer
Var>990err
@
0=
OBRANCH
BrnOffs$0040
Var2DIGrslt
2@
DUP
0<
OBRANCH
BrnOffs$0008
LIT
LV$002D
PRNTCHAR
ENDIF
DABS
Var2DIGrslt
LIT
LV$0004
+
@
Ptr'F#CNVRT
@
EXECUTE
PRINTSTRING
VarPPM/PPB
@
OBRANCH
BrnOffs$0008
TxtUPPM
BRANCH
BrnOffs$0004
ELSE
TxtUPPB
ENDIF
Count
PRINTSTRING
BRANCH
BrnOffs$0008
ELSE
Txt>990err
Count
PRINTSTRING
ENDIF
PRNTcrlf
Finish

^PRNCALDATA
CLR-PRNBUF2
TxtCalDate
Count
VarPRNBUF2
C!
VarPRNBUF2
COUNT
CMOVE
VarCALDATE
COUNT
DUP
>R
VarPRNBUF2
COUNT
2+
DUP
>R
+
SWAP
CMOVE
R>
R>
+
VarPRNBUF2
C!
VarCALTIME
COUNT
DUP
>R
VarPRNBUF2
COUNT
2+
DUP
>R
+
SWAP
CMOVE
R>
R>
+
VarPRNBUF2
C!
BOLD
VarPRNBUF2
COUNT
PRINTSTRING
PRNTcrlf
PNORMAL
Finish

^PRINT-RESULTS
VarPRNTOPTI/O
C@
ConstPRNTOPTbit
AND
OBRANCH
BrnOffs$0004
EXIT
ENDIF
CLR-PRNBUF2
PRNTcrlf
BOLD
TxtSMPL#
Count
PRINTSTRING
PNORMAL
Ptr'GET-SMPL#
@
EXECUTE
Const0
<#
#S
#>
PRINTSTRING
PRNTcrlf
Ptr'M#PRNT
@
EXECUTE
PRNCALDATA
BOLD
TxtPDq
Count
PRINTSTRING
PNORMAL
VarPRNBUF1
LIT
LV$000A
PRINTSTRING
BOLD
TxtPTm
Count
PRINTSTRING
PNORMAL
VarPRNBUF1
LIT
LV$000F
+
LIT
LV$000B
PRINTSTRING
PRNTcrlf
BOLD
TxtPRslts
Count
PRINTSTRING
PNORMAL
PRNanswer
PRNTcrlf
Finish

^COMNTS
BOLD
TxtCOMNTS
Count
DUP
>R
PRINTSTRING
PNORMAL
LIT
LV$0028
R>
(DO)
LIT
LV$005F
PRNTCHAR
(LOOP)
BrnOffs$FFF8
LIT
LV$0006
Const0
(DO)
PRNTcrlf
(LOOP)
BrnOffs$FFFC
Finish

^PRN-CALVLUS
CLR-PRNBUF2
BOLD
TxtPCAL
Count
PRINTSTRING
PRNTcrlf
PNORMAL
CLR-PRNBUF2
VarCALIBVLU
2@
DUP
>R
DABS
VarCALIBVLU
LIT
LV$0004
+
@
F#CNVRT
LIT
LV$0004
MIN
VarPRNBUF2
R>
0<
OBRANCH
BrnOffs$000C
LIT
LV$002D
OVER
C!
1+
ENDIF
SWAP
2DUP
+
>R
CMOVE
VarPPM/PPB
@
OBRANCH
BrnOffs$0008
TxtPPM
BRANCH
BrnOffs$0004
ELSE
TxtPPB
ENDIF
Count
R>
1+
SWAP
CMOVE
VarBLNKVLU
2@
DUP
>R
DABS
2DUP
+
0=
OBRANCH
BrnOffs$000A
LIT
LV$FFFF
BRANCH
BrnOffs$000C
ELSE
VarBLNKVLU
LIT
LV$0004
+
@
ENDIF
F#CNVRT
LIT
LV$0004
MIN
VarPRNBUF2
LIT
LV$000F
+
R>
0<
OBRANCH
BrnOffs$000C
LIT
LV$002D
OVER
C!
1+
ENDIF
SWAP
2DUP
+
>R
CMOVE
VarPPM/PPB
@
OBRANCH
BrnOffs$0008
TxtPPM
BRANCH
BrnOffs$0004
ELSE
TxtPPB
ENDIF
Count
R>
1+
SWAP
CMOVE
ConstSMPLDLY
@
Const0
<#
#S
#>
VarPRNBUF2
LIT
LV$0019
+
SWAP
2DUP
+
>R
CMOVE
TxtDsec
Count
R>
SWAP
CMOVE
VarPRNBUF2
Count
PRINTSTRING
PRNTcrlf
Finish

^PRINT-CALIB
PRNTcrlf
CLR-PRNBUF2
BIGBOLD
TxtPNAME1
Count
PRINTSTRING
PRNTcrlf
BOLD
CFA
Ptr'M#PRNT
@
EXECUTE
BOLD
TxtPNAM2
Count
PRINTSTRING
PRNTcrlf
BOLD
TxtPDaTm
Count
PRINTSTRING
PRNTcrlf
PNORMAL
VarPRNBUF1
Count
PRINTSTRING
PRNTcrlf
PRN-CALVLUS
PRNTcrlf
PRNTcrlf
PRNTcrlf
PRNTcrlf
Finish

^PRNTHDR
PRNTRDaT
PRINT-CALIB
Finish

^INIT-PRINTER
LIT
LV$FFFF
VarPRNTerr
!
INIT-PORT2
ConstTerr
VarPRNTIMER
!
Const0
VarPRNTerr
!
LIT
LV$0018
PRNTCHAR
PRNTcrlf
LIT
LV$0014
DELAY[ms]
@RUNTIME[10ths]
LIT
LV$0028
LIT
LV$0000
D+
BEGIN
2DUP
@RUNTIME[10ths]
D<
PBUF!pntr
@
VarPBUF@pntr
@
=
OR
OBRANCH
BrnOffs$FFEC
2DROP
PRNTcrlf
Finish

^METHOD
Finish

^@METHODadr
VarMETHOD#
@
VarBYTES/METHOD
*
+
ConstMETHODQ
+
Finish

^@MCKSUM
Const0
ConstMDELAY
@METHODadr
DUP
VarBYTES/METHOD
+
SWAP
(DO)
)
@
+
Const2
(+LOOP)
BrnOffs$FFF6
Finish

^CKSUM-METHOD
Const0
ConstMCKSUM
@METHODadr
!
@MCKSUM
LIT
LV$FFFF
XOR
ConstMCKSUM
@METHODadr
!
Finish

^SET-DEFAULTS
ConstMDEFAULT
ConstMETHODQ
VarBYTES/METHOD
VarMETHOD#
@
*
+
VarBYTES/METHOD
CMOVE
CNVRTdate
ConstMDATE
@METHODadr
SWAP
CMOVE
CKSUM-METHOD
ConstMDEFAULT
ConstMDELAY
+
@
ConstSMPLDLY
!
ConstMDEFAULT
ConstMUNITS
+
@
VarPPM/PPB
!
ConstMDEFAULT
ConstMFORMAT
+
@
VarFORMAT
!
ConstMDEFAULT
ConstHCALVLU
+
VarCALIBVLU
LIT
LV$0006
CMOVE
ConstMDEFAULT
ConstHCALVLU
+
VarBLNKVLU
LIT
LV$0006
CMOVE
Finish

^RESET-METHODQ
''MQRESET1
ConstDISPLAY1
w-TYPE
''MQRESET2
ConstDISPLAY2
w-TYPE
PCkey
DROP
TxtMQRESET3
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
ConstMETHODQ
ConstMQsiz
LIT
LV$FFFF
FILL
Const0
VarMETHOD#
!
SET-DEFAULTS
LIT
LV$55AA
Var`55AA'
!
Finish

^GET-DELAYTIME
TxtTESTDLY
ConstDISPLAY1
w-TYPE
TxtSECS
ConstDISPLAY2
w-TYPE
ConstSMPLDLY
@
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
LV$0004
+
!
GET[sec]
ConstSMPLDLY
!
Finish

^GETUNITS
Const0
Varf>MENU
!
VarQAflg
@
OBRANCH
BrnOffs$000A
Const0
VarFORMAT
!
EXIT
ENDIF
TxtUNITS1
ConstDISPLAY1
w-TYPE
Txt?UNITS2
ConstDISPLAY2
w-TYPE
Const0
DROP
PCkey
ConstF1
OVER
=
OVER
ConstF3
=
OR
OBRANCH
BrnOffs$FFEC
ConstF1
=
VarFORMAT
!
LIT
LV$FFFF
Varf>MENU
!
Finish

^GET-DSPLYUNITS
Const0
Varf>MENU
!
Txt?PPM1
ConstDISPLAY1
w-TYPE
Txt?PPM2
ConstDISPLAY2
w-TYPE
Const0
DROP
PCkey
ConstF1
OVER
=
OVER
ConstF3
=
OR
OBRANCH
BrnOffs$FFEC
ConstF1
=
VarPPM/PPB
!
LIT
LV$FFFF
Varf>MENU
!
Finish

^?CALvlu>BLNKvlu
>R
2DUP
LIT
LV$0DEC
@
VarCALIBVLU
2@
DROP
nF-
SWAP
DROP
Const0
<=
DUP
0=
OBRANCH
BrnOffs$0008
TxtBLKv>CALv
ConstDISPLAY1
w-TYPE
ENDIF
R>
SWAP
Finish

^GET-CAL-VALUE
TxtCALVLU
ConstDISPLAY1
w-TYPE
VarPPM/PPB
@
OBRANCH
BrnOffs$0008
TxtNTRppm
BRANCH
BrnOffs$0004
ELSE
TxtNTRppb
ENDIF
ConstDISPLAY2
w-TYPE
Const1
VarMINx
!
Const2
VarMAXx
!
Const0
Varf+/-#
!
VarCALIBVLU
2@
LIT
1000
LIT
LV$0000
TxtDMIN
2DUP
VarCALIBVLU
2!
VarINITVLU
2!
LIT
LV$0DEC
@
LIT
LV$0004
MIN
LIT
LV$FFFC
MAX
LIT
LV$0E7C
!
VarINITVLU
LIT
LV$0004
+
@
LIT
LV$FFFF
<
OBRANCH
BrnOffs$0032
VarINITVLU
2@
VarINITVLU
LIT
LV$0004
+
@
ABS
Const1
(DO)
LIT
LV$000A
D/
(LOOP)
BrnOffs$FFF8
VarINITVLU
2!
LIT
LV$FFFF
VarINITVLU
LIT
LV$0004
+
!
ENDIF
Const0
LIT
LV$0000
LIT
LV$0000
BEGIN
2DROP
DROP
''GET[F#]
2DUP
LIT
LV$0000
LIT
LV$0000
D>
OBRANCH
BrnOffs$FFEC
ROT
>R
BEGIN
2DUP
LIT
1000
LIT
LV$0000
D<=
OBRANCH
BrnOffs$0014
LIT
LV$000A
D*
R>
1-
>R
Const0
BRANCH
BrnOffs$0006
ELSE
LIT
LV$FFFF
ENDIF
OBRANCH
BrnOffs$FFD8
R>
LIT
LV$0DEC
!
VarCALIBVLU
2!
Finish

^GET-BLANK-VALUE
TxtBLNKVLU
ConstDISPLAY1
w-TYPE
Const0
LIT
LV$0000
LIT
LV$0000
BEGIN
2DROP
DROP
VarPPM/PPB
@
OBRANCH
BrnOffs$0008
TxtNTRppm
BRANCH
BrnOffs$0004
ELSE
TxtNTRppb
ENDIF
ConstDISPLAY2
w-TYPE
Const1
VarMINx
!
Const2
VarMAXx
!
LIT
LV$FFFF
Varf+/-#
!
VarBLNKVLU
2@
LIT
LV$FC18
LIT
LV$FFFF
DMAX
2DUP
VarBLNKVLU
2!
VarINITVLU
2!
LIT
LV$0DF2
@
LIT
LV$0004
MIN
LIT
LV$FFFC
MAX
LIT
LV$0E7C
!
''GET[F#]
?CALvlu>BLNKvlu
OBRANCH
BrnOffs$FF9E
VarBLNKVLU
2!
LIT
LV$0DF2
!
Finish

^SETUP-METHOD
ConstSMPLDLY
@
0<
ConstSMPLDLY
@
LIT
1000
>
OR
OBRANCH
BrnOffs$0004
SET-DEFAULTS
ENDIF
GET-DELAYTIME
GET-DSPLYUNITS
Const0
VarQAflg
!
GETUNITS
GET-CAL-VALUE
GET-BLANK-VALUE
ConstRESTPARS
ConstMDELAY
@METHODadr
LIT
LV$0012
CMOVE
CNVRTdate
ConstMDATE
@METHODadr
SWAP
CMOVE
CKSUM-METHOD
Finish

^WAIT[VialIn]
CHK-PRNTok
?BKliteOFF
UPDATEkeyQ
VarVIALSWI/O
C@
ConstVIALbit
AND
0=
OBRANCH
BrnOffs$0016
LIT
LV$00FA
DELAY[ms]
VarVIALSWI/O
C@
ConstVIALbit
AND
0=
BRANCH
BrnOffs$0004
Const0
OBRANCH
BrnOffs$000E
LIT
LV$FFFF
VarfVIAL
!
BRANCH
BrnOffs$0008
Const0
VarfVIAL
!
VarfVIAL
@
OBRANCH
BrnOffs$FFBA
BKliteON
Finish

^WAIT[VialOut]
Const0
ConstF3key
!
ConstF3key
@
OBRANCH
BrnOffs$0010
Ptr'DO-TEST
@
EXECUTE
Const0
ConstF3key
!
REMOV
VarKEYLOCK
@
0=
OBRANCH
BrnOffs$0004
UPDATEkeyQ
CHK-PRNTok
?BKliteOFF
VarVIALSWI/O
C@
ConstVIALbit
AND
0=
OBRANCH
BrnOffs$000A
LIT
LV$FFFF
BRANCH
BrnOffs$0012
LIT
LV$0064
DELAY[ms]
VarVIALSWI/O
C@
ConstVIALbit
AND
0=
OBRANCH
BrnOffs$000E
LIT
LV$FFFF
VarfVIAL
!
BRANCH
BrnOffs$0008
Const0
VarfVIAL
!
VarfVIAL
@
0=
OBRANCH
BrnOffs$FF96
Const0
VarfVIAL
!
Const0
ConstfNEGOK
!
BKliteON
Finish

^ACQUIRE-READING
Const0
VarfABORT
!
Const0
VarTRIGerr
!
INIT-MEASURE-DATA
VarGAINexp
@
Const2
>
OBRANCH
BrnOffs$000A
LIT
LV$0008
BRANCH
BrnOffs$0006
LIT
LV$0004
1-
VarMINSMPL#
!
INIT-SIGFILTER
PRIME-LAMP-CONTROL
CR
Const#TRIES
2+
Const0
(DO)
@AVEDTA
VarSUM[Rn]
2@
D+
VarSUM[Rn]
2!
Const1
VarCYCL[n]
+!
VarCYCL[n]
@
DUP
.
VarMINSMPL#
@
>
OBRANCH
BrnOffs$0042
VarSUM[Rn]
2@
VarR[Hi]
@
VarR[Lo]
@
-
Const1
MAX
D/
2DUP
Var1/Dlta
2!
ConstLimit
Const0
D>
VarfABORT
@
OR
VarSUM[Rn]
2@
LIT
LV$0064
VarCYCL[n]
@
*
Const0
D<
OR
OBRANCH
BrnOffs$0004
LEAVE
(LOOP)
BrnOffs$FF9A
Var1/Dlta
2@
OBRANCH
BrnOffs$000A
DROP
Const0
BRANCH
BrnOffs$001E
DUP
0<
OBRANCH
BrnOffs$000A
DROP
Const0
BRANCH
BrnOffs$000E
LIT
LV$2710
SWAP
Const1
MAX
/
VarDlta
!
VarCYCL[n]
@
Const#TRIES
>
LIT
LV$0064
Const#TRIES
*
Const0
VarSUM[Rn]
2@
D<
AND
OBRANCH
BrnOffs$001B
CR
.''
CV$0E
''UNSTABLE DATA ''
Const0
BRANCH
BrnOffs$0006
LIT
LV$FFFF
ConstfErLimit
!
TYPE-ALL
Finish

^CALC-RESULTS
@AVE[S/R]
''R1
VarGAINexp
@
LIT
LV$0004
*
VarBLANKdata
+
2@
nF-
VarCALIBVLU
LIT
LV$0004
+
@
VarCALIBVLU
2@
DROP
VarBLNKVLU
LIT
LV$0004
+
@
VarBLNKVLU
2@
DROP
DUP
>R
OVER
>R
nF-
VarCALdata
2@
OVER
ABS
LIT
LV$0004
*
VarBLANKdata
+
2@
nF-
Const1
MAX
nF*/
VarCALdata
2@
DROP
ABS
LIT
LV$0004
*
VarDltaGains
+
2@
VarGAINexp
@
LIT
LV$0004
*
VarDltaGains
+
2@
nF*/
R>
R>
nF+
''R12
2DUP
VarnFresult
2!
2DUP
S->D
VarRESULTS
2!
LIT
LV$0E5A
!
S->D
j,d>2DIG
Finish

^DISPLAY-RESULTS
Var>990err
@
OBRANCH
BrnOffs$000A
Txt>990err
ConstDISPLAY1
w-TYPE
EXIT
TxtRSLTS
ConstDISPLAY1
w-TYPE
Var2DIGrslt
2@
ConstfNEGOK
@
0=
OBRANCH
BrnOffs$000C
LIT
LV$0000
LIT
LV$0000
DMAX
Const0
ConstF2key
!
Const0
ConstfNEGOK
!
2DUP
Var2DIGrslt
2!
2DUP
VarRESULTS
2!
LIT
LV$0EBC
@
DUP
LIT
LV$0E5A
!
SHOW-ANSWER
Finish

^DO-TEST
LIT
LV$0005
VarMAXx
!
?VIAL-IN
OBRANCH
BrnOffs$003A
TxtHavis
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
MEASURE-SAMPLE
?VIAL-IN
?DATAok
AND
OBRANCH
BrnOffs$0020
CALC-RESULTS
DISPLAY-RESULTS
Var>990err
@
0=
OBRANCH
BrnOffs$0012
PRNTRDaT
PRINT-RESULTS
VarfTEST
@
0=
OBRANCH
BrnOffs$0004
COMNTS
DISPLAY-DATA
Finish

^METHODandCALIB
SELECT-METHOD
DO-CALIBRATION
Finish

^GAINSET
VarMINx
@
VarMINxSV
!
VarMAXx
@
VarMAXx
!
''SETGAIN1
ConstDISPLAY1
w-TYPE
''SETGAIN2
ConstDISPLAY2
w-TYPE
LIT
LV$0011
VarMINx
!
LIT
LV$0011
VarMAXx
!
VarGAINexp
@
Const0
VarINITVLU
2!
Const0
VarINITVLU
LIT
LV$0004
+
!
Const0
Varf+/-#
!
GET[n#]
DUP
VarGAINexp
!
Const0
OVER
<=
SWAP
Const3
<=
AND
OBRANCH
BrnOffs$FFBC
Const0
VarGAINexp
@
1+
Const0
(DO)
LIT
LV$000A
*
Const1
MAX
(LOOP)
BrnOffs$FFF4
SETGAIN
VarMINxSV
@
VarMINx
!
VarMAXx
@
VarMAXx
!
Finish

^SHOW-RSLTS
ACQUIRE-READING
VarSIG[Ave]
@
N#CNVRT
LIT
LV$0005
ConstDISPLAY1
wx-TYPE
VarREF[Ave]
@
N#CNVRT
LIT
LV$000E
ConstDISPLAY1
wx-TYPE
VarGAINexp
@
N#CNVRT
LIT
LV$0018
ConstDISPLAY1
wx-TYPE
VarSIGok
@
0=
VarREFok
@
0=
OR
ConstfErLimit
@
0=
OR
VarfABORT
@
OR
VarLMPERR
@
0>
OR
OBRANCH
BrnOffs$0014
TxtDTAerr
ConstDISPLAY2
w-TYPE
LIT
LV$FFFF
VarDTAerr?
!
BRANCH
BrnOffs$006A
VarDTAerr?
@
OBRANCH
BrnOffs$000E
TxtSIG/REF
ConstDISPLAY2
w-TYPE
Const0
VarDTAerr?
!
@AVE[S/R]
SWAP
DROP
S->D
LIT
LV$FFFC
FORMAT-ANSWER
LIT
LV$0006
MIN
LIT
LV$0006
ConstDISPLAY2
wx-TYPE
VarCALok
@
OBRANCH
BrnOffs$0026
CALC-RESULTS
VarRESULTS
2@
VarRESULTS
LIT
LV$0004
+
@
FORMAT-ANSWER
LIT
LV$0005
MIN
LIT
LV$0014
ConstDISPLAY2
wx-TYPE
BRANCH
BrnOffs$000E
TxtCALreq
Count
LIT
LV$000D
ConstDISPLAY2
wx-TYPE
Finish

^LOOP-FIRE
Const0
LIT
LV$000A
Const0
(DO)
FIRE-LAMP
VarLMPERR
@
+
(LOOP)
BrnOffs$FFF6
Finish

^BADLMP-DET
BOLD
TxtBADLMP
Count
PRINTSTRING
PRNTcrlf
TxtOPAQIN
ConstDISPLAY1
w-TYPE
TxtACK
ConstDISPLAY2
w-TYPE
BEGIN
PCkey
LIT
LV$000D
=
OBRANCH
BrnOffs$FFF6
LOOP-FIRE
LIT
LV$0007
<
PRNT-FAIL/PASS
TxtOPAQOUT
ConstDISPLAY2
w-TYPE
WAIT[VialOut]
Finish

^TOGGLE
OVER
C@
XOR
SWAP
C!
Finish

^+ORIGIN
LIT
LV$C000
+
Finish

^1+
Const1
+
Finish

^2+
Const2
+
Finish

^ROT
>R
SWAP
R>
SWAP
Finish

^SPACE
ConstBL
EMIT
Finish

^MIN
OVER
OVER
>
OBRANCH
BrnOffs$0004
SWAP
ENDIF
DROP
Finish

^MAX
OVER
OVER
<
OBRANCH
BrnOffs$0004
SWAP
ENDIF
DROP
Finish

^-DUP
DUP
OBRANCH
BrnOffs$0004
DUP
ENDIF
Finish

^TRAVERSE
SWAP
BEGIN
OVER
+
ChrLit
LV$7F
OVER
C@
<
OBRANCH
BrnOffs$FFF1
SWAP
DROP
Finish

^LATEST
CURRENT
@
@
Finish

^LFA
ChrLit
LV$04
-
Finish

^CFA
ChrLit
LV$05
-
Const1
MINUS
TRAVERSE
Finish

^NFA
ChrLit
LV$05
-
Const1
MINUS
TRAVERSE
Finish

^PFA
Const1
TRAVERSE
ChrLit
LV$05
+
Finish

^CSP
USER
UsrCode$0036
Finish

S0
USER
UsrCode$0006
Finish

^!CSP
SP@
CSP
!
Finish

^?ERROR
SWAP
OBRANCH
BrnOffs$0008
ERROR
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
Finish

^?COMP
STATE
@
0=
ChrLit
LV$11
?ERROR
Finish

^?EXEC
STATE
@
ChrLit
LV$12
?ERROR
Finish

^?PAIRS
-
ChrLit
LV$13
?ERROR
Finish

^?CSP
SP@
CSP
@
-
ChrLit
LV$14
?ERROR
Finish

^[
Const0
STATE
!
Finish

^]
ChrLit
LV$C0
STATE
!
Finish

^SMUDGE
LATEST
ChrLit
LV$20
TOGGLE
Finish

^COUNT
DUP
1+
SWAP
C@
Finish

^TYPE
-DUP
OBRANCH
BrnOffs$0018
OVER
+
SWAP
(DO)
)
C@
EMIT
(LOOP)
BrnOffs$FFF8
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
Finish

^TRAILING
DUP
Const0
(DO)
OVER
OVER
+
Const1
-
C@
ConstBL
-
OBRANCH
BrnOffs$0008
LEAVE
BRANCH
BrnOffs$0006
ELSE
Const1
-
ENDIF
(LOOP)
BrnOffs$FFE0
Finish

^?STACK
ChrLit
LV$12
+ORIGIN
@
Const2
1-
SP@
<
Const1
?ERROR
SP@
LIT
LV$0300
ChrLit
LV$20
+
<
OBRANCH
BrnOffs$0006
Const2
?ERROR
ENDIF
Finish

^EXPECT
OVER
+
OVER
(DO)
KEY
DUP
ChrLit
LV$0E
+ORIGIN
@
=
OBRANCH
BrnOffs$0029
DROP
ChrLit
LV$08
EMIT
ChrLit
LV$20
EMIT
ChrLit
LV$08
OVER
)
=
DUP
R>
Const2
1-
+
>R
1-
BRANCH
BrnOffs$0027
ELSE
DUP
ChrLit
LV$0D
=
OBRANCH
BrnOffs$000E
LEAVE
DROP
ConstBL
Const0
BRANCH
BrnOffs$0004
ENDIF
DUP
)
C!
Const0
)
1+
!
ENDIF
EMIT
(LOOP)
BrnOffs$FF9F
DROP
Finish

FILL:
SWAP
>R
OVER
C!
DUP
1+
R>
Const1
-
CMOVE
Finish

^ERASE
Const0
FILL
Finish

^BLANKS
ConstBL
FILL
Finish

^HOLD
LIT
LV$FFFF
VarHLD
+!
VarHLD
@
C!
Finish

^FIND
ConstBL
WORD
HERE
CONTEXT
@
@
(FIND)
DUP
0=
OBRANCH
BrnOffs$000A
DROP
HERE
LATEST
(FIND)
ENDIF
Finish

^CREATE
-FIND
OBRANCH
BrnOffs$0015
DROP
LIT
LV$0007
EMIT
NFA
ID.
ChrLit
LV$04
MESSAGE
SPACE
ENDIF
HERE
DUP
C@
UsrWIDTH
@
MIN
1+
ALLOT
DUP
ChrLit
LV$A0
TOGGLE
HERE
Const1
-
ChrLit
LV$80
TOGGLE
LATEST
,
CURRENT
@
!
HERE
2+
,
Finish

^QUIT
Const0
BLK
!
[
RP!
CR
QUERY
INTERPRET
STATE
@
0=
OBRANCH
BrnOffs$0008
.''
CV$03
'' OK''
BRANCH
BrnOffs$FFE6
Finish

^ABORT1
SP!
DECIMAL
?STACK
Const0
OFFSET
!
CR
.''
CV$22
''Oxbridge FORTH79/6800  3/8/90''
CR
.''
CV$1E
''(C) 1989,1990 by Oxbridge Inc.''
DEFINITIONS
Finish

^ABORT
ABORT1
QUIT
Finish

^BOOT
ABORT1
VarVBOOT
@
EXECUTE
QUIT
Finish

^S->D
DUP
0<
MINUS
Finish

^STATE
USER
UsrCode$002C
Finish

^/MOD
DUP
0<
>R
ABS
SWAP
DUP
0<
>R
ABS
S->D
ROT
U/
SWAP
)
OBRANCH
BrnOffs$0004
MINUS
ENDIF
SWAP
R>
R>
XOR
OBRANCH
BrnOffs$0004
MINUS
ENDIF
Finish

^*/MOD
>R
U)
R>
U/
Finish

^*/
*/MOD
SWAP
DROP
Finish

^M/MOD
>R
Const0
R
U/
R>
SWAP
>R
U/
R>
Finish

^ABS
DUP
0<
OBRANCH
BrnOffs$0004
MINUS
ENDIF
Finish

^DABS
DUP
0<
OBRANCH
BrnOffs$0004
DMINUS
ENDIF
Finish

^'
-FIND
0=
Const0
?ERROR
DROP
LITERAL
Finish

^BEGIN
?COMP
HERE
Const1
Finish

^ENDIF
?COMP
Const2
?PAIRS
HERE
OVER
-
SWAP
!
Finish

^THEN
ENDIF
Finish

^DO
COMPILE
(DO)
HERE
Const3
Finish

^LOOP
Const3
?PAIRS
COMPILE
(LOOP)
BACK
Finish

^+LOOP
Const3
?PAIRS
COMPILE
(+LOOP)
BACK
Finish

^UNTIL
Const1
?PAIRS
COMPILE
OBRANCH
BACK
Finish

^END
UNTIL
Finish

^AGAIN
Const1
?PAIRS
COMPILE
BRANCH
BACK
Finish

^REPEAT
>R
>R
AGAIN
R>
R>
Const2
-
ENDIF
Finish

^IF
COMPILE
OBRANCH
HERE
Const0
,
Const2
Finish

^ELSE
Const2
?PAIRS
COMPILE
BRANCH
HERE
Const0
,
SWAP
Const2
ENDIF
Const2
Finish

^WHILE
IF
2+
Finish

^SPACES
Const0
MAX
-DUP
OBRANCH
BrnOffs$000C
Const0
(DO)
SPACE
(LOOP)
BrnOffs$FFFC
ENDIF
Finish

^<#
PAD
VarHLD
!
Finish

^#>
DROP
DROP
VarHLD
@
PAD
OVER
-
Finish

^SIGN
ROT
0<
OBRANCH
BrnOffs$0007
ChrLit
LV$2D
HOLD
ENDIF
Finish

^#
BASE
@
M/MOD
ROT
ChrLit
LV$09
OVER
<
OBRANCH
BrnOffs$0007
ChrLit
LV$07
+
ENDIF
ChrLit
LV$30
+
HOLD
Finish

^#S
BEGIN
#
OVER
OVER
OR
0=
OBRANCH
BrnOffs$FFF4
Finish

^.R
>R
S->D
R>
D.R
Finish

^D.R
>R
SWAP
OVER
DABS
<#
#S
SIGN
#>
R>
OVER
-
SPACES
TYPE
Finish

^D.
Const0
D.R
SPACE
Finish

^.
S->D
D.
Finish

^?
@
.
Finish

^EXIT
R>
DROP
Finish

^@RUNHR
LIT
LV$0210
C@
Finish

^@RUNMIN
LIT
LV$0211
C@
Finish

^@RUNSEC
LIT
LV$0212
C@
Finish

^@RUN10TH
LIT
1000
LIT
TickCtr
@
-
LIT
LV$0064
/
Finish

^#RUNmsec
LIT
1000
LIT
TickCtr
@
-
Finish

^WRTc1
LIT
LV$DDF5
NFA
1+
C!
DUP
LIT
LV$DE1B
NFA
1+
C!
LIT
LV$DE2D
NFA
1+
C!
Finish

^D*
DUP
>R
OVER
>R
>R
DABS
R>
ABS
SWAP
OVER
*
>R
U)
Const0
R>
D+
R>
R>
XOR
0<
OBRANCH
BrnOffs$0004
ENDIF
DMINUS
Finish

^D/
DUP
0=
OBRANCH
BrnOffs$0006
DROP
Const1
ENDIF
OVER
>R
>R
DABS
R
ABS
/MOD
ROT
ROT
R
ABS
M/MOD
ROT
DROP
ROT
Const0
SWAP
D+
R>
R>
XOR
0<
OBRANCH
BrnOffs$0004
DMINUS
ENDIF
Finish

^DMAX
2OVER
2OVER
D<
OBRANCH
BrnOffs$0004
2SWAP
ENDIF
2DROP
Finish

^DMIN
2OVER
2OVER
D>
OBRANCH
BrnOffs$0004
2SWAP
ENDIF
2DROP
Finish

^nF/
LIT
LV$8001
MAX
>R
>R
LIT
LV$8001
MAX
R>
R>
DUP
0=
OBRANCH
BrnOffs$0016
2DROP
2DROP
LIT
LV$FFFF
VarCALCERR
!
LIT
LV$000A
Const1
EXIT
ENDIF
DUP
Varsgn2
!
SWAP
VarJ2
!
ABS
LIT
LV$0010
Const0
(DO)
)
Varj2
!
DUP
LIT
LV$3E80
>
OBRANCH
BrnOffs$0008
LEAVE
BRANCH
BrnOffs$0004
ELSE
2*
ENDIF
(LOOP)
BrnOffs$FFE4
>R
DUP
Varsgn1
!
SWAP
VarJ1
!
ABS
LIT
LV$0010
Const0
(DO)
)
Varj1
!
DUP
LIT
LV$3E80
>
OBRANCH
BrnOffs$0008
LEAVE
BRANCH
BrnOffs$0004
ELSE
*
ENDIF
(LOOP)
BrnOffs$FFE4
LIT
LV$2710
LIT
LV$FFFC
VarJ1
+!
R>
*/
Varj2
@
Varj1
@
-
DUP
>
OBRANCH
BrnOffs$0028
LIT
LV$0006
*
ConstJSTTB`
+
DUP
LIT
LV$0004
+
@
VarJ1
+!
DUP
2+
@
SWAP
@
*/
Const0
ENDIF
DUP
0<
OBRANCH
BrnOffs$0036
ABS
LIT
LV$0006
*
ConstJSTTB`
+
DUP
LIT
LV$0004
+
@
1-
MINUS
VarJ1
+!
DUP
@
LIT
LV$000A
/
SWAP
2+
@
*/
BRANCH
BrnOffs$0004
ELSE
DROP
ENDIF
Varsgn1
@
Varsgn2
@
XOR
0<
OBRANCH
BrnOffs$0004
MINUS
ENDIF
VarJ1
@
VarJ2
@
-
SWAP
Finish

^nF*
LIT
LV$8001
MAX
>R
>R
LIT
LV$8001
MAX
R>
R>
DUP
0=
OBRANCH
BrnOffs$0016
2DROP
2DROP
LIT
LV$FFFF
VarCALCERR
!
LIT
LV$000A
Const1
EXIT
ENDIF
DUP
Varsgn2
!
SWAP
VarJ2
!
ABS
>R
DUP
Varsgn1
!
SWAP
VarJ1
!
ABS
Const0
R>
D*
BEGIN
2DUP
LIT
LV$7FFE
LIT
LV$0000
D>
OBRANCH
BrnOffs$001A
LIT
LV$000A
M/MOD
Const1
VarJ1
+!
ROT
Varn
!
Const0
BRANCH
BrnOffs$0006
ELSE
LIT
LV$FFFF
ENDIF
OBRANCH
BrnOffs$FFD2
DROP
Varn
@
LIT
LV$0004
>
OBRANCH
BrnOffs$0004
1+
ENDIF
Varsgn1
@
Varsgn2
@
XOR
0<
OBRANCH
BrnOffs$0004
MINUS
ENDIF
VarJ1
@
VarJ2
@
+
SWAP
Finish

^nF-
DUP
0<
OBRANCH
BrnOffs$000A
LIT
LV$FFFF
BRANCH
BrnOffs$0004
ELSE
Const0
Varn2
ENDIF
2!
VarJ2
!
DUP
0<
OBRANCH
BrnOffs$000A
LIT
LV$FFFF
BRANCH
BrnOffs$0004
ELSE
Const0
ENDIF
Varn1
2!
VarJ1
!
VarJ1
@
VarJ2
@
-
DUP
>
OBRANCH
BrnOffs$0024
DUP
Varn1
2@
ROT
Const0
(DO)
LIT
LV$000A
D*
(LOOP)
BrnOffs$FFF8
Varn1
2!
VarJ2
@
VarJ1
!
ENDIF
DUP
0<
OBRANCH
BrnOffs$0026
DUP
ABS
Varn2
2@
ROT
Const0
(DO)
LIT
LV$000A
D*
(LOOP)
BrnOffs$FFF8
Varn2
2!
VarJ1
@
VarJ2
!
ENDIF
DROP
Varn1
2@
Varn2
2@
D-
DUP
>R
DABS
LIT
LV$000A
D*
LIT
LV$FFFF
VarJ1
+!
BEGIN
Const1
VarJ1
+!
LIT
LV$000A
D/
2DUP
LIT
LV$7FFF
LIT
LV$0000
D<=
OBRANCH
BrnOffs$FFE6
DROP
R>
0<
OBRANCH
BrnOffs$0004
MINUS
ENDIF
VarJ1
@
SWAP
Finish

^nF+
MINUS
nF-
Finish

^nF*/
DUP
VarFsgn
!
ABS
Varn3
2!
DUP
VarFsgn
@
XOR
VarFsgn
!
ABS
Varn2
2!
DUP
VarFsgn
@
XOR
VarFsgn
!
ABS
Varn1
2!
Varn1
2+
@
Varn2
2+
@
+
Varn3
2+
@
-
Varn3
2+
!
Varn1
@
S->D
Varn2
@
D*
Varn3
@
D/
2DUP
LIT
LV$7530
LIT
LV$0000
D>
OBRANCH
BrnOffs$003C
BEGIN
LIT
LV$000A
M/MOD
ROT
Varn1
!
Const1
LIT
LV$05DC
+!
2DUP
LIT
LV$7530
LIT
LV$0000
D<
OBRANCH
BrnOffs$FFDE
Varn1
LIT
LV$0004
>
OBRANCH
BrnOffs$000C
LIT
LV$0001
LIT
LV$0000
D+
ENDIF
ENDIF
DROP
LIT
LV$05DC
@
SWAP
VarFsgn
@
0<
OBRANCH
BrnOffs$0004
MINUS
ENDIF
Finish

^CLRtimer
Const0
VarmsTIMER
!
Finish

^DELAY[ms]
Const0
MAX
CLRtimer
BEGIN
DUP
VarmsTIMER
@
<=
OBRANCH
BrnOffs$FFF6
DROP
Finish

^CLR-CHRBUF1
VarCHRBUF1
ConstDSPLYwdth
+
VarCHRBUF1
(DO)
LIT
LV$0020
)
C!
(LOOP)
BrnOffs$FFF6
VarCHRBUF1
VarBUF1pntr
!
Finish

^CLR-CHRBUF2
VarCHRBUF2
ConstDSPLYwdth
+
VarCHRBUF2
(DO)
LIT
LV$0020
)
C!
(LOOP)
BrnOffs$FFF6
VarCHRBUF2
VarBUF2pntr
!
Finish

^D<
D-
SWAP
DROP
Const0
<
Finish

^D>
2SWAP
D<
Finish

^D>
D<
0=
Finish

^PAD
ChrLit
LV$44
+
Finish

^D-
DMINUS
D+
Finish

^D<=
D>
0=
Finish

^?F3KEY
BEGIN
DaTmDSPLY
ConstRTCsec
@CLKDTA
VarSEC0
@
OVER
VarSEC0
!
<>
OBRANCH
BrnOffs$0004
DaTmDSPLY
ENDIF
?KEYPAD
DUP
OBRANCH
BrnOffs$0020
DROP
PCkey
ConstF1
OVER
=
OVER
ConstF3
=
OR
DUP
0=
OBRANCH
BrnOffs$0006
SWAP
DROP
ENDIF
ENDIF
OBRANCH
BrnOffs$FFC2
ConstF3
=
Finish

^BLK
USER
UsrCode$0016
Finish

^[
Const0
STATE
!
Finish

^]
ChrLit
LV$C0
STATE
!
Finish

^STATE
USER
UsrCode$002C
Finish

^BASE
USER
UsrCode$002E
Finish

^ERROR
WARNING
@
0<
OBRANCH
BrnOffs$0004
(ABORT)
ENDIF
HERE
COUNT
TYPE
.''
CV$04
"<BELL> ? "
MESSAGE
SP!
QUIT
Finish

^WARNING
USER
UsrCode$000E
Finish

^(ABORT)
ABORT
Finish

^QUERY
TIB
@
COLUMNS
@
EXPECT
Const0
IN
!
Finish

^TIB
USER
UsrCode$000A
Finish

COLUMNS:
USER
UsrCode$003C
Finish

^@AVEDTA
LIT
LV$0005
Const0
(DO)
SHFTDATA
INIT-MEASURE-CYCLE
ACQUIRE-SAMPLES
CALC[AveS/R]
DROP
VarSIGok
@
DUP
0=
OBRANCH
BrnOffs$0022
VarGAINvlu
@
LIT
LV$000A
/
DUP
0=
OBRANCH
BrnOffs$000A
LIT
LV$FFFF
VarfABORT
!
SETGAIN
INIT-SIGFILTER
INIT-MEASURE-DATA
VarfABORT
@
OR
OBRANCH
BrnOffs$0004
LEAVE
(LOOP)
$FFBC
VarAVE[S/R]
@
DUP
VarR[Hi]
@
>
OBRANCH
BrnOffs$0008
DUP
VarR[Hi]
!
DUP
VarR[Lo]
@
<
OBRANCH
BrnOffs$0008
DUP
VarR[Lo]
!
Const0
Finish

^MEASURE-SAMPLE
Const0
VarfABORT
!
Const0
VarTRIGerr
!
AGCGAIN
VarfABORT
@
OBRANCH
BrnOffs$0004
EXIT
VarGAINexp
@
VarGAINlimit
@
<
OBRANCH
BrnOffs$0004
ACQUIRE-READING
Finish

^GET-CAL-DATA
LIT
LV$0004
VarGAINlimit
!
TxtINCAL1
ConstDISPLAY1
w-TYPE
WAIT-ENT
?VIAL-IN
OBRANCH
BrnOffs$FFFA
TxtCTEST
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
MEASURE-SAMPLE
DATAok
DUP
OBRANCH
BrnOffs$0018
VarAVE[S/R]
@
DISPLAY-DATA
VarGAINexp
@
MINUS
SWAP
VarCALdata
2!
BRANCH
BrnOffs$0004
WAIT-ENT
?VIAL-IN
AND
OBRANCH
BrnOffs$FFB6
Finish

^GET-BLANK-DATA
TxtINBLNK1
ConstDISPLAY1
w-TYPE
WAIT-ENT
?VIAL-IN
OBRANCH
BrnOffs$FFFA
Const0
VarfABORT
!
LIT
LV$0004
VarGAINlimit
!
TxtBTEST
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
CR
.''
CV$0E
"BLANK READINGS"
CR
Const1
LIT
LV$0004
Const0
(DO)
DUP
SETGAIN
UPDATE-OFFSET
ACQUIRE-READING
DATAok
OBRANCH
BrnOffs$0066
CR
.''
CV$04
"SIG="
VarSIG[Ave]
@
.
.''
CV$04
"REF="
VarREF[Ave]
@
.
VarSIG[Ave]
@
LIT
LV$0FA0
<
VarGAINexp
@
)
=
AND
OBRANCH
BrnOffs$000A
)
2+
BRANCH
BrnOffs$000C
DROP
LIT
LV$FFFF
)
LEAVE
VarGAINlimit
!
VarGAINexp
@
MINUS
VarAVE[S/R]
@
VarBLANKdata
)
LIT
LV$0004
*
+
2!
DISPLAY-DATA
?VIAL-IN
0=
VarfABORT
@
OR
OBRANCH
BrnOffs$0004
LEAVE
LIT
LV$000A
*
(LOOP)
ConstKEYPADI/O
DROP
?VIAL-IN
VarfABORT
@
0=
AND
DUP
0=
OBRANCH
BrnOffs$0004
WAIT-ENT
OBRANCH
BrnOffs$FF15
Finish

^CHK-VIALOUT
?VIAL-IN
OBRANCH
BrnOffs$0010
TxtREMOV
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
WAIT[VialOut]
Finish

^DO-CALIBRATION
LIT
LV$FFFF
VarKEYLOCK
!
LIT
LV$FFFF
VarCALflg
!
CHK-VIALOUT
TxtSigErr
ConstDISPLAY2
w-TYPE
CALSTRT
ConstDISPLAY1
w-TYPE
CALC-GAINS
Const2
VarTESTTYPE
!
GET-CAL-DATA
VarDlta
@
VarCAL%Dlta
!
?VIAL-IN
OBRANCH
BrnOffs$000A
TxtREMOVCAL
ConstDISPLAY1
w-TYPE
WAIT[VialOut]
Const1
VarTESTTYPE
!
GET-BLANK-DATA
VarDlta
@
VarBLANK%Dlta
!
?VIAL-IN
OBRANCH
BrnOffs$0008
?CAL>BLANK
BRANCH
BrnOffs$0004
Const0
OBRANCH
BrnOffs$FFB2
VarGAINlimit
@
Const3
<=
OBRANCH
BrnOffs$000A
TxtBLNKLIM
ConstDISPLAY1
w-TYPE
WAIT-ENT
?VIAL-IN
OBRANCH
BrnOffs$0018
Ptr'PRNTRDaTm
2000.EXE
TxtREMOVBLNK
ConstDISPLAY1
w-TYPE
TxtBLANK
ConstDISPLAY2
w-TYPE
WAIT[VialOut]
Ptr'PRINT-CALIB
2000.EXE
CNVRTdate
VarCALDATE
C!
VarCALDATE
COUNT
CMOVE
CNVRTtime
Const3
-
VarCALTIME
C!
VarCALTIME
COUNT
CMOVE
VarfPM
@
OBRANCH
BrnOffs$0008
TxtPM
BRANCH
BrnOffs$0004
TxtAM
Const3
VarCALTIME
COUNT
+
SWAP
CMOVE
VarCALTIME
C@
Const3
+
VarCALTIME
C!
Const0
VarKEYLOCK
!
Const0
VarCALflg
!
LIT
LV$FFFF
VarCALok
!
Const0
ConstF1key
!
Finish

^DATAok
LIT
LV$FFFF
VarfABORT
!
?VIAL-OUT
OBRANCH
BrnOffs$000C
GET-ABORTMSG
ConstDISPLAY1
w-TYPE
Const0
EXIT
VarTRIGerr
@
OBRANCH
BrnOffs$000C
TxtLMPFAIL1
ConstDISPLAY1
w-TYPE
Const0
EXIT
VarGAINexp
@
VarGAINlimit
@
>=
OBRANCH
BrnOffs$0014
TxtUNRNGE
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
VarSIGok
@
0=
OBRANCH
BrnOffs$0014
TxtSIGerr
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
VarREFok
@
0=
OBRANCH
BrnOffs$0014
TxtREFERR
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
ConstfEr<Limit
@
0=
OBRANCH
BrnOffs$0014
TxtUNSTBL
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
Const0
VarfABORT
!
LIT
LV$FFFF
Finish

^ACQUIRE-SAMPLES
VarSMPLtotal
@
Const0
(DO)
READ-SAMPLE
?VIAL-OUT
VarfABORT
@
OR
OBRANCH
BrnOffs$0004
LEAVE
(LOOP)
$FFEE
?VIAL-IN
VarfABORT
@
0=
AND
OBRANCH
BrnOffs$0004
REJECT-OUTLYERS
Finish

^REMOV
TxtREMOV
ConstDISPLAY2
w-TYPE
Finish

^UPDATEkeyQ
VarfTEST
@
0=
MONITORkeyQ
VarfTEST
@
AND
OBRANCH
BrnOffs$0004
711.EXE
ENDIF
ConstF1key
@
VarCALflg
@
0=
AND
VarfTEST
@
0=
AND
OBRANCH
BrnOffs$000C
DROP
Ptr'RECAL
@
EXECUTE
TESTrtn
ENDIF
Finish

^CHK-PRNTok
VarPRNTerr
@
PRNTR_
@
0=
AND
OBRANCH
BrnOffs$0006
Ptr'RECHECK-PRNTR
2000.EXE
Finish

^711.EXE
Ptr'711TESTS
@
EXECUTE
Finish

^TESTrtn
S0
@
SP!
BEGIN
R>
0=
OBRANCH
BrnOffs$FFFA
Const0
>R
VarTESTRTN
@
>R
Const0
VarfTEST
!
Const0
VarQAflg
!
INIT-keyQ
Finish

^WAIT-ENT
TxtACK
ConstDISPLAY2
w-TYPE
BEGIN
PCkey
LIT
LV$000D
=
OBRANCH
BrnOffs$FFF6
Finish

^PCkey
VarfTEST
@
0=
key
SWAP
VarfTEST
@
AND
OBRANCH
BrnOffs$0004
711.EXE
ENDIF
VarfTEST
@
0=
OBRANCH
BrnOffs$0042
DUP
ConstF1
=
VarCALflg
@
0=
AND
OBRANCH
BrnOffs$000C
DROP
Ptr'RECAL
@
EXECUTE
TESTrtn
ENDIF
DUP
ConstF1
=
OVER
ConstF2
=
OR
OVER
ConstF3
=
OR
Varf>MENU
@
AND
OBRANCH
BrnOffs$0006
DROP
TESTrtn
ENDIF
ENDIF
Finish

^fx
LIT
LV$5A5A
!TSTBYTE
Finish

^SETcurser
DSPLY_WAITexec
SWAP
Const1
>
OBRANCH
BrnOffs$000A
LIT
LV$00C0
BRANCH
BrnOffs$0006
ENDIF
LITexec
LV$0080
+
1-
ConstDSPLY_INSTR
C!
Finish

^?DATAok
LIT
LV$FFFF
VarfABORT
!
?VIAL-OUT
OBRANCH
BrnOffs$000C
GET-ABORTMSG
ConstDISPLAY1
w-TYPE
Const0
EXIT
VarTRIGerr
@
OBRANCH
BrnOffs$000C
TxtLMPFAIL1
ConstDISPLAY1
w-TYPE
Const0
EXIT
VarGAINexp
@
VarGAINlimit
@
>=
OBRANCH
BrnOffs$0014
TxtUNRNGE
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
VarSIGok
@
0=
OBRANCH
BrnOffs$0014
TxtSIGerr
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
VarREFok
@
0=
OBRANCH
BrnOffs$0014
TxtREFERR
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
ConstfEr<Limit
@
0=
OBRANCH
BrnOffs$0014
TxtUNSTBL
ConstDISPLAY1
w-TYPE
LIT
LV$FFFF
Var>990err
!
Const0
EXIT
Const0
VarfABORT
!
LIT
LV$FFFF
Finish

^''R1
VarfTEST
@
OBRANCH
$0004
EXIT
CR
."
$09
"AVE[Sig]="
VarSIG[Ave]
@
.
."
$09
"AVE[Ref]="
$4772
@
.
Finish

^INIT-SYSTEM1
Const0
VarLMPstat
!
Const0
VarfDSPLY
!
VarBLANKdata
LIT
LV$0010
OVER
+
SWAP
(DO)
Const0
)
!
Const2
(+LOOP)
$FFF6
LIT
$FFFF
Varf1stTEST
!
LIT
$000A
Var#SMPLS
!
Const2
Var#OUTLYERS
!
Const0
VarKEYLOCK
!
INIT-FLTRTBLS
LIT
LV$0010
Var#PRIMES
!
LIT
LV$003C
ConstSMPLDLY
!
Finish

