DIM Functions AS LISTBOX
DIM FcnTitle AS STATICTEXT
DIM FcnText AS LISTBOX
DIM FcnTextTitle AS STATICTEXT
DIM StackView AS LISTBOX
DIM StackViewTitle AS STATICTEXT
DIM StatusBar AS STATUSBAR
DIM UnrollButton AS BUTTON
DIM UnrollDisplay AS STATICTEXT
DIM StepButton AS BUTTON
DIM RunButton AS BUTTON
DIM dbg1 as statictext
DIM dbg2 as statictext

TYPE Prop
	OpName AS STRING*20
	Comment AS STRING*50
	StackAdd1 AS STRING*20
	StackAdd2 AS STRING*20
	Unroll AS BOOLEAN
	StackRemove AS BYTE
	AppendWords AS BYTE
END TYPE


CONST FXCodeLines=5668

DIM TAppendWords AS BYTE
DIM UnrollEnabled AS BOOLEAN
DIM UnrollFlag AS BOOLEAN
DIM TextEnd AS BOOLEAN
DIM KeyFound AS BOOLEAN
DIM CodeFile AS FILE
DIM FXCode(FXCodeLines) AS STRING*20
DIM I AS LONG
DIM J AS LONG
DIM K AS LONG
DIM FindFcnNdx AS LONG
DIM GetFcnNdx1 AS LONG
DIM GetFcnNdx2 AS LONG
DIM GetFcnNdx3 AS LONG
DIM GetFcnNdx4 AS LONG
DIM GetFcnNdx5 AS LONG
DIM GetFcnNdx6 AS LONG
DIM GetFcnNdx7 AS LONG
DIM GetFcnNdx8 AS LONG
DIM GetFcnNdx9 AS LONG
DIM KeyNdx AS LONG
DIM KeyNdx1 AS LONG
DIM KeyNdx2 AS LONG
DIM KeyNdx3 AS LONG
DIM KeyNdx4 AS LONG
DIM KeyNdx5 AS LONG
DIM KeyNdx6 AS LONG
DIM KeyNdx7 AS LONG
DIM KeyNdx8 AS LONG
DIM KeyNdx9 AS LONG
DIM TempStr AS STRING*80
DIM TempByte(80) AS BYTE VECTOR
DIM TempInt AS LONG
DIM FORTHStack(20) AS STRING*80
DIM FORTHStackSafe(4) AS STRING*80
DIM LastKey AS LONG
DIM FcnName AS STRING*20
DIM FcnTextSel AS LONG
DIM FcnTextItems AS LONG
DIM PrimaryCode AS STRING*20
DIM SecondaryCode AS STRING*20
dim dbgint as long
dim dbgstr as string

OBMain.create

SETPOSITION OBMain,0,0,1024,740
OBMain.TEXT="FX Analysis"

SETVEC TempByte=ADDR(TempStr)

MENU OBMain
	MENUBAR MainMenu
		MENUTITLE FILEMENU,"File"
			MENUITEM MenuExit,"Exit"
END MENU

TABLE Ops As Prop
"''RNGERR"," "," "," ",FALSE,0,0
".","Print to Screen"," "," ",FALSE,0,0
".''","Print Literal String"," "," ",FALSE,0,2
"@","Push Data Contained in TOS Addr to TOS","[TOS]"," ",FALSE,0,0
"@TEST-SIG","Sum of 8 readings"," "," ",TRUE,0,0
"@TEST[sig0]"," "," "," ",TRUE,0,0
"@TEST[sig1]"," "," "," ",TRUE,0,0
"@TEST[sig2]"," "," "," ",TRUE,0,0
"@TEST[sig3]"," "," "," ",TRUE,0,0
"!","Store NOS to Addr in TOS"," "," ",FALSE,0,0
"<#"," "," "," ",FALSE,0,0
"<","NOS < TOS?","True-False"," ",FALSE,2,0
">","NOS > TOS?"," "," ",FALSE,0,0
">=","NOS >= TOS?"," "," ",FALSE,0,0
"<>","NOS <> TOS?"," "," ",FALSE,0,0
">R","Move TOS to Return Stack"," "," ",FALSE,0,0
"R>","Retrieve TOS from return stack"," "," ",FALSE,0,0
"#"," "," "," ",FALSE,0,0
"#S"," "," "," ",FALSE,0,0
"#>"," "," "," ",FALSE,0,0
"0=","Set TOS to TRUE if 0, ELSE FALSE"," "," ",FALSE,0,0
"0<","TOS  <0?"," "," ",FALSE,0,0
"0>=","TOS>= 0?"," "," ",FALSE,0,0
"1+","Add 1 TO TOS","TOS+1"," ",FALSE,1,0
"1-","Subtract 1 From TOS","TOS-1"," ",FALSE,1,0
"2@","Fetches a Double Integer to the Stack"," "," ",FALSE,0,0
"2!","Store NOS and 2nd NOS to Addr in TOS"," "," ",FALSE,0,0
"2*","Multiply TOS by 2"," "," ",FALSE,0,0
"2/","Divide TOS by 2"," "," ",FALSE,0,0
"2DROP","Remove TOS and NOS"," "," ",FALSE,0,0
"2DUP","Duplicate TOS/NOS"," "," ",FALSE,0,0
"+!","Add NOS to Addr in TOS"," "," ",FALSE,0,0
"+","Add NOS To TOS"," "," ",FALSE,0,0
"-","Subtract TOS From NOS"," "," ",FALSE,0,0
"*","Multiply TOS by TOS"," "," ",FALSE,0,0
"/","Divide TOS by NOS"," "," ",FALSE,0,0
"*/"," "," "," ",FALSE,0,0
"/RND"," "," "," ",FALSE,0,0
"(DO)"," DO Loop NOS=Limit, TOS=Index"," "," ",FALSE,0,0
"(LOOP)"," End of DO Loop"," "," ",FALSE,0,0
"(+LOOP)"," End of DO Loop, Inc by previous Word"," "," ",FALSE,0,0
")"," "," "," ",FALSE,0,0
"?VIAL-IN"," "," "," ",TRUE,0,0
"?VIAL-OUT"," "," "," ",TRUE,0,0
"?DATA-STABLE"," "," "," ",TRUE,0,0
"A/DCNVRT","Result of A/D in TOS"," "," ",FALSE,0,0
"AGCGAIN"," "," "," ",TRUE,0,0
"AND","AND NOS with TOS","NOS AND TOS"," ",FALSE,2,0
"AVE-DATA"," "," "," ",TRUE,0,0
"BRANCH","Branch by Offset in Next Word"," "," ",FALSE,0,1
"C@","Push Data Contained in TOS Addr to TOS"," "," ",FALSE,0,0
"C!","Store NOS (Char) to Addr in TOS"," "," ",FALSE,0,0
"CALC[AveS/R]"," "," "," ",TRUE,0,0
"CALC-GAINS"," "," "," ",TRUE,0,0
"CHK-GAINok"," "," "," ",TRUE,0,0
"CHK-MIN/MAX"," "," "," ",TRUE,0,0
"ChrLit","Put (Char) value that follows on TOS"," "," ",FALSE,0,1
"CR","Send Carriage Return"," "," ",FALSE,0,0
"CSP"," "," "," ",TRUE,0,0
"D<"," "," "," ",FALSE,0,0
"D>"," "," "," ",FALSE,0,0
"D+"," "," "," ",FALSE,0,0
"D/"," "," "," ",FALSE,0,0
"D."," "," "," ",FALSE,0,0
"DELAY[ms]"," "," "," ",FALSE,0,0
"DISPLAY-DATA"," "," "," ",TRUE,0,0
"DISPLAY-QUES"," "," "," ",TRUE,0,0
"DSPLYGc's"," "," "," ",TRUE,0,0
"DROP","Delete TOS"," "," ",FALSE,0,0
"DUP","Duplicate TOS"," "," ",FALSE,0,0
"ELSE"," "," "," ",FALSE,0,0
"ENDIF"," "," "," ",FALSE,0,0
"EVALGAIN"," "," "," ",TRUE,0,0
"FAIL"," "," "," ",TRUE,0,0
"Finish"," "," "," ",FALSE,0,0
"FIRE-LAMP"," "," "," ",TRUE,0,0
"FORMAT-ANSWER"," "," "," ",TRUE,0,0
"FORMAT-GAIN"," "," "," ",TRUE,0,0
"GAINTEST"," "," "," ",TRUE,0,0
"GETAVE"," "," "," ",TRUE,0,0
"GET[Ref]"," "," "," ",TRUE,0,0
"GET[Sig]"," "," "," ",TRUE,0,0
"GET-TEST-SIG"," "," "," ",TRUE,0,0
"GTYPE-ALL"," "," "," ",TRUE,0,0
"INIT-MEASURE-CYCLE"," "," "," ",TRUE,0,0
"INIT-MEASURE-DATA"," "," "," ",TRUE,0,0
"INIT-SIGFILTER"," "," "," ",TRUE,0,0
"LEAVE"," "," "," ",FALSE,0,0
"LMPFAIL"," "," "," ",TRUE,0,0
"LIT","Put value that follows on TOS","*"," ",FALSE,0,1
"MAX","Max of NOS,TOS-->TOS"," "," ",TRUE,0,0
"M/MOD"," "," "," ",TRUE,0,0
"nF*/"," "," "," ",TRUE,0,0
"OBRANCH","Branch by Offset That follows If TOS<>0"," "," ",FALSE,0,1
"OR","OR NOS with TOS","NOS OR TOS"," ",FALSE,2,0
"OVER","Duplicate NOS at TOS","NOS"," ",FALSE,0,0
"PRIME-LAMP-CONTROL"," "," "," ",TRUE,0,0
"PRNTCHAR","Duplicate NOS at TOS"," "," ",FALSE,0,0
"R"," "," "," ",FALSE,0,0
"READ-SAMPLE"," "," "," ",TRUE,0,0
"READoffset"," "," "," ",TRUE,0,0
"READtest"," "," "," ",TRUE,0,0
"REJECT-OUTLYER"," "," "," ",TRUE,0,0
"ROT","Rotate Top 3 on Stack"," "," ",FALSE,0,0
"SCALE-GAIN"," "," "," ",TRUE,0,0
"SETGAIN"," "," "," ",TRUE,0,0
"SET-ANALOG-CNTRL"," "," "," ",FALSE,0,0
"SET-#OUTLYRS"," "," "," ",TRUE,0,0
"SHFTDATA"," "," "," ",TRUE,0,0
"REJECT-OUTLYERS"," "," "," ",TRUE,0,0
"SELFTEST"," "," "," ",TRUE,0,0
"SET-#SMPLS"," "," "," ",TRUE,0,0
"SET[Normal]"," "," "," ",TRUE,0,0
"SET[Offset]"," "," "," ",TRUE,0,0
"SETnormalSIG"," "," "," ",TRUE,0,0
"SETtestSIG"," "," "," ",TRUE,0,0
"SMUDGE"," "," "," ",TRUE,0,0
"SP@","Push SP onto TOS"," "," ",FALSE,0,0
"SPACE"," "," "," ",FALSE,0,0
"Stop"," "," "," ",FALSE,0,0
"STOP"," "," "," ",FALSE,0,0
"STATE"," "," "," ",TRUE,0,0
"SWAP","Swap TOS with NOS"," "," ",FALSE,0,0
"TOGGLE"," "," "," ",TRUE,0,0
"TRIGER-LAMP"," "," "," ",TRUE,0,0
"TSTMSG"," "," "," ",TRUE,0,0
"TYPE"," "," "," ",FALSE,0,0
"TYPEdata"," "," "," ",FALSE,0,0
"TYPEGAINS"," "," "," ",TRUE,0,0
"UPDATE-OFFSET"," "," "," ",TRUE,0,0
"USER"," "," "," ",FALSE,0,1
"w-TYPE"," "," "," ",FALSE,0,0
"XOR","XOR NOS with TOS"," "," ",FALSE,0,0
ENDTABLE

LastKey=TABLESIZE(Ops)

CONSTRUCT FcnTitle,5,0,200,20
FcnTitle.TEXT="Functions"

CONSTRUCT Functions,5,20,200,600

ON ERROR GOTO NoCodeFile
OPEN CodeFile,"fxcode.txt":READ
FOR I=1 TO FXCodeLines
	READ CodeFile,FXCode(I)
	IF LEFT(FXCode(I),1)="^" THEN
		TempStr=TAIL(FXCode(I),2)
		Functions.ADDITEMSORTED TempStr
	ENDIF
NEXT I
CLOSE CodeFile

CONSTRUCT FcnTextTitle,225,0,380,20
FcnTextTitle.TEXT="Function Code"

CONSTRUCT FcnText,225,20,380,600

CONSTRUCT StackViewTitle,625,0,380,20
StackViewTitle.TEXT="Stack"

CONSTRUCT StackView,625,20,380,600

construct dbg1,0,650,300,20
dbg1.backcolor=$ffff00
;dbg1.visible=false
construct dbg2,320,650,300,20
dbg2.backcolor=$ffff00
;dbg2.visible=false

CONSTRUCT UnrollButton,700,640,80,25
UnrollButton.TEXT="Unroll"

CONSTRUCT UnrollDisplay,700,615,80,20
UnrollDisplay.BACKCOLOR=$00ff00
UnrollDisplay.TEXT="Enabled"
UnrollEnabled=TRUE

CONSTRUCT StepButton,800,640,80,25
StepButton.TEXT="Step"

CONSTRUCT RunButton,900,640,80,25
RunButton.TEXT="Run"

Construct StatusBar,0,0,0,0

END EVENT

FcnText.select

END EVENT

PareComment:
FOR K=1 TO LEN(TempStr)
	IF MID$(TempStr,K,1)=";" THEN
		TempByte(K)=0
		GOTO PareCommentDone
	ENDIF
NEXT K
PareCommentDone:
RETURN

Functions.select
FcnText.CLEAR
FcnTextSel=1
FcnName=Functions.SELTEXT
FcnTextTitle.TEXT=FcnName
GOSUB FindFcnName
GOSUB GetFcnCode1
FcnText.SELITEM=1
SkipText:
FcnText.SELITEM=FcnTextSel
TempStr=FcnText.SELTEXT
IF RIGHT$(TempStr,10)="<Unrolled>" THEN
	INCR FcnTextSel
	FcnText.SELITEM=FcnTextSel
	GOTO SkipText
ENDIF
FcnText.ADDITEM " "
FcnTextItems=FcnText.ITEMCOUNT
TempStr=STR(FcnTextItems)+" Items"
dbg1.text=TempStr
END EVENT

FindFcnName:
FOR FindFcnNdx=1 TO FXCodeLines
	EXITIF LEFT(FXCode(FindFcnNdx),1)="^" AND FcnName=TAIL$(FXCode(FindFcnNdx),2)
NEXT FindFcnNdx
RETURN

GetFcnCode1:
FOR GetFcnNdx1=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx1)="Finish"
	TempStr=FXCode(GetFcnNdx1)
	FcnName=TempStr
	FOR KeyNdx1=1 TO LastKey
		IF Ops(KeyNdx1).OpName=FXCode(GetFcnNdx1) THEN
			TempStr=FXCode(GetFcnNdx1)+"; "+Ops(KeyNdx1).Comment
			IF Ops(KeyNdx1).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx1
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode2
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx1
RETURN

GetFcnCode2:
FOR GetFcnNdx2=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx2)="Finish"
	TempStr=FXCode(GetFcnNdx2)
	FcnName=TempStr
	FOR KeyNdx2=1 TO LastKey
		IF Ops(KeyNdx2).OpName=FXCode(GetFcnNdx2) THEN
			TempStr=FXCode(GetFcnNdx2)+"; "+Ops(KeyNdx2).Comment
			IF Ops(KeyNdx2).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx2
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode3
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx2
RETURN

GetFcnCode3:
FOR GetFcnNdx3=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx3)="Finish"
	TempStr=FXCode(GetFcnNdx3)
	FcnName=TempStr
	FOR KeyNdx3=1 TO LastKey
		IF Ops(KeyNdx3).OpName=FXCode(GetFcnNdx3) THEN
			TempStr=FXCode(GetFcnNdx3)+"; "+Ops(KeyNdx3).Comment
			IF Ops(KeyNdx3).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx3
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode4
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx3
RETURN

GetFcnCode4:
FOR GetFcnNdx4=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx4)="Finish"
	TempStr=FXCode(GetFcnNdx4)
	FcnName=TempStr
	FOR KeyNdx4=1 TO LastKey
		IF Ops(KeyNdx4).OpName=FXCode(GetFcnNdx4) THEN
			TempStr=FXCode(GetFcnNdx4)+"; "+Ops(KeyNdx4).Comment
			IF Ops(KeyNdx4).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx4
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode5
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx4
RETURN

GetFcnCode5:
FOR GetFcnNdx5=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx5)="Finish"
	TempStr=FXCode(GetFcnNdx5)
	FcnName=TempStr
	FOR KeyNdx5=1 TO LastKey
		IF Ops(KeyNdx5).OpName=FXCode(GetFcnNdx5) THEN
			TempStr=FXCode(GetFcnNdx5)+"; "+Ops(KeyNdx5).Comment
			IF Ops(KeyNdx5).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx5
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode6
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx5
RETURN

GetFcnCode6:
FOR GetFcnNdx6=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx6)="Finish"
	TempStr=FXCode(GetFcnNdx6)
	FcnName=TempStr
	FOR KeyNdx6=1 TO LastKey
		IF Ops(KeyNdx6).OpName=FXCode(GetFcnNdx6) THEN
			TempStr=FXCode(GetFcnNdx6)+"; "+Ops(KeyNdx6).Comment
			IF Ops(KeyNdx6).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx6
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode7
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx6
RETURN

GetFcnCode7:
FOR GetFcnNdx7=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx7)="Finish"
	TempStr=FXCode(GetFcnNdx7)
	FcnName=TempStr
	FOR KeyNdx7=1 TO LastKey
		IF Ops(KeyNdx7).OpName=FXCode(GetFcnNdx7) THEN
			TempStr=FXCode(GetFcnNdx7)+"; "+Ops(KeyNdx6).Comment
			IF Ops(KeyNdx7).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx7
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode8
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx7
RETURN

GetFcnCode8:
FOR GetFcnNdx8=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx8)="Finish"
	TempStr=FXCode(GetFcnNdx8)
	FcnName=TempStr
	FOR KeyNdx8=1 TO LastKey
		IF Ops(KeyNdx8).OpName=FXCode(GetFcnNdx8) THEN
			TempStr=FXCode(GetFcnNdx8)+"; "+Ops(KeyNdx8).Comment
			IF Ops(KeyNdx8).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				UnrollFlag=TRUE
			ENDIF
		ENDIF
	NEXT KeyNdx8
	FcnText.ADDITEM TempStr
	IF UnrollFlag=TRUE THEN
		UnrollFlag=FALSE
		GOSUB FindFcnName
		GOSUB GetFcnCode9
		FcnText.ADDITEM "<<<<<Unroll Done>>>>>"
	ENDIF
NEXT GetFcnNdx8
RETURN

GetFcnCode9:
FOR GetFcnNdx9=FindFcnNdx+1 TO FXCodeLines
	EXITIF FXCode(GetFcnNdx9)="Finish"
	TempStr=FXCode(GetFcnNdx9)
	FcnName=TempStr
	FOR KeyNdx9=1 TO LastKey
		IF Ops(KeyNdx9).OpName=FXCode(GetFcnNdx9) THEN
			TempStr=FXCode(GetFcnNdx9)+"; "+Ops(KeyNdx9).Comment
			IF Ops(KeyNdx9).Unroll=TRUE AND UnrollEnabled=TRUE THEN
				TempStr=TempStr+" <Unrolled>"
				dbg2.text="Overflow"
			ENDIF
		ENDIF
	NEXT KeyNdx9
	FcnText.ADDITEM TempStr
NEXT GetFcnNdx9
RETURN

UnrollButton.command
IF UnrollEnabled=TRUE THEN
	UnrollDisplay.TEXT="Disabled"
	UnrollDisplay.BACKCOLOR=$0000ff
ELSE
	UnrollDisplay.TEXT="Enabled"
	UnrollDisplay.BACKCOLOR=$00ff00
ENDIF
UnrollEnabled=NOT(UnrollEnabled)
END EVENT

MENU.COMMAND
SELECT CASE MenuID
	CASE MenuExit
		END
END SELECT
END EVENT

StepButton.command
GOSUB StepCode
END EVENT

RunButton.command
FcnText.selitem=0
END EVENT

NoCodeFile:
MSGBOX "Error","fxcode.txt missing",MB_OK
END

StepCode:
FcnTextSel=FcnText.SELITEM
IF FcnTextSel=FcnTextItems THEN
	RETURN
ENDIF
TempStr=FcnText.SELTEXT
GOSUB PareComment
PrimaryCode=TempStr
dbg1.text=PrimaryCode
GOSUB FindKey
IF TAppendWords>0 THEN
	INCR FcnTextSel
	SecondaryCode=FcnText.SELTEXT
	IF TAppendWords=2 THEN
		INCR FcnTextSel
	ENDIF
	FcnText.SELITEM=FcnTextSel
ELSE
	SecondaryCode="blank"
ENDIF
dbg2.text=SecondaryCode
IncText:
INCR FcnTextSel
FcnText.selitem=FcnTextSel
TempStr=FcnText.SELTEXT
IF TempStr="<<<<<Unroll Done>>>>>" THEN IncText
IF RIGHT$(TempStr,10)="<Unrolled>" THEN IncText
RETURN

CheckEnd:
IF FcnTextItems-FcnTextSel=2 THEN
	TextEnd=TRUE
ELSE
	TextEnd=FALSE
ENDIF
RETURN

FindKey:
KeyFound=FALSE
TAppendWords=0
FOR KeyNdx=1 TO LastKey
	IF Ops(KeyNdx).OpName=PrimaryCode THEN
		KeyFound=TRUE
		TAppendWords=Ops(KeyNdx).AppendWords
		RETURN
	ENDIF
NEXT KeyNdx
RETURN
